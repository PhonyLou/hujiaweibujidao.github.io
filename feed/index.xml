<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hujiawei Bujidao]]></title>
  <link href="http://hujiaweibujidao.github.io/feed" rel="self"/>
  <link href="http://hujiaweibujidao.github.io/"/>
  <updated>2014-05-19T19:30:23+08:00</updated>
  <id>http://hujiaweibujidao.github.io/</id>
  <author>
    <name><![CDATA[hujiawei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SS 4-Hypothesis Testing]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-4/"/>
    <updated>2014-05-19T23:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-4</id>
    <content type="html"><![CDATA[<p><strong><center>统计学那些事 Things of Statistics</center></strong>
<strong><center>逸夫图书馆, 2014/5/19</center></strong></p>

<hr />

<h4 id="center-center"><center>第四部分 假设检验</center></h4>

<p>1.假设：一般假设就是一个“猜想”，它表述问题的一般陈述。假设检验是用于样本，然后才将结论一般化推广到总体中。</p>

<p>2.零假设(null hypothesis=$H_{0}$，或叫原假设)：它一般表示“正在研究的两个变量无关或者没有差异”这样的命题。例如，三年级学生的记忆力考试成绩与四年级学生记忆力考试成绩之间没有差异。</p>

<p><strong>(1)零假设是研究的起点，因为在没有信息的情况下，零假设就被看作是可以接受的真实状态。在这种假设下，我们认为观测到的效应是由偶然因素造成的。</strong>
<strong>(2)零假设也是研究的基准，也就是说在零假设成立的情况下，计算统计量，然后进行假设检验。这就类似反证法的思想。</strong></p>

<p>3.研究假设(research hypothesis=alternate hypothesis，或叫备择假设)：与零假设相对立的，认为变量之间有关系的假设。</p>

<p>研究假设分为有方向和无方向两种研究假设。无方向研究假设命题例子：三年级学生的记忆力考试成绩与四年级学生记忆力考试成绩之间有差异。有方向研究假设命题例子：三年级学生的记忆力考试成绩低于四年级学生记忆力考试成绩。</p>

<p>讨论有无方向的另一种形式是讨论单尾检验(one-tailed test)和双尾检验(two-tailed test)。</p>

<p>零假设与研究假设的区别：
(1)零假设表示两个变量没有差异或者没有关系，研究假设表示它们有关系或者有差异；
(2)零假设对应的是总体，而研究假设对应的是样本。我们是从总体中取出一部分样本进行检验，将得到的结论推广到总体中。
(3)因为总体不能直接检验(不现实，不经济或者不可能)，所以零假设只能间接检验，研究假设则可以直接检验。
&lt;p class=&#8217;post-footer&#8217;&gt;
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-4/">http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-4/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a> Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)&lt;/p&gt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SS 3-Descriptive Statistics]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-3/"/>
    <updated>2014-05-19T21:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-3</id>
    <content type="html"><![CDATA[<p><strong><center>统计学那些事 Things of Statistics</center></strong>
<strong><center>逸夫图书馆, 2014/5/19</center></strong></p>

<hr />

<h4 id="center-center"><center>第三部分 描述性统计量</center></h4>

<p>1.描述数据的集中趋势：均值(mean)，中位数(median)，众数(mode)，加权平均数</p>

<p>百分位点(percentile points)：中位数(Q2)就是50百分位点，Q1为25百分位点(lower quartile)，Q3为75百分位点(upper quartile)，经常使用Q3-Q1=IQR(interquartile range，四分差或四分位数)来检查分布是否对称。</p>

<p>[如果要计算一组数中的某个百分位数，一般比较好的排序方法是选择排序；当然，如果是计算该组数的特殊的百分位数，例如中位数，有其他更好地方法能够在线性时间内得到，之后我对做一些相关问题的研究，暂且说明一下]</p>

<p>2.描述数据的变异性：极差(range)，标准差(standard deviation,简称s或者SD)，方差(deviation)</p>

<p>标准差的计算公式：
$$
s=\sqrt{\frac{\Sigma(X-\bar{X})^2}{n-1}}
$$</p>

<p><strong>s是总体标准差的无偏估计，如果根号内部分母改成了n则是有偏估计</strong>，详细证明参见：<a href="http://en.wikipedia.org/wiki/Bias_of_an_estimator">http://en.wikipedia.org/wiki/Bias_of_an_estimator</a></p>

<p>标准差和方差的异同：<strong>它们都是用来反映数据集中数据的变异性或者离散度的度量，但是标准差以原有的计算单位存在，然而方差以平方单位存在，前者在实际中更加具有意义</strong>。例如，某高校的男生的平均身高是170cm，标准差是5cm，那么说明该校男生的身高与均值的差异大概就是5cm，换成方差来解释的话就不好陈述了。</p>

<p>使用有偏估计其实也可，但是最好使用无偏估计，我记得Coursera Machine Learning课中Andrew Ng曾经提到过，实际编码中其实还是使用有偏估计，因为它们在样本数据很大的时候其实结果没多大影响。</p>

<p>3.数据集的图形化显示：直方图，饼图，线图，柱形图，条形图，茎叶图等</p>

<p>数据分布的差异性描述：平均值，变异性，峰度(kurtosis)，偏度(skewness)</p>

<p>峰值可能有多个，比如双峰或者多峰等。偏度有一个计算公式，由Pearson发明的，他同时也是相关系数的发明者，偏度虽有正负之分，但是绝对值越大说明图形越偏。</p>

<script type="math/tex; mode=display">
SK=\frac{3(\bar{X}-M)}{s},\quad M=Median,\bar{X}=Mean,s=SD
</script>

<p>4.相关系数(correlation coefficient)是两个变量之间<strong>线性关系</strong>的数值型指标，取值范围是[-1,1]，大于0表示正相关，小于0表示负相关，可以用散点图来直接查看相关性。根据某些不成文的规则，一般高于0.6表示强相关，低于0.4表示弱相关，中间部分表示中度相关。</p>

<p>[<strong>Pearson相关系数考察的变量的属性是连续的，例如年龄，体重等，如果是离散型变量那么应该使用点二列相关系数</strong>]</p>

<p>注意两点：(1)<strong>相关系数反映的是只是线性关系！如果两个变量的相关系数为0，只能说明它们没有线性关系存在，但是可能存在其他的非线性关系！</strong>
(2)<strong>相关性和因果关系无关！</strong>例如，冰淇淋的消费量和犯罪率是正相关的，但是两者不存在任何因果关系！</p>

<p>相关系数的计算：</p>

<script type="math/tex; mode=display">
r_{XY}=\frac{n\Sigma{XY}-\Sigma{X}\Sigma{Y}}{\sqrt{[n\Sigma{X^2}-(\Sigma{X})^2][n\Sigma{Y^2}-(\Sigma{Y})^2]}}
</script>

<p>决定系数：相关系数的平方，它表述一个变量的方差可以被另一个变量的方差来解释的百分比。
&lt;p class=&#8217;post-footer&#8217;&gt;
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-3/">http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-3/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a> Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)&lt;/p&gt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SS 2-Distribution]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-2/"/>
    <updated>2014-05-19T20:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-2</id>
    <content type="html"><![CDATA[<p><strong><center>统计学那些事 Things of Statistics</center></strong>
<strong><center>逸夫图书馆, 2014/5/19</center></strong></p>

<hr />

<h4 id="center-center"><center>第二部分 分布</center></h4>

<p>1.概率质量函数PMF(Probability Mass Function)：数据集中数据值到它的概率的映射函数。直方图是各个值出现的频数，如果将频数除以样本总数，得到概率，归一化之后的直方图就是PMF。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/pmf.png" alt="image" /></p>

<p>2.累积分布函数CDF(Cumulative Distribution Function)：数据集中数据值到它在分布中概率的累积值的映射函数。例如，
CDF(0) = 0; CDF(1) = 0.2; CDF(2) = 0.6; CDF(3) = 0.8; CDF(4) = 0.8; CDF(5) = 1，它的CDF图为一个阶跃函数：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/cdf.png" alt="image" /></p>

<p>3.指数分布(exponential distribution)：一种连续分布。举例来说，<strong>观察一系列事件之间的间隔时间，若事件在每个时间点发生的概率相同，那么间隔时间的分布就近似指数分布</strong>。指数分布的CDF如下：</p>

<script type="math/tex; mode=display">
CDF(x)=1-e^{-\lambda x}
</script>

<p>参数$\lambda$决定了指数分布的形状，通常，指数分布的均值是$\frac{1}{\lambda}$，中位数是$\frac{log(2)}{\lambda}$。下图为$\lambda=2$的指数分布图：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/edcdf.png" alt="image" /></p>

<p>如果判断一个分布是否是指数分布呢？一种办法是画出取对数之后的互补累积分布函数(CCDF=Complementary CDF=1-CDF(x))，CCDF是一条斜率为$-\lambda$的直线，原因如下：</p>

<script type="math/tex; mode=display">
y=CCDF(x)=1-CDF(x)=e^{-\lambda x} \quad => \quad log(y)=-\lambda x
</script>

<p>4.正态分布(Normal Distribution)：又叫高斯分布，是最常用的分布。对于正态分布的CDF还没有一种准确的表达，最常用的一种形式是以误差函数(error function)来表示，它是一个特殊的函数，表示为erf(x)：</p>

<script type="math/tex; mode=display">
CDF(x)=\frac{1}{2}[1+erf(\frac{x-\mu}{\sigma \sqrt{2}})] \quad erf(x)=\frac{2}{\sqrt{\pi}}\int_{0}^{x}e^{-r^{2}}dt
</script>

<p>其中，参数$\mu$和$\sigma$分别决定了正态分布的均值和标准差。下图为$\mu=2.0$和$\sigma=0.5$的正态分布的CDF图：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/ndcdf.png" alt="image" /></p>

<p>根据大数定理，当我们处理大样本数据集(超过30个数据)，并且重复地从总体中抽取样本时，得到的数值分布就接近正态分布曲线。正态分布以均值为中心完全对称。</p>

<p>关于正态分布有一个重要的结论，对任何数值分布来说(不论它的均值和标准差)，只要数值是正态分布，那么几乎100%的数值都分布在均值的-3到3个标准差之间。下面是正态曲线下数值的分布情况：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/nd.png" alt="image" /></p>

<p>从中可以看出，在均值与1个标准差之间大概有34%的数值分布，在1个标准差和2个标准差之间大概有13%的数值分布，在2个标准差和3个标准差之间大概有2.1%的数值分布。</p>

<p><a href="http://wikipedia.org/wiki/Log-normal_distribution">对数正态分布</a>：如果一组数据取对数之后服从正态分布，那么我们就称其服从对数正态分布。对数正态分布的 CDF 跟正态分布一样, 只是用 logx 代替原来的 x:</p>

<script type="math/tex; mode=display">
CDF_{lognormal}(x) = CDF_{normal}(log x)
</script>

<p>对数正态分布的均值与标准差不再是是$\mu$和$\sigma$了。可以证明,成人体重的分布是近似对数正态的。</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-2/">http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-2/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SS 1-Probability]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-1/"/>
    <updated>2014-05-19T19:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-1</id>
    <content type="html"><![CDATA[<p><strong><center>统计学那些事 Things of Statistics</center></strong>
<strong><center>逸夫图书馆, 2014/5/19</center></strong></p>

<hr />

<h4 id="center-center"><center>第一部分 概率</center></h4>
<p>1.事件：对立事件(complementary event)，互斥事件(exclusive event)，相交事件(intersecting event)，相关事件(dependent event)，独立事件(independent event)，可以使用韦恩图(Venn Diagram)方便分析事件之间的关系。</p>

<p>如果事件A和B会相互影响，那么它们是相关事件，否则是独立事件。
事件A和B独立：$P(A|B)=P(A) \quad P(A \cap B)=P(A)P(B)$</p>

<p>2.概率：条件概率(Conditional Probability)，全概率(Total Probability)，贝叶斯定理(Bayes’ Theorem)</p>

<table>
  <tbody>
    <tr>
      <td>条件概率：$P(A</td>
      <td>B)=\frac{P(A \cap B)}{P(B)}$</td>
    </tr>
  </tbody>
</table>

<table>
  <tbody>
    <tr>
      <td>全概率：$P(B)=P(B</td>
      <td>A)P(A)+P(B</td>
      <td>A’)P(A’)$</td>
    </tr>
  </tbody>
</table>

<table>
  <tbody>
    <tr>
      <td>贝叶斯定理(将条件概率和全概率整合到一起)：$P(A</td>
      <td>B)=\frac{P(A \cap B)}{P(B</td>
      <td>A)P(A)+P(B</td>
      <td>A’)P(A’)}$</td>
    </tr>
  </tbody>
</table>

<p>3.期望(Expectation)与方差(Variance)</p>

<p>$E(x)=\Sigma xP(X=x) \quad Var(x)=E(x-\mu)^{2}=\Sigma (x-\mu)^2P(X=x)=E(x^{2})-(E(x))^{2}$</p>

<p>线性变换之后的期望与方差：</p>

<p>$E(ax+b)=aE(x)+b \quad Var(ax+b)=a^{2}Var(x)$
$E(ax+by)=aE(x)+bE(y) \quad Var(ax+by)=a^{2}Var(x)+b^{2}Var(y)$</p>

<p><strong>思考：为什么加上b方差并没有发生变化呢？因为在变量中增加常数b只是将概率分布移动了一下，分布的形状并没有发生改变，所以b并没有在方差中起到作用。</strong></p>

<p>相互独立事件X和Y：</p>

<p>$E(X+Y)=E(X)+E(Y) \quad Var(X+Y)=Var(X)+Var(Y)$
$E(X-Y)=E(X)-E(Y) \quad Var(X-Y)=Var(X)+Var(Y)$</p>

<p><strong>思考：为什么$Var(X-Y)=Var(X)+Var(Y)$？可以随便拿数据验证之。</strong>
<strong>记住，一个随机变量减去另一个随机变量得到的概率分布的方差是两个随机变量的方差之和，方差只会增加！</strong></p>

<p>下面两个图示演示了其结果</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/varxplusy.png" alt="image" /></p>

<p><img src="http://hujiaweibujidao.github.io/images/math/varxminusy.png" alt="image" /></p>

<p>相互独立的随机变量与独立观测值之间的区别：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/independentobservation.png" alt="image" /></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-1/">http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-1/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Statistics Summary]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary/"/>
    <updated>2014-05-19T18:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary</id>
    <content type="html"><![CDATA[<p><strong><center>统计学那些事 Things of Statistics</center></strong>
<strong><center>逸夫图书馆, 2014/5/19</center></strong></p>

<hr />

<h4 id="center-center"><center>**第零部分 碎碎念**</center></h4>
<p>本系列是对概率和数理统计中的重要内容的一个总结，不会侧重很多众所周知的细节，所以有啥疑问还是需要Google或者Wikipedia。关于本系列中出现的术语参照参考书籍中的定义，部分可能与大学教材中不同，请自行对应起来理解。小弟才疏学浅，若有错误请留言，欢迎批评指正。</p>

<p>主要参考书籍：</p>

<p>1.<a href="http://book.douban.com/subject/2985995/">《爱上统计学》</a></p>

<p>2.<a href="http://book.douban.com/subject/7056708/">《深入浅出统计学》</a></p>

<p>3.<a href="http://book.douban.com/subject/24381562/">《统计思维：程序员数学之概率统计》</a></p>

<hr />

<p>本总结总共4章节，分开来阅读较好</p>

<p>1.[概率]</p>

<p>2.[分布]</p>

<p>3.[描述性统计量]</p>

<p>4.[假设检验]</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary/">http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Algorithms: Longest Common Subsequence]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/19/longest-common-subsequence/"/>
    <updated>2014-05-19T16:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/19/longest-common-subsequence</id>
    <content type="html"><![CDATA[<h4 id="centeralgorithms-longest-common-subsequencecenter"><center>Algorithms: Longest Common Subsequence</center></h4>

<p>最长公共子序列是典型的动态规划问题，如果不理解动态规划请移步先看<a href="http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-dynamic-programming/">这篇动态规划的总结</a>，否则本篇文章中的代码实现会不理解的哟！</p>

<p>参考内容：</p>

<p>1.<a href="http://en.wikipedia.org/wiki/Introduction_to_Algorithms">算法导论</a></p>

<p>2.<a href="http://book.douban.com/subject/4875278/">算法设计、分析与实现从入门到精通</a></p>

<hr />

<p>1.问题描述</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/lcs1.png" alt="image" /></p>

<p>2.最优子结构和子问题重叠</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/lcs2.png" alt="image" /></p>

<p>3.5种实现方式</p>

<p>根据LCS的递推公式</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

c[i][j]=  \left\{ 
  \begin{array}{l l}
    0 & \quad \text{i=0 或者 j=0}\\
    c[i-1][j-1]+1 & \quad \text{i,j>0,且$x_{i}=y_{j}$}\\
    max({c[i][j-1],c[i-1][j]}) & \quad \text{i,j>0,且$x_{i} \ne y_{j}$}
  \end{array} \right.
 %]]&gt;</script>

<p>(1)从中可以看出计算c[i][j]时只需要2行即可，前一行(i-1)和当前行(i)，每行的长度是min{m,n}，首先初始化前一行都为0，然后计算当前行的值，当要计算下一行之前将当前行的值复制到前一行中即可。</p>

<p>(2)从递推公式中还可以看出计算当前行i的话，其实只需要一行再加上O(1)的额外空间就行了。因为计算c[i][j]只需要前一行中c[i-1]<a href="k&gt;=j-1">k</a>的数据，对于k&lt;j-1的数据都是没有用的，而当前行c[i]<a href="l&lt;=j-1">l</a>的数据都是有用的，要用来计算下一行的值，所以，可以在计算当前行的时候，将当前行的前面计算好的部分复制到前一行中对应位置上，但是c[i][j-1]除外，因为c[i-1][j-1]也是需要的，所以需要额外的O(1)的空间保存c[i][j-1]。</p>

<p>LCS的五种实现：分别为0：直接递归；1：带备忘录的递归；2：使用二维数组保存结果的迭代；3：使用2个一维数组保存结果的迭代；4：使用1个一维数组和额外的O(1)空间保存结果的迭代。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">lcs0</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">):</span>
</span><span class="line">    <span class="c">#string starts at index 0, not 1</span>
</span><span class="line">    <span class="k">if</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">0</span> <span class="ow">or</span> <span class="n">j</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="mi">0</span> <span class="c">#attention to this!!!</span>
</span><span class="line">    <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">y</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>  <span class="k">return</span> <span class="n">lcs0</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">    <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">lcs0</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="p">),</span><span class="n">lcs0</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="s">&#39;abcde&#39;</span><span class="p">,</span><span class="s">&#39;oaob&#39;</span>
</span><span class="line"><span class="n">lenx</span><span class="p">,</span><span class="n">leny</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">lcs0</span><span class="p">(</span><span class="n">lenx</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">leny</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="c">#2</span>
</span><span class="line">
</span><span class="line"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">memo</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="n">cache</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line">    <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">wrap</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">args</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">cache</span><span class="p">:</span>
</span><span class="line">            <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span><span class="o">=</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">wrap</span>
</span><span class="line">
</span><span class="line"><span class="nd">@memo</span>
</span><span class="line"><span class="k">def</span> <span class="nf">lcs1</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">):</span>
</span><span class="line">    <span class="c">#string starts at index 0, not 1</span>
</span><span class="line">    <span class="k">if</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">0</span> <span class="ow">or</span> <span class="n">j</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="mi">0</span> <span class="c">#attention to this!!!</span>
</span><span class="line">    <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">y</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>  <span class="k">return</span> <span class="n">lcs1</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">    <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">lcs1</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="p">),</span><span class="n">lcs1</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="s">&#39;abcde&#39;</span><span class="p">,</span><span class="s">&#39;oaob&#39;</span>
</span><span class="line"><span class="n">lenx</span><span class="p">,</span><span class="n">leny</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">lcs1</span><span class="p">(</span><span class="n">lenx</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">leny</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="c">#2</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">lcs2</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">):</span>
</span><span class="line">    <span class="n">lenx</span><span class="p">,</span><span class="n">leny</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class="line">    <span class="n">minlen</span><span class="p">,</span><span class="n">maxlen</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span>
</span><span class="line">    <span class="k">if</span> <span class="n">lenx</span><span class="o">&lt;</span><span class="n">leny</span><span class="p">:</span> <span class="n">minlen</span><span class="p">,</span><span class="n">maxlen</span><span class="o">=</span><span class="n">lenx</span><span class="p">,</span><span class="n">leny</span><span class="p">;</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="n">y</span><span class="p">,</span><span class="n">x</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span> <span class="n">minlen</span><span class="p">,</span><span class="n">maxlen</span><span class="o">=</span><span class="n">leny</span><span class="p">,</span><span class="n">lenx</span><span class="p">;</span>
</span><span class="line">    <span class="c">#s is maxlen * minlen</span>
</span><span class="line">    <span class="n">s</span><span class="o">=</span><span class="p">[[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">minlen</span><span class="p">)]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">maxlen</span><span class="p">)]</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">maxlen</span><span class="p">):</span> <span class="c">#so, let x be the longer string!!!</span>
</span><span class="line">        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">minlen</span><span class="p">):</span>
</span><span class="line">            <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">y</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="nb">max</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">],</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class="line">    <span class="k">return</span> <span class="n">s</span>
</span><span class="line">
</span><span class="line"><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="s">&#39;abcde&#39;</span><span class="p">,</span><span class="s">&#39;oaob&#39;</span>
</span><span class="line"><span class="n">s</span><span class="o">=</span><span class="n">lcs2</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="c">#[[0, 1, 1, 1], [0, 1, 1, 2], [0, 1, 1, 2], [0, 1, 1, 2], [0, 1, 1, 2]]</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">lcs3</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">):</span>
</span><span class="line">    <span class="n">lenx</span><span class="p">,</span><span class="n">leny</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class="line">    <span class="n">minlen</span><span class="p">,</span><span class="n">maxlen</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span>
</span><span class="line">    <span class="k">if</span> <span class="n">lenx</span><span class="o">&lt;</span><span class="n">leny</span><span class="p">:</span> <span class="n">minlen</span><span class="p">,</span><span class="n">maxlen</span><span class="o">=</span><span class="n">lenx</span><span class="p">,</span><span class="n">leny</span><span class="p">;</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="n">y</span><span class="p">,</span><span class="n">x</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span> <span class="n">minlen</span><span class="p">,</span><span class="n">maxlen</span><span class="o">=</span><span class="n">leny</span><span class="p">,</span><span class="n">lenx</span><span class="p">;</span>
</span><span class="line">    <span class="c">#s is maxlen * minlen</span>
</span><span class="line">    <span class="n">pre</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">minlen</span><span class="p">)]</span>
</span><span class="line">    <span class="n">cur</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">minlen</span><span class="p">)]</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">maxlen</span><span class="p">):</span> <span class="c">#so, let x be the longer string!!!</span>
</span><span class="line">        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">minlen</span><span class="p">):</span>
</span><span class="line">            <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">y</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span> <span class="n">cur</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">pre</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span> <span class="n">cur</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="nb">max</span><span class="p">(</span><span class="n">pre</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">cur</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class="line">        <span class="n">pre</span><span class="p">[:]</span><span class="o">=</span><span class="n">cur</span><span class="p">[:]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">cur</span>
</span><span class="line">
</span><span class="line"><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="s">&#39;abcde&#39;</span><span class="p">,</span><span class="s">&#39;oaob&#39;</span>
</span><span class="line"><span class="n">s</span><span class="o">=</span><span class="n">lcs3</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="c">#[2, 2, 2, 2]</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">lcs4</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">):</span>
</span><span class="line">    <span class="n">lenx</span><span class="p">,</span><span class="n">leny</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class="line">    <span class="n">minlen</span><span class="p">,</span><span class="n">maxlen</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span>
</span><span class="line">    <span class="k">if</span> <span class="n">lenx</span><span class="o">&lt;</span><span class="n">leny</span><span class="p">:</span> <span class="n">minlen</span><span class="p">,</span><span class="n">maxlen</span><span class="o">=</span><span class="n">lenx</span><span class="p">,</span><span class="n">leny</span><span class="p">;</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="n">y</span><span class="p">,</span><span class="n">x</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span> <span class="n">minlen</span><span class="p">,</span><span class="n">maxlen</span><span class="o">=</span><span class="n">leny</span><span class="p">,</span><span class="n">lenx</span><span class="p">;</span>
</span><span class="line">    <span class="c">#s is maxlen * minlen</span>
</span><span class="line">    <span class="n">s</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">minlen</span><span class="p">)]</span>
</span><span class="line">    <span class="n">t</span><span class="o">=</span><span class="mi">0</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">maxlen</span><span class="p">):</span> <span class="c">#so, let x be the longer string!!!</span>
</span><span class="line">        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">minlen</span><span class="p">):</span>
</span><span class="line">            <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">y</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span> <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">t</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span> <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="nb">max</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class="line">            <span class="n">t</span><span class="o">=</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">s</span>
</span><span class="line">
</span><span class="line"><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="s">&#39;abcde&#39;</span><span class="p">,</span><span class="s">&#39;oaobce&#39;</span>
</span><span class="line"><span class="n">s</span><span class="o">=</span><span class="n">lcs4</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="c">#[3, 3, 3, 3, 4]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/19/longest-common-subsequence/">http://hujiaweibujidao.github.io/blog/2014/05/19/longest-common-subsequence/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Love you]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/18/love-you/"/>
    <updated>2014-05-18T00:07:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/18/love-you</id>
    <content type="html"><![CDATA[<p>G.E.M 邓紫棋 翻唱的《喜欢你》，真的太好听了！</p>

<audio width="300" height="32" style="margin: auto; top: 0; right: 0; bottom: 0; left: 0;" controls="controls" autoplay="autoplay" name="media" src="http://hujiaweibujidao.github.io/music/love-you.mp3">
</audio>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/18/love-you/">http://hujiaweibujidao.github.io/blog/2014/05/18/love-you/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Advances]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/16/python-tips2/"/>
    <updated>2014-05-16T10:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/16/python-tips2</id>
    <content type="html"><![CDATA[<p>关于Python的好文章集锦：</p>

<p>1.<a href="http://www.toptal.com/python/top-10-mistakes-that-python-programmers-make">Top 10 Mistakes that Python Programmers Make</a></p>

<p>2.<a href="http://pypix.com/python/advanced-data-structures-python/">Advanced Data Structures in Python</a></p>

<p><a href="http://blog.jobbole.com/65218/">中文翻译版本:Python高级数据结构</a></p>

<p>3.<a href="http://akaptur.github.io/blog/2013/11/15/introduction-to-the-python-interpreter/">Introduction to the Python Interpreter</a></p>

<p><a href="http://blog.jobbole.com/55327/">中文翻译版本:Python解释器简介</a></p>

<p>4.<a href="http://sahandsaba.com/python-iterators-generators.html">A Study of Python’s More Advanced Features</a></p>

<p><a href="http://blog.jobbole.com/66097/">中文翻译版本：Python高级特性</a></p>

<p>5.<a href="http://pypix.com/tools-and-tips/design-patterns-beginners/">Design Patterns for Beginners in Python</a></p>

<p><a href="http://blog.jobbole.com/62023/">中文翻译版本：Python设计模式入门</a></p>

<p>6.<a href="http://sahandsaba.com/thirty-python-language-features-and-tricks-you-may-not-know.html">30 Python Language Features and Tricks You May Not Know About</a></p>

<p><a href="http://blog.jobbole.com/63320/">中文翻译版本：30个Python编程技巧</a></p>

<p>7.描述器，元类，上下文管理库的介绍参见<a href="http://blog.jobbole.com/61171/">伯乐在线-python高级编程技巧</a></p>

<p>TO BE CONTINUED…</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/16/python-tips2/">http://hujiaweibujidao.github.io/blog/2014/05/16/python-tips2/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hadoop Installation - Single Node Setup]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/12/hadoop-installation/"/>
    <updated>2014-05-12T20:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/12/hadoop-installation</id>
    <content type="html"><![CDATA[<p>上学期在Mac上搭建好了Hadoop，因为这学期开学重装了系统就没了，以为不会再折腾，结果大数据作业又要整hadoop，于是乎，爱折腾的程序猿又来折腾咯，有过上一次安装的经历，这次简单多了，下面简单的列举主要步骤。</p>

<p>感谢下面两份教程：</p>

<p>1.[en]<a href="http://www.michael-noll.com/tutorials/writing-an-hadoop-mapreduce-program-in-python/">Running Hadoop on Ubuntu Linux (Single-Node Cluster)</a></p>

<p>2.[cn]<a href="http://www.tianjun.ml/essays/16">田俊童鞋的Hadoop的安装部署与配置</a></p>

<hr />

<p>1.下载部分</p>

<p>(0)你肯定不是安装到本地的啦，先安装VMware吧，我会告诉你这货需要序列号吗?</p>

<p>(1)Ubuntu：<a href="http://www.ubuntu.com/">http://www.ubuntu.com/</a></p>

<p>随便这个Desktop版本下载，我的是12.04 LTS</p>

<p>(2)JDK：<a href="http://hadoop.apache.org/">http://hadoop.apache.org/</a></p>

<p>个人喜欢从Oracle上下载JDK来安装，不喜欢<code>apt-get</code>模式，我使用的是<code>JDK1.7</code></p>

<p>(3)Hadoop：<a href="http://hadoop.apache.org/">http://hadoop.apache.org/</a></p>

<p>我使用的是上学期用的1.2.1版本，名称<code>hadoop-1.2.1-bin.tar.gz</code></p>

<p>2.配置Java环境 [该部分直接摘自我之前<a href="http://hujiaweibujidao.github.io/blog/2014/02/21/android-ndk-and-opencv-development-4/">Android和OpenCV开发中的配置</a>]</p>

<p>①下载<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Oracle JDK</a>，下载的版本是JDK1.7.0_40</p>

<p>②下载之后解压即可，解压路径为<code>/home/xface/android/jdk1.7.0</code></p>

<p>③打开终端，输入<code>sudo gedit /etc/profile</code>，在文件末尾添加下面内容</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">JAVA_HOME</span><span class="o">=/</span><span class="n">home</span><span class="o">/</span><span class="n">xface</span><span class="o">/</span><span class="n">android</span><span class="o">/</span><span class="n">jdk1</span><span class="o">.</span><span class="mf">7.0</span>
</span><span class="line"><span class="n">export</span> <span class="n">PATH</span><span class="o">=</span><span class="err">$</span><span class="n">JAVA_HOME</span><span class="o">/</span><span class="nb">bin</span><span class="p">:</span><span class="err">$</span><span class="n">PATH</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如下图所示，后面环境配置中添加内容也是如此</p>

<p><img src="http://hujiaweibujidao.github.io/images/201402/etcprofile.png" alt="image" /></p>

<p>④打开终端输入<code>java -version</code>进行测试</p>

<p><img src="http://hujiaweibujidao.github.io/images/201402/javaversion.png" alt="image" /></p>

<p>3.配置Hadoop环境</p>

<p>(1)添加账户和组</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">sudo</span> <span class="n">addgroup</span> <span class="n">hadoop</span>
</span><span class="line"><span class="n">sudo</span> <span class="n">adduser</span> <span class="o">--</span><span class="n">ingroup</span> <span class="n">hadoop</span> <span class="n">hduser</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(2)安装openssh-server，并配置公钥</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">update</span>
</span><span class="line"><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">openssh</span><span class="o">-</span><span class="n">server</span>
</span><span class="line"><span class="n">su</span> <span class="o">-</span> <span class="n">hduser</span>
</span><span class="line"><span class="n">ssh</span><span class="o">-</span><span class="n">keygen</span> <span class="o">-</span><span class="n">t</span> <span class="n">rsa</span> <span class="o">-</span><span class="n">P</span> <span class="s">&quot;&quot;</span>
</span><span class="line"><span class="n">cat</span> <span class="err">$</span><span class="n">HOME</span><span class="o">/.</span><span class="n">ssh</span><span class="o">/</span><span class="n">id_rsa</span><span class="o">.</span><span class="n">pub</span> <span class="o">&gt;&gt;</span> <span class="err">$</span><span class="n">HOME</span><span class="o">/.</span><span class="n">ssh</span><span class="o">/</span><span class="n">authorized_keys</span>
</span><span class="line"><span class="n">ssh</span> <span class="n">localhost</span> <span class="c">#测试</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(3)Disabling IPv6? </p>

<p>这步我没有操作，如果需要请参考上面的教程<a href="http://www.michael-noll.com/tutorials/writing-an-hadoop-mapreduce-program-in-python/">Running Hadoop on Ubuntu Linux (Single-Node Cluster)</a></p>

<p>(4)解压<code>hadoop-1.2.1-bin.tar.gz</code>，然后重命名为<code>hadoop</code>，接着修改文件夹所有者</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">mv</span> <span class="n">hadoop</span><span class="o">-</span><span class="mf">1.2</span><span class="o">.</span><span class="mi">1</span> <span class="n">hadoop</span>
</span><span class="line"><span class="n">chown</span> <span class="o">-</span><span class="n">R</span> <span class="n">hduser</span><span class="p">:</span><span class="n">hadoop</span> <span class="n">hadoop</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(5)修改文件<code>/etc/profile</code>中系统环境变量的配置</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#set hadoop environment</span>
</span><span class="line">
</span><span class="line"><span class="n">HADOOP_HOME</span><span class="o">=/</span><span class="n">home</span><span class="o">/</span><span class="n">xface</span><span class="o">/</span><span class="n">hadoop</span><span class="o">/</span><span class="n">hadoop</span>
</span><span class="line"><span class="n">export</span> <span class="n">PATH</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">PATH</span><span class="p">}:</span><span class="err">$</span><span class="p">{</span><span class="n">HADOOP_HOME</span><span class="p">}</span><span class="o">/</span><span class="nb">bin</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(6)在hadoop安装目录下新建临时文件目录<code>tmp</code>和日志文件目录<code>logs</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">sudo</span> <span class="n">mkdir</span> <span class="o">-</span><span class="n">p</span> <span class="n">tmp</span>
</span><span class="line"><span class="n">sudo</span> <span class="n">chown</span> <span class="n">hduser</span><span class="p">:</span><span class="n">hadoop</span> <span class="n">tmp</span>
</span><span class="line"><span class="c"># ...and if you want to tighten up security, chmod from 755 to 750...</span>
</span><span class="line"><span class="n">sudo</span> <span class="n">chmod</span> <span class="mi">750</span> <span class="n">tmp</span> <span class="c">#我习惯用777</span>
</span><span class="line"><span class="c">#logs的配置和tmp一样</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(7)配置hadoop的<code>conf</code>文件夹下的文件</p>

<p>①<code>hadoop-env.sh</code> 修改Java配置</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">export</span> <span class="n">JAVA_HOME</span><span class="o">=/</span><span class="n">home</span><span class="o">/</span><span class="n">xface</span><span class="o">/</span><span class="n">android</span><span class="o">/</span><span class="n">jdk1</span><span class="o">.</span><span class="mf">7.0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>②<code>core-site.xml</code> 添加下面的配置</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="o">&lt;</span><span class="nb">property</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span><span class="n">hadoop</span><span class="o">.</span><span class="n">tmp</span><span class="o">.</span><span class="n">dir</span><span class="o">&lt;/</span><span class="n">name</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">value</span><span class="o">&gt;/</span><span class="n">home</span><span class="o">/</span><span class="n">xface</span><span class="o">/</span><span class="n">hadoop</span><span class="o">/</span><span class="n">tmp</span><span class="o">&lt;/</span><span class="n">value</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">description</span><span class="o">&gt;</span><span class="n">A</span> <span class="n">base</span> <span class="k">for</span> <span class="n">other</span> <span class="n">temporary</span> <span class="n">directories</span><span class="o">.&lt;/</span><span class="n">description</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;/</span><span class="nb">property</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="o">&lt;</span><span class="nb">property</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span><span class="n">fs</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">name</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">value</span><span class="o">&gt;</span><span class="n">hdfs</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">9000</span><span class="o">&lt;/</span><span class="n">value</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">description</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">name</span> <span class="n">of</span> <span class="n">the</span> <span class="n">default</span> <span class="nb">file</span> <span class="n">system</span><span class="o">.</span>  <span class="n">A</span> <span class="n">URI</span> <span class="n">whose</span>
</span><span class="line">  <span class="n">scheme</span> <span class="ow">and</span> <span class="n">authority</span> <span class="n">determine</span> <span class="n">the</span> <span class="n">FileSystem</span> <span class="n">implementation</span><span class="o">.</span>  <span class="n">The</span>
</span><span class="line">  <span class="n">uri</span><span class="s">&#39;s scheme determines the config property (fs.SCHEME.impl) naming</span>
</span><span class="line">  <span class="n">the</span> <span class="n">FileSystem</span> <span class="n">implementation</span> <span class="n">class</span><span class="o">.</span>  <span class="n">The</span> <span class="n">uri</span><span class="s">&#39;s authority is used to</span>
</span><span class="line">  <span class="n">determine</span> <span class="n">the</span> <span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">etc</span><span class="o">.</span> <span class="k">for</span> <span class="n">a</span> <span class="n">filesystem</span><span class="o">.&lt;/</span><span class="n">description</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;/</span><span class="nb">property</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>③<code>mapred-site.xml</code> 添加下面的配置</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="o">&lt;</span><span class="nb">property</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span><span class="n">mapred</span><span class="o">.</span><span class="n">job</span><span class="o">.</span><span class="n">tracker</span><span class="o">&lt;/</span><span class="n">name</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">value</span><span class="o">&gt;</span><span class="n">localhost</span><span class="p">:</span><span class="mi">9001</span><span class="o">&lt;/</span><span class="n">value</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">description</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">host</span> <span class="ow">and</span> <span class="n">port</span> <span class="n">that</span> <span class="n">the</span> <span class="n">MapReduce</span> <span class="n">job</span> <span class="n">tracker</span> <span class="n">runs</span>
</span><span class="line">  <span class="n">at</span><span class="o">.</span>  <span class="n">If</span> <span class="s">&quot;local&quot;</span><span class="p">,</span> <span class="n">then</span> <span class="n">jobs</span> <span class="n">are</span> <span class="n">run</span> <span class="ow">in</span><span class="o">-</span><span class="n">process</span> <span class="k">as</span> <span class="n">a</span> <span class="n">single</span> <span class="nb">map</span>
</span><span class="line">  <span class="ow">and</span> <span class="nb">reduce</span> <span class="n">task</span><span class="o">.</span>
</span><span class="line">  <span class="o">&lt;/</span><span class="n">description</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;/</span><span class="nb">property</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>④<code>hdfs-site.xml</code> 添加下面的配置 [还可以配置namenode和datanode数据的保存位置，可以参见教程<a href="http://www.tianjun.ml/essays/16">田俊童鞋的Hadoop的安装部署与配置</a>]</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="o">&lt;</span><span class="nb">property</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span><span class="n">dfs</span><span class="o">.</span><span class="n">replication</span><span class="o">&lt;/</span><span class="n">name</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">value</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">&lt;/</span><span class="n">value</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">description</span><span class="o">&gt;</span><span class="n">Default</span> <span class="n">block</span> <span class="n">replication</span><span class="o">.</span>
</span><span class="line">  <span class="n">The</span> <span class="n">actual</span> <span class="n">number</span> <span class="n">of</span> <span class="n">replications</span> <span class="n">can</span> <span class="n">be</span> <span class="n">specified</span> <span class="n">when</span> <span class="n">the</span> <span class="nb">file</span> <span class="ow">is</span> <span class="n">created</span><span class="o">.</span>
</span><span class="line">  <span class="n">The</span> <span class="n">default</span> <span class="ow">is</span> <span class="n">used</span> <span class="k">if</span> <span class="n">replication</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">specified</span> <span class="ow">in</span> <span class="n">create</span> <span class="n">time</span><span class="o">.</span>
</span><span class="line">  <span class="o">&lt;/</span><span class="n">description</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;/</span><span class="nb">property</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(8)格式化namenode</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">hduser</span><span class="nd">@ubuntu</span><span class="p">:</span><span class="o">~</span><span class="err">$</span> <span class="n">hadoop</span> <span class="n">namenode</span> <span class="o">-</span><span class="n">format</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(9)执行<code>start-all.sh</code>启动测试</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">hduser</span><span class="nd">@ubuntu</span><span class="p">:</span><span class="o">~</span><span class="err">$</span> <span class="n">start</span><span class="o">-</span><span class="nb">all</span><span class="o">.</span><span class="n">sh</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(10)执行<code>jps</code>查看进程</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">hduser</span><span class="nd">@ubuntu</span><span class="p">:</span><span class="o">~</span><span class="err">$</span> <span class="n">jps</span>
</span><span class="line"><span class="mi">5620</span> <span class="n">JobTracker</span>
</span><span class="line"><span class="mi">5313</span> <span class="n">DataNode</span>
</span><span class="line"><span class="mi">5541</span> <span class="n">SecondaryNameNode</span>
</span><span class="line"><span class="mi">5897</span> <span class="n">Jps</span>
</span><span class="line"><span class="mi">5851</span> <span class="n">TaskTracker</span>
</span><span class="line"><span class="mi">5041</span> <span class="n">NameNode</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>OK！恭喜你！至此安装过程就大功告成了！如果比较心急，可以按照<a href="http://www.michael-noll.com/tutorials/running-hadoop-on-ubuntu-linux-single-node-cluster/#running-a-mapreduce-job">推荐的教程</a>运行个MapReduce任务试试看啦，哈哈哈</p>

<p>如果你需要配置成集群模式的话还是可以参考好友<a href="http://www.tianjun.ml/essays/16">田俊童鞋的Hadoop的安装部署与配置</a>，如果喜欢的话不防看下好友的这篇<a href="http://www.tianjun.ml/essays/19">【翻译】Writing an Hadoop MapReduce Program in Python</a>，不能推荐的更多，哈哈哈</p>

<p>安装过程中所有执行的命令及其输出见<a href="https://gist.github.com/hujiaweibujidao/a83fca7b7f40d0029c60">这个Gist</a></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/12/hadoop-installation/">http://hujiaweibujidao.github.io/blog/2014/05/12/hadoop-installation/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PageRank]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/12/algorithms-pagerank/"/>
    <updated>2014-05-12T18:12:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/12/algorithms-pagerank</id>
    <content type="html"><![CDATA[<p><strong><center>ML/DM/PR算法系列</center></strong>
<strong><center>逸夫图书馆, 2014/5/17</center></strong></p>

<h3 id="centerpagerankcenter"><center>PageRank算法</center></h3>

<p>PageRank算法是谷歌曾经独步天下的“倚天剑”，该算法由Larry Page和Sergey Brin在斯坦福大学读研时发明的，<a href="http://ilpubs.stanford.edu:8090/422/1/1999-66.pdf">论文点击下载: The PageRank Citation Ranking: Bringing Order to the Web</a>。</p>

<p>本文首先通过一些参考文献引出问题，然后给出了PageRank的几种实现算法，最后将其推广至在MapReduce框架下如何实现PageRank算法。</p>

<p>PageRank的核心思想有2点：</p>

<p>1.如果一个网页被很多其他网页链接到的话说明这个网页比较重要，也就是pagerank值会相对较高；</p>

<p>2.如果一个pagerank值很高的网页链接到一个其他的网页，那么被链接到的网页的pagerank值会相应地因此而提高。</p>

<p>下面是一张来自<a href="http://en.wikipedia.org/wiki/PageRank">WikiPedia</a>的图，每个球代表一个网页，球的大小反应了网页的pagerank值的大小。指向网页B和网页E的链接很多，所以B和E的pagerank值较高，另外，虽然很少有网页指向C，但是最重要的网页B指向了C，所以C的pagerank值比E还要大。</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/pagerank-fig.png" alt="image" /></p>

<p>参考内容：</p>

<p>1.<a href="http://en.wikipedia.org/wiki/PageRank">Wiki about PageRank</a></p>

<p>2.<a href="http://www.itlearner.com/good/pagerank_cn.htm">Google 的秘密- PageRank 彻底解说 中文版</a></p>

<p>3.<a href="http://book.douban.com/subject/7161824/">数值分析与算法</a> Page 161 应用实例：Google的PageRank算法</p>

<p>4.<a href="http://www.mathworks.cn/moler/chapters.html">Numeric Methods with Matlab</a> 或者<a href="http://book.douban.com/subject/1836464/">中文翻译版本Matlab数值计算</a></p>

<p>5.<a href="http://www.chenjunlu.com/2012/10/pagerank-on-mapreduce/">使用 MapReduce 思想计算 PageRank</a> Page 62 PageRank和马尔可夫链</p>

<h3 id="section">1.问题背景</h3>

<p>来自参考内容3</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/pk-1.png" alt="image" /></p>

<h3 id="section-1">2.数学建模</h3>

<p>来自参考内容3，理解网页连接矩阵$G$，马尔科夫过程(“网上冲浪”)，转移矩阵$A$，概率$p$为用户点击当前网页中的某个链接地址的概率(一般都为0.85)。</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/pk-2.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/algos/pk-3.png" alt="image" /></p>

<p>最后得到一个等式$Ax=x$，这实际上就是求矩阵$A$的特征值为1的特征向量！</p>

<p>下面的内容使用圆盘定理解释了1是矩阵$A$的主特征值，所以我们可以使用幂法来求解。</p>

<p>关于幂法的详细介绍参考另一篇文章<a href="http://hujiaweibujidao.github.io/blog/2014/04/23/numerical-methods-using-matlab/">Numerical Methods Using Matlab: 第三章 矩阵特征值和奇异值求解</a></p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/pk-4.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/algos/pk-5.png" alt="image" /></p>

<!--
![image](http://hujiaweibujidao.github.io/images/algos/pk-6.png)
-->

<h3 id="pagerank">3.求解PageRank</h3>

<p>假设有如上图右侧所示的网页链接模型。</p>

<p>(1) 幂法</p>

<p>wiki上有一个PageRank的简便算法，它不考虑转移概率，而是采用的是迭代的方式，每次都更新所有网页的pagerank值，更新的方式就是将每个网页的pagerank值平摊分给它指向的所有网页，每个网页累计所有指向它的网页平摊给它的值作为它该回合的pagerank值，直到全部网页的pagerank值收敛了或者满足一定的阈值条件就停止。</p>

<p>后面的MapReduce框架下PageRank算法的实现就采用了这个思想。考虑转移概率的情况和这个算法类似，乘上一个转移概率再加上一个随机跳转的概率。</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/pagerank-Simplified-algorithm.png" alt="image" /></p>

<p>根据上面的思想，下面Matlab代码实现可以得到各个网页的PageRank值。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="matlab"><span class="line"><span class="n">n</span><span class="p">=</span>6<span class="p">;</span>
</span><span class="line"><span class="nb">i</span><span class="p">=[</span>2 3 4 4 5 6 1 6 1<span class="p">];</span>
</span><span class="line"><span class="nb">j</span><span class="p">=[</span>1 2 2 3 3 3 4 5 6<span class="p">];</span>
</span><span class="line"><span class="n">G</span><span class="p">=</span><span class="n">sparse</span><span class="p">(</span><span class="nb">i</span><span class="p">,</span><span class="nb">j</span><span class="p">,</span>1<span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c">% Power method</span>
</span><span class="line"><span class="k">for</span> <span class="nb">j</span> <span class="p">=</span> 1<span class="p">:</span><span class="n">n</span>
</span><span class="line">   <span class="n">L</span><span class="p">{</span><span class="nb">j</span><span class="p">}</span> <span class="p">=</span> <span class="nb">find</span><span class="p">(</span><span class="n">G</span><span class="p">(:,</span><span class="nb">j</span><span class="p">));</span>
</span><span class="line">   <span class="n">c</span><span class="p">(</span><span class="nb">j</span><span class="p">)</span> <span class="p">=</span> <span class="nb">length</span><span class="p">(</span><span class="n">L</span><span class="p">{</span><span class="nb">j</span><span class="p">});</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">p</span> <span class="p">=</span> <span class="p">.</span>85<span class="p">;</span>
</span><span class="line"><span class="n">delta</span> <span class="p">=</span> <span class="p">(</span>1<span class="o">-</span><span class="n">p</span><span class="p">)</span><span class="o">/</span><span class="n">n</span><span class="p">;</span>
</span><span class="line"><span class="n">x</span> <span class="p">=</span> <span class="nb">ones</span><span class="p">(</span><span class="n">n</span><span class="p">,</span>1<span class="p">)</span><span class="o">/</span><span class="n">n</span><span class="p">;</span>
</span><span class="line"><span class="n">z</span> <span class="p">=</span> <span class="nb">zeros</span><span class="p">(</span><span class="n">n</span><span class="p">,</span>1<span class="p">);</span>
</span><span class="line"><span class="n">cnt</span> <span class="p">=</span> 0<span class="p">;</span>
</span><span class="line"><span class="k">while</span> <span class="n">max</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="n">z</span><span class="p">))</span> <span class="o">&gt;</span> <span class="p">.</span>0001
</span><span class="line">   <span class="n">z</span> <span class="p">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class="line">   <span class="n">x</span> <span class="p">=</span> <span class="nb">zeros</span><span class="p">(</span><span class="n">n</span><span class="p">,</span>1<span class="p">);</span>
</span><span class="line">   <span class="k">for</span> <span class="nb">j</span> <span class="p">=</span> 1<span class="p">:</span><span class="n">n</span>
</span><span class="line">      <span class="k">if</span> <span class="n">c</span><span class="p">(</span><span class="nb">j</span><span class="p">)</span> <span class="o">==</span> 0
</span><span class="line">         <span class="n">x</span> <span class="p">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">z</span><span class="p">(</span><span class="nb">j</span><span class="p">)</span><span class="o">/</span><span class="n">n</span><span class="p">;</span><span class="c">%转移到任意一个网页</span>
</span><span class="line">      <span class="k">else</span>
</span><span class="line">         <span class="n">x</span><span class="p">(</span><span class="n">L</span><span class="p">{</span><span class="nb">j</span><span class="p">})</span> <span class="p">=</span> <span class="n">x</span><span class="p">(</span><span class="n">L</span><span class="p">{</span><span class="nb">j</span><span class="p">})</span> <span class="o">+</span> <span class="n">z</span><span class="p">(</span><span class="nb">j</span><span class="p">)</span><span class="o">/</span><span class="n">c</span><span class="p">(</span><span class="nb">j</span><span class="p">);</span><span class="c">%将上次的pagerank值平摊给所有指向的网页</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">   <span class="k">end</span>
</span><span class="line">   <span class="n">x</span> <span class="p">=</span> <span class="n">p</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">delta</span><span class="p">;</span>
</span><span class="line">   <span class="n">cnt</span> <span class="p">=</span> <span class="n">cnt</span><span class="o">+</span>1<span class="p">;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>得到的向量$x$保存了各个网页的pagerank值，虽然链接数目一样，但是网页①比网页④和网页⑤都高，而网页②的pagerank值第二高，因为网页①链接到了它上面，相当于沾了网页①的光。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="matlab"><span class="line"><span class="n">x</span> <span class="p">=</span>
</span><span class="line">    0<span class="p">.</span>2675
</span><span class="line">    0<span class="p">.</span>2524
</span><span class="line">    0<span class="p">.</span>1323
</span><span class="line">    0<span class="p">.</span>1698
</span><span class="line">    0<span class="p">.</span>0625
</span><span class="line">    0<span class="p">.</span>1156
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="http://www.chenjunlu.com/2012/09/pagerank-algorithm-implemented-in-python/">这篇文章给出该算法的一个Python版本实现</a>，该博主使用第三方模块<a href="https://code.google.com/p/python-graph/">python-graph</a>，python-graph模块实现了很多图算法，<a href="https://code.google.com/p/python-graph/wiki/Example">该模块的使用示例</a>，使用前需要先安装，代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">easy_install</span> <span class="n">python</span><span class="o">-</span><span class="n">graph</span><span class="o">-</span><span class="n">core</span>
</span><span class="line"><span class="n">easy_install</span> <span class="n">python</span><span class="o">-</span><span class="n">graph</span><span class="o">-</span><span class="n">dot</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Python版本的算法实现：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># coding=utf-8</span>
</span><span class="line">
</span><span class="line"><span class="c"># python-graph https://code.google.com/p/python-graph/</span>
</span><span class="line">
</span><span class="line"><span class="c"># Import graphviz</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">graphviz</span> <span class="kn">as</span> <span class="nn">gv</span>
</span><span class="line">
</span><span class="line"><span class="c"># Import pygraph</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">pygraph.classes.digraph</span> <span class="kn">import</span> <span class="n">digraph</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">pygraph.readwrite.dot</span> <span class="kn">import</span> <span class="n">write</span>
</span><span class="line">
</span><span class="line"><span class="c"># Define pagerank function</span>
</span><span class="line"><span class="k">def</span> <span class="nf">pagerank</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">damping_factor</span><span class="o">=</span><span class="mf">0.85</span><span class="p">,</span> <span class="n">max_iterations</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> \
</span><span class="line">             <span class="n">min_delta</span><span class="o">=</span><span class="mf">0.00001</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    Compute and return the PageRank in an directed graph.</span>
</span><span class="line">
</span><span class="line"><span class="sd">    @type  graph: digraph</span>
</span><span class="line"><span class="sd">    @param graph: Digraph.</span>
</span><span class="line">
</span><span class="line"><span class="sd">    @type  damping_factor: number</span>
</span><span class="line"><span class="sd">    @param damping_factor: PageRank dumping factor.</span>
</span><span class="line">
</span><span class="line"><span class="sd">    @type  max_iterations: number</span>
</span><span class="line"><span class="sd">    @param max_iterations: Maximum number of iterations.</span>
</span><span class="line">
</span><span class="line"><span class="sd">    @type  min_delta: number</span>
</span><span class="line"><span class="sd">    @param min_delta: Smallest variation required for a new iteration.</span>
</span><span class="line">
</span><span class="line"><span class="sd">    @rtype:  Dict</span>
</span><span class="line"><span class="sd">    @return: Dict containing all the nodes PageRank.</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="n">nodes</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">nodes</span><span class="p">()</span>
</span><span class="line">    <span class="n">graph_size</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">nodes</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">graph_size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="p">{}</span>
</span><span class="line">    <span class="c"># value for nodes without inbound links</span>
</span><span class="line">    <span class="n">min_value</span> <span class="o">=</span> <span class="p">(</span><span class="mf">1.0</span><span class="o">-</span><span class="n">damping_factor</span><span class="p">)</span><span class="o">/</span><span class="n">graph_size</span>
</span><span class="line">
</span><span class="line">    <span class="c"># itialize the page rank dict with 1/N for all nodes</span>
</span><span class="line">    <span class="c">#pagerank = dict.fromkeys(nodes, 1.0/graph_size)</span>
</span><span class="line">    <span class="n">pagerank</span> <span class="o">=</span> <span class="nb">dict</span><span class="o">.</span><span class="n">fromkeys</span><span class="p">(</span><span class="n">nodes</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_iterations</span><span class="p">):</span>
</span><span class="line">        <span class="n">diff</span> <span class="o">=</span> <span class="mi">0</span> <span class="c">#total difference compared to last iteraction</span>
</span><span class="line">        <span class="c"># computes each node PageRank based on inbound links</span>
</span><span class="line">        <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">nodes</span><span class="p">:</span>
</span><span class="line">            <span class="n">rank</span> <span class="o">=</span> <span class="n">min_value</span>
</span><span class="line">            <span class="k">for</span> <span class="n">referring_page</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">incidents</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
</span><span class="line">                <span class="n">rank</span> <span class="o">+=</span> <span class="n">damping_factor</span> <span class="o">*</span> <span class="n">pagerank</span><span class="p">[</span><span class="n">referring_page</span><span class="p">]</span> <span class="o">/</span> \
</span><span class="line">                        <span class="nb">len</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">neighbors</span><span class="p">(</span><span class="n">referring_page</span><span class="p">))</span>
</span><span class="line">
</span><span class="line">            <span class="n">diff</span> <span class="o">+=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">pagerank</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="o">-</span> <span class="n">rank</span><span class="p">)</span>
</span><span class="line">            <span class="n">pagerank</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="o">=</span> <span class="n">rank</span>
</span><span class="line">
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;This is NO.</span><span class="si">%s</span><span class="s"> iteration&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">        <span class="k">print</span> <span class="n">pagerank</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;&#39;</span>
</span><span class="line">
</span><span class="line">        <span class="c">#stop if PageRank has converged</span>
</span><span class="line">        <span class="k">if</span> <span class="n">diff</span> <span class="o">&lt;</span> <span class="n">min_delta</span><span class="p">:</span>
</span><span class="line">            <span class="k">break</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">pagerank</span>
</span><span class="line">
</span><span class="line"><span class="c"># Graph creation</span>
</span><span class="line"><span class="n">gr</span> <span class="o">=</span> <span class="n">digraph</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c"># Add nodes and edges</span>
</span><span class="line"><span class="n">gr</span><span class="o">.</span><span class="n">add_nodes</span><span class="p">([</span><span class="s">&quot;1&quot;</span><span class="p">,</span><span class="s">&quot;2&quot;</span><span class="p">,</span><span class="s">&quot;3&quot;</span><span class="p">,</span><span class="s">&quot;4&quot;</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="n">gr</span><span class="o">.</span><span class="n">add_edge</span><span class="p">((</span><span class="s">&quot;1&quot;</span><span class="p">,</span><span class="s">&quot;2&quot;</span><span class="p">))</span>
</span><span class="line"><span class="n">gr</span><span class="o">.</span><span class="n">add_edge</span><span class="p">((</span><span class="s">&quot;1&quot;</span><span class="p">,</span><span class="s">&quot;3&quot;</span><span class="p">))</span>
</span><span class="line"><span class="n">gr</span><span class="o">.</span><span class="n">add_edge</span><span class="p">((</span><span class="s">&quot;1&quot;</span><span class="p">,</span><span class="s">&quot;4&quot;</span><span class="p">))</span>
</span><span class="line"><span class="n">gr</span><span class="o">.</span><span class="n">add_edge</span><span class="p">((</span><span class="s">&quot;2&quot;</span><span class="p">,</span><span class="s">&quot;3&quot;</span><span class="p">))</span>
</span><span class="line"><span class="n">gr</span><span class="o">.</span><span class="n">add_edge</span><span class="p">((</span><span class="s">&quot;2&quot;</span><span class="p">,</span><span class="s">&quot;4&quot;</span><span class="p">))</span>
</span><span class="line"><span class="n">gr</span><span class="o">.</span><span class="n">add_edge</span><span class="p">((</span><span class="s">&quot;3&quot;</span><span class="p">,</span><span class="s">&quot;4&quot;</span><span class="p">))</span>
</span><span class="line"><span class="n">gr</span><span class="o">.</span><span class="n">add_edge</span><span class="p">((</span><span class="s">&quot;4&quot;</span><span class="p">,</span><span class="s">&quot;2&quot;</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="c"># Draw as PNG</span>
</span><span class="line"><span class="c"># dot = write(gr)</span>
</span><span class="line"><span class="c"># gvv = gv.readstring(dot)</span>
</span><span class="line"><span class="c"># gv.layout(gvv,&#39;dot&#39;)</span>
</span><span class="line"><span class="c"># gv.render(gvv,&#39;png&#39;,&#39;Model.png&#39;)</span>
</span><span class="line">
</span><span class="line"><span class="n">pagerank</span><span class="p">(</span><span class="n">gr</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>经过32次迭代之后得到的结果如下，和前面的结果一致：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">This</span> <span class="ow">is</span> <span class="n">NO</span><span class="o">.</span><span class="mi">32</span> <span class="n">iteration</span>
</span><span class="line"><span class="p">{</span><span class="s">&#39;1&#39;</span><span class="p">:</span> <span class="mf">0.2675338708706491</span><span class="p">,</span> <span class="s">&#39;3&#39;</span><span class="p">:</span> <span class="mf">0.13227261904986046</span><span class="p">,</span> <span class="s">&#39;2&#39;</span><span class="p">:</span> <span class="mf">0.2524037902400518</span><span class="p">,</span> <span class="s">&#39;5&#39;</span><span class="p">:</span> <span class="mf">0.062477242064127136</span><span class="p">,</span> <span class="s">&#39;4&#39;</span><span class="p">:</span> <span class="mf">0.1697488529161491</span><span class="p">,</span> <span class="s">&#39;6&#39;</span><span class="p">:</span> <span class="mf">0.1155828978186352</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(2) 利用马尔可夫矩阵的特殊结构</p>

<p>来自参考内容4，其中$\delta=\frac{1-p}{n}$</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/pk-8.png" alt="image" /></p>

<p>也就是将矩阵$A$进行分解，并不需要显示求出矩阵$A$，然后便是求解一个线性方程组即可。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="matlab"><span class="line"><span class="k">function</span><span class="w"> </span>x <span class="p">=</span><span class="w"> </span><span class="nf">pagerank1</span><span class="p">(</span>G<span class="p">)</span><span class="w"></span>
</span><span class="line"><span class="c">% PAGERANK1  Google&#39;s PageRank modified version 1 - hujiawei</span>
</span><span class="line">
</span><span class="line"><span class="c">%if nargin &lt; 3, p = .85; end</span>
</span><span class="line"><span class="n">p</span><span class="p">=</span>0<span class="p">.</span>85<span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c">% Eliminate any self-referential links</span>
</span><span class="line">
</span><span class="line"><span class="n">G</span> <span class="p">=</span> <span class="n">G</span> <span class="o">-</span> <span class="nb">diag</span><span class="p">(</span><span class="nb">diag</span><span class="p">(</span><span class="n">G</span><span class="p">));</span>
</span><span class="line">
</span><span class="line"><span class="c">% c = out-degree, r = in-degree</span>
</span><span class="line">
</span><span class="line"><span class="p">[</span><span class="n">n</span><span class="p">,</span><span class="n">n</span><span class="p">]</span> <span class="p">=</span> <span class="nb">size</span><span class="p">(</span><span class="n">G</span><span class="p">);</span>
</span><span class="line"><span class="n">c</span> <span class="p">=</span> <span class="n">sum</span><span class="p">(</span><span class="n">G</span><span class="p">,</span>1<span class="p">);</span><span class="c">%each row&#39;s sum</span>
</span><span class="line"><span class="n">r</span> <span class="p">=</span> <span class="n">sum</span><span class="p">(</span><span class="n">G</span><span class="p">,</span>2<span class="p">);</span><span class="c">%each col&#39;s sum</span>
</span><span class="line">
</span><span class="line"><span class="c">% Scale column sums to be 1 (or 0 where there are no out links).</span>
</span><span class="line">
</span><span class="line"><span class="n">k</span> <span class="p">=</span> <span class="nb">find</span><span class="p">(</span><span class="n">c</span><span class="o">~=</span>0<span class="p">);</span>
</span><span class="line"><span class="n">D</span> <span class="p">=</span> <span class="n">sparse</span><span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">k</span><span class="p">,</span>1<span class="o">./</span><span class="n">c</span><span class="p">(</span><span class="n">k</span><span class="p">),</span><span class="n">n</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c">% Solve (I - p*G*D)*x = e</span>
</span><span class="line">
</span><span class="line"><span class="n">e</span> <span class="p">=</span> <span class="nb">ones</span><span class="p">(</span><span class="n">n</span><span class="p">,</span>1<span class="p">);</span>
</span><span class="line"><span class="n">I</span> <span class="p">=</span> <span class="n">speye</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>
</span><span class="line"><span class="n">x</span> <span class="p">=</span> <span class="p">(</span><span class="n">I</span> <span class="o">-</span> <span class="n">p</span><span class="o">*</span><span class="n">G</span><span class="o">*</span><span class="n">D</span><span class="p">)</span><span class="o">\</span><span class="n">e</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c">% Normalize so that sum(x) == 1.</span>
</span><span class="line">
</span><span class="line"><span class="n">x</span> <span class="p">=</span> <span class="n">x</span><span class="o">/</span><span class="n">sum</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(3) 巧妙解法：逆迭代算法</p>

<p>巧妙利用Matlab中的精度误差导致原本是一个奇异矩阵的$I-A$变成一个非奇异矩阵，运行时只是会有些警告提示，但是运行结果和其他算法一样。</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/pk-9.png" alt="image" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class="matlab"><span class="line"><span class="k">function</span><span class="w"> </span>x <span class="p">=</span><span class="w"> </span><span class="nf">pagerank2</span><span class="p">(</span>G<span class="p">)</span><span class="w"></span>
</span><span class="line"><span class="c">% PAGERANK1  Google&#39;s PageRank modified version 2 - hujiawei</span>
</span><span class="line"><span class="c">% using inverse iteration method</span>
</span><span class="line">
</span><span class="line"><span class="c">%if nargin &lt; 3, p = .85; end</span>
</span><span class="line"><span class="n">p</span><span class="p">=</span>0<span class="p">.</span>85<span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c">% Eliminate any self-referential links</span>
</span><span class="line">
</span><span class="line"><span class="n">G</span> <span class="p">=</span> <span class="n">G</span> <span class="o">-</span> <span class="nb">diag</span><span class="p">(</span><span class="nb">diag</span><span class="p">(</span><span class="n">G</span><span class="p">));</span>
</span><span class="line">
</span><span class="line"><span class="c">% c = out-degree, r = in-degree</span>
</span><span class="line">
</span><span class="line"><span class="p">[</span><span class="n">n</span><span class="p">,</span><span class="n">n</span><span class="p">]</span> <span class="p">=</span> <span class="nb">size</span><span class="p">(</span><span class="n">G</span><span class="p">);</span>
</span><span class="line"><span class="n">c</span> <span class="p">=</span> <span class="n">sum</span><span class="p">(</span><span class="n">G</span><span class="p">,</span>1<span class="p">);</span><span class="c">%each row&#39;s sum</span>
</span><span class="line"><span class="n">r</span> <span class="p">=</span> <span class="n">sum</span><span class="p">(</span><span class="n">G</span><span class="p">,</span>2<span class="p">);</span><span class="c">%each col&#39;s sum</span>
</span><span class="line">
</span><span class="line"><span class="c">% Scale column sums to be 1 (or 0 where there are no out links).</span>
</span><span class="line">
</span><span class="line"><span class="n">k</span> <span class="p">=</span> <span class="nb">find</span><span class="p">(</span><span class="n">c</span><span class="o">~=</span>0<span class="p">);</span>
</span><span class="line"><span class="n">D</span> <span class="p">=</span> <span class="n">sparse</span><span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">k</span><span class="p">,</span>1<span class="o">./</span><span class="n">c</span><span class="p">(</span><span class="n">k</span><span class="p">),</span><span class="n">n</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c">% Solve (I - p*G*D)*x = e</span>
</span><span class="line">
</span><span class="line"><span class="n">e</span> <span class="p">=</span> <span class="nb">ones</span><span class="p">(</span><span class="n">n</span><span class="p">,</span>1<span class="p">);</span>
</span><span class="line"><span class="n">I</span> <span class="p">=</span> <span class="n">speye</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>
</span><span class="line"><span class="c">% x = (I - p*G*D)\e;</span>
</span><span class="line"><span class="n">delta</span><span class="p">=(</span>1<span class="o">-</span><span class="n">p</span><span class="p">)</span><span class="o">/</span><span class="n">n</span><span class="p">;</span>
</span><span class="line"><span class="n">A</span><span class="p">=</span><span class="n">p</span><span class="o">*</span><span class="n">G</span><span class="o">*</span><span class="n">D</span><span class="o">+</span><span class="n">delta</span><span class="p">;</span>
</span><span class="line"><span class="n">x</span><span class="p">=(</span><span class="n">I</span><span class="o">-</span><span class="n">A</span><span class="p">)</span><span class="o">\</span><span class="n">e</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c">% Normalize so that sum(x) == 1.</span>
</span><span class="line">
</span><span class="line"><span class="n">x</span> <span class="p">=</span> <span class="n">x</span><span class="o">/</span><span class="n">sum</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后，附上参考内容4中给出的一份好代码，用于模拟随机冲浪生成矩阵$G$的代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
</pre></td><td class="code"><pre><code class="matlab"><span class="line"><span class="k">function</span><span class="w"> </span>[U,G] <span class="p">=</span><span class="w"> </span><span class="nf">surfer</span><span class="p">(</span>root,n<span class="p">)</span><span class="w"></span>
</span><span class="line"><span class="c">% SURFER  Create the adjacency graph of a portion of the Web.</span>
</span><span class="line"><span class="c">%    [U,G] = surfer(root,n) starts at the URL root and follows</span>
</span><span class="line"><span class="c">%    Web links until it forms an adjacency graph with n nodes.</span>
</span><span class="line"><span class="c">%    U = a cell array of n strings, the URLs of the nodes.</span>
</span><span class="line"><span class="c">%    G = an n-by-n sparse matrix with G(i,j)=1 if node j is linked to node i.</span>
</span><span class="line"><span class="c">%</span>
</span><span class="line"><span class="c">%    Example:  [U,G] = surfer(&#39;http://www.harvard.edu&#39;,500);</span>
</span><span class="line"><span class="c">%    See also PAGERANK.</span>
</span><span class="line"><span class="c">%</span>
</span><span class="line"><span class="c">%    This function currently has two defects.  (1) The algorithm for</span>
</span><span class="line"><span class="c">%    finding links is naive.  We just look for the string &#39;http:&#39;.</span>
</span><span class="line"><span class="c">%    (2) An attempt to read from a URL that is accessible, but very slow,</span>
</span><span class="line"><span class="c">%    might take an unacceptably long time to complete.  In some cases,</span>
</span><span class="line"><span class="c">%    it may be necessary to have the operating system terminate MATLAB.</span>
</span><span class="line"><span class="c">%    Key words from such URLs can be added to the skip list in surfer.m.</span>
</span><span class="line">
</span><span class="line"><span class="c">% Initialize</span>
</span><span class="line">
</span><span class="line"><span class="n">clf</span>
</span><span class="line"><span class="n">shg</span>
</span><span class="line"><span class="n">set</span><span class="p">(</span><span class="n">gcf</span><span class="p">,</span><span class="s">&#39;doublebuffer&#39;</span><span class="p">,</span><span class="s">&#39;on&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">axis</span><span class="p">([</span>0 <span class="n">n</span> 0 <span class="n">n</span><span class="p">])</span>
</span><span class="line"><span class="n">axis</span> <span class="n">square</span>
</span><span class="line"><span class="n">axis</span> <span class="n">ij</span>
</span><span class="line"><span class="n">box</span> <span class="n">on</span>
</span><span class="line"><span class="n">set</span><span class="p">(</span><span class="n">gca</span><span class="p">,</span><span class="s">&#39;position&#39;</span><span class="p">,[.</span>12 <span class="p">.</span>20 <span class="p">.</span>78 <span class="p">.</span>78<span class="p">])</span>
</span><span class="line"><span class="n">uicontrol</span><span class="p">(</span><span class="s">&#39;style&#39;</span><span class="p">,</span><span class="s">&#39;frame&#39;</span><span class="p">,</span><span class="s">&#39;units&#39;</span><span class="p">,</span><span class="s">&#39;normal&#39;</span><span class="p">,</span><span class="s">&#39;position&#39;</span><span class="p">,[.</span>01 <span class="p">.</span>09 <span class="p">.</span>98 <span class="p">.</span>07<span class="p">]);</span>
</span><span class="line"><span class="n">uicontrol</span><span class="p">(</span><span class="s">&#39;style&#39;</span><span class="p">,</span><span class="s">&#39;frame&#39;</span><span class="p">,</span><span class="s">&#39;units&#39;</span><span class="p">,</span><span class="s">&#39;normal&#39;</span><span class="p">,</span><span class="s">&#39;position&#39;</span><span class="p">,[.</span>01 <span class="p">.</span>01 <span class="p">.</span>98 <span class="p">.</span>07<span class="p">]);</span>
</span><span class="line"><span class="n">t1</span> <span class="p">=</span> <span class="n">uicontrol</span><span class="p">(</span><span class="s">&#39;style&#39;</span><span class="p">,</span><span class="s">&#39;text&#39;</span><span class="p">,</span><span class="s">&#39;units&#39;</span><span class="p">,</span><span class="s">&#39;normal&#39;</span><span class="p">,</span><span class="s">&#39;position&#39;</span><span class="p">,[.</span>02 <span class="p">.</span>10 <span class="p">.</span>94 <span class="p">.</span>04<span class="p">],</span> <span class="c">...</span>
</span><span class="line">   <span class="s">&#39;horiz&#39;</span><span class="p">,</span><span class="s">&#39;left&#39;</span><span class="p">);</span>
</span><span class="line"><span class="n">t2</span> <span class="p">=</span> <span class="n">uicontrol</span><span class="p">(</span><span class="s">&#39;style&#39;</span><span class="p">,</span><span class="s">&#39;text&#39;</span><span class="p">,</span><span class="s">&#39;units&#39;</span><span class="p">,</span><span class="s">&#39;normal&#39;</span><span class="p">,</span><span class="s">&#39;position&#39;</span><span class="p">,[.</span>02 <span class="p">.</span>02 <span class="p">.</span>94 <span class="p">.</span>04<span class="p">],</span> <span class="c">...</span>
</span><span class="line">   <span class="s">&#39;horiz&#39;</span><span class="p">,</span><span class="s">&#39;left&#39;</span><span class="p">);</span>
</span><span class="line"><span class="n">slow</span> <span class="p">=</span> <span class="n">uicontrol</span><span class="p">(</span><span class="s">&#39;style&#39;</span><span class="p">,</span><span class="s">&#39;toggle&#39;</span><span class="p">,</span><span class="s">&#39;units&#39;</span><span class="p">,</span><span class="s">&#39;normal&#39;</span><span class="p">,</span> <span class="c">...</span>
</span><span class="line">   <span class="s">&#39;position&#39;</span><span class="p">,[.</span>01 <span class="p">.</span>24 <span class="p">.</span>07 <span class="p">.</span>05<span class="p">],</span><span class="s">&#39;string&#39;</span><span class="p">,</span><span class="s">&#39;slow&#39;</span><span class="p">,</span><span class="s">&#39;value&#39;</span><span class="p">,</span>0<span class="p">);</span>
</span><span class="line"><span class="n">quit</span> <span class="p">=</span> <span class="n">uicontrol</span><span class="p">(</span><span class="s">&#39;style&#39;</span><span class="p">,</span><span class="s">&#39;toggle&#39;</span><span class="p">,</span><span class="s">&#39;units&#39;</span><span class="p">,</span><span class="s">&#39;normal&#39;</span><span class="p">,</span> <span class="c">...</span>
</span><span class="line">   <span class="s">&#39;position&#39;</span><span class="p">,[.</span>01 <span class="p">.</span>17 <span class="p">.</span>07 <span class="p">.</span>05<span class="p">],</span><span class="s">&#39;string&#39;</span><span class="p">,</span><span class="s">&#39;quit&#39;</span><span class="p">,</span><span class="s">&#39;value&#39;</span><span class="p">,</span>0<span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="n">U</span> <span class="p">=</span> <span class="n">cell</span><span class="p">(</span><span class="n">n</span><span class="p">,</span>1<span class="p">);</span>
</span><span class="line"><span class="n">hash</span> <span class="p">=</span> <span class="nb">zeros</span><span class="p">(</span><span class="n">n</span><span class="p">,</span>1<span class="p">);</span>
</span><span class="line"><span class="n">G</span> <span class="p">=</span> <span class="n">logical</span><span class="p">(</span><span class="n">sparse</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">n</span><span class="p">));</span>
</span><span class="line"><span class="n">m</span> <span class="p">=</span> 1<span class="p">;</span>
</span><span class="line"><span class="n">U</span><span class="p">{</span><span class="n">m</span><span class="p">}</span> <span class="p">=</span> <span class="n">root</span><span class="p">;</span>
</span><span class="line"><span class="n">hash</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="p">=</span> <span class="n">hashfun</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nb">j</span> <span class="p">=</span> 1<span class="p">;</span>
</span><span class="line"><span class="k">while</span> <span class="nb">j</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;</span> <span class="n">get</span><span class="p">(</span><span class="n">quit</span><span class="p">,</span><span class="s">&#39;value&#39;</span><span class="p">)</span> <span class="o">==</span> 0
</span><span class="line">
</span><span class="line">   <span class="c">% Try to open a page.</span>
</span><span class="line">
</span><span class="line">   <span class="k">try</span>
</span><span class="line">      <span class="n">set</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="s">&#39;string&#39;</span><span class="p">,</span><span class="n">sprintf</span><span class="p">(</span><span class="s">&#39;%5d %s&#39;</span><span class="p">,</span><span class="nb">j</span><span class="p">,</span><span class="n">U</span><span class="p">{</span><span class="nb">j</span><span class="p">}))</span>
</span><span class="line">      <span class="n">set</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="s">&#39;string&#39;</span><span class="p">,</span><span class="s">&#39;&#39;</span><span class="p">);</span>
</span><span class="line">      <span class="n">drawnow</span>
</span><span class="line">      <span class="n">page</span> <span class="p">=</span> <span class="n">urlread</span><span class="p">(</span><span class="n">U</span><span class="p">{</span><span class="nb">j</span><span class="p">});</span>
</span><span class="line">   <span class="k">catch</span>
</span><span class="line">      <span class="n">set</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="s">&#39;string&#39;</span><span class="p">,</span><span class="n">sprintf</span><span class="p">(</span><span class="s">&#39;fail: %5d %s&#39;</span><span class="p">,</span><span class="nb">j</span><span class="p">,</span><span class="n">U</span><span class="p">{</span><span class="nb">j</span><span class="p">}))</span>
</span><span class="line">      <span class="n">drawnow</span>
</span><span class="line">      <span class="k">continue</span>
</span><span class="line">   <span class="k">end</span>
</span><span class="line">   <span class="k">if</span> <span class="n">get</span><span class="p">(</span><span class="n">slow</span><span class="p">,</span><span class="s">&#39;value&#39;</span><span class="p">)</span>
</span><span class="line">      <span class="n">pause</span><span class="p">(.</span>25<span class="p">)</span>
</span><span class="line">   <span class="k">end</span>
</span><span class="line">
</span><span class="line">   <span class="c">% Follow the links from the open page.</span>
</span><span class="line">
</span><span class="line">   <span class="k">for</span> <span class="n">f</span> <span class="p">=</span> <span class="n">findstr</span><span class="p">(</span><span class="s">&#39;http:&#39;</span><span class="p">,</span><span class="n">page</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">      <span class="c">% A link starts with &#39;http:&#39; and ends with the next quote.</span>
</span><span class="line">
</span><span class="line">      <span class="n">e</span> <span class="p">=</span> <span class="n">min</span><span class="p">([</span><span class="n">findstr</span><span class="p">(</span><span class="s">&#39;&quot;&#39;</span><span class="p">,</span><span class="n">page</span><span class="p">(</span><span class="n">f</span><span class="p">:</span><span class="k">end</span><span class="p">))</span> <span class="n">findstr</span><span class="p">(</span><span class="s">&#39;&#39;&#39;&#39;</span><span class="p">,</span><span class="n">page</span><span class="p">(</span><span class="n">f</span><span class="p">:</span><span class="k">end</span><span class="p">))]);</span>
</span><span class="line">      <span class="k">if</span> <span class="nb">isempty</span><span class="p">(</span><span class="n">e</span><span class="p">),</span> <span class="k">continue</span><span class="p">,</span> <span class="k">end</span>
</span><span class="line">      <span class="n">url</span> <span class="p">=</span> <span class="n">deblank</span><span class="p">(</span><span class="n">page</span><span class="p">(</span><span class="n">f</span><span class="p">:</span><span class="n">f</span><span class="o">+</span><span class="n">e</span><span class="o">-</span>2<span class="p">));</span>
</span><span class="line">      <span class="n">url</span><span class="p">(</span><span class="n">url</span><span class="o">&lt;</span><span class="s">&#39; &#39;</span><span class="p">)</span> <span class="p">=</span> <span class="s">&#39;!&#39;</span><span class="p">;</span>   <span class="c">% Nonprintable characters</span>
</span><span class="line">      <span class="k">if</span> <span class="n">url</span><span class="p">(</span><span class="k">end</span><span class="p">)</span> <span class="o">==</span> <span class="s">&#39;/&#39;</span><span class="p">,</span> <span class="n">url</span><span class="p">(</span><span class="k">end</span><span class="p">)</span> <span class="p">=</span> <span class="p">[];</span> <span class="k">end</span>
</span><span class="line">
</span><span class="line">      <span class="c">% Look for links that should be skipped.</span>
</span><span class="line">
</span><span class="line">      <span class="n">skips</span> <span class="p">=</span> <span class="p">{</span><span class="s">&#39;.gif&#39;</span><span class="p">,</span><span class="s">&#39;.jpg&#39;</span><span class="p">,</span><span class="s">&#39;.pdf&#39;</span><span class="p">,</span><span class="s">&#39;.css&#39;</span><span class="p">,</span><span class="s">&#39;lmscadsi&#39;</span><span class="p">,</span><span class="s">&#39;cybernet&#39;</span><span class="p">,</span> <span class="c">...</span>
</span><span class="line">               <span class="s">&#39;search.cgi&#39;</span><span class="p">,</span><span class="s">&#39;.ram&#39;</span><span class="p">,</span><span class="s">&#39;www.w3.org&#39;</span><span class="p">,</span> <span class="c">...</span>
</span><span class="line">               <span class="s">&#39;scripts&#39;</span><span class="p">,</span><span class="s">&#39;netscape&#39;</span><span class="p">,</span><span class="s">&#39;shockwave&#39;</span><span class="p">,</span><span class="s">&#39;webex&#39;</span><span class="p">,</span><span class="s">&#39;fansonly&#39;</span><span class="p">};</span>
</span><span class="line">      <span class="n">skip</span> <span class="p">=</span> <span class="n">any</span><span class="p">(</span><span class="n">url</span><span class="o">==</span><span class="s">&#39;!&#39;</span><span class="p">)</span> <span class="o">|</span> <span class="n">any</span><span class="p">(</span><span class="n">url</span><span class="o">==</span><span class="s">&#39;?&#39;</span><span class="p">);</span>
</span><span class="line">      <span class="n">k</span> <span class="p">=</span> 0<span class="p">;</span>
</span><span class="line">      <span class="k">while</span> <span class="o">~</span><span class="n">skip</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">k</span> <span class="o">&lt;</span> <span class="nb">length</span><span class="p">(</span><span class="n">skips</span><span class="p">))</span>
</span><span class="line">         <span class="n">k</span> <span class="p">=</span> <span class="n">k</span><span class="o">+</span>1<span class="p">;</span>
</span><span class="line">         <span class="n">skip</span> <span class="p">=</span> <span class="o">~</span><span class="nb">isempty</span><span class="p">(</span><span class="n">findstr</span><span class="p">(</span><span class="n">url</span><span class="p">,</span><span class="n">skips</span><span class="p">{</span><span class="n">k</span><span class="p">}));</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">      <span class="k">if</span> <span class="n">skip</span>
</span><span class="line">         <span class="k">if</span> <span class="nb">isempty</span><span class="p">(</span><span class="n">findstr</span><span class="p">(</span><span class="n">url</span><span class="p">,</span><span class="s">&#39;.gif&#39;</span><span class="p">))</span> <span class="o">&amp;</span> <span class="nb">isempty</span><span class="p">(</span><span class="n">findstr</span><span class="p">(</span><span class="n">url</span><span class="p">,</span><span class="s">&#39;.jpg&#39;</span><span class="p">))</span>
</span><span class="line">            <span class="n">set</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="s">&#39;string&#39;</span><span class="p">,</span><span class="n">sprintf</span><span class="p">(</span><span class="s">&#39;skip: %s&#39;</span><span class="p">,</span><span class="n">url</span><span class="p">))</span>
</span><span class="line">            <span class="n">drawnow</span>
</span><span class="line">            <span class="k">if</span> <span class="n">get</span><span class="p">(</span><span class="n">slow</span><span class="p">,</span><span class="s">&#39;value&#39;</span><span class="p">)</span>
</span><span class="line">               <span class="n">pause</span><span class="p">(.</span>25<span class="p">)</span>
</span><span class="line">            <span class="k">end</span>
</span><span class="line">         <span class="k">end</span>
</span><span class="line">         <span class="k">continue</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">
</span><span class="line">      <span class="c">% Check if page is already in url list.</span>
</span><span class="line">
</span><span class="line">      <span class="nb">i</span> <span class="p">=</span> 0<span class="p">;</span>
</span><span class="line">      <span class="k">for</span> <span class="n">k</span> <span class="p">=</span> <span class="nb">find</span><span class="p">(</span><span class="n">hash</span><span class="p">(</span>1<span class="p">:</span><span class="n">m</span><span class="p">)</span> <span class="o">==</span> <span class="n">hashfun</span><span class="p">(</span><span class="n">url</span><span class="p">))</span><span class="o">&#39;</span><span class="p">;</span>
</span><span class="line">         <span class="k">if</span> <span class="nb">isequal</span><span class="p">(</span><span class="n">U</span><span class="p">{</span><span class="n">k</span><span class="p">},</span><span class="n">url</span><span class="p">)</span>
</span><span class="line">            <span class="nb">i</span> <span class="p">=</span> <span class="n">k</span><span class="p">;</span>
</span><span class="line">            <span class="k">break</span>
</span><span class="line">         <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">
</span><span class="line">      <span class="c">% Add a new url to the graph there if are fewer than n.</span>
</span><span class="line">
</span><span class="line">      <span class="k">if</span> <span class="p">(</span><span class="nb">i</span> <span class="o">==</span> 0<span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">m</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">)</span>
</span><span class="line">         <span class="n">m</span> <span class="p">=</span> <span class="n">m</span><span class="o">+</span>1<span class="p">;</span>
</span><span class="line">         <span class="n">U</span><span class="p">{</span><span class="n">m</span><span class="p">}</span> <span class="p">=</span> <span class="n">url</span><span class="p">;</span>
</span><span class="line">         <span class="n">hash</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="p">=</span> <span class="n">hashfun</span><span class="p">(</span><span class="n">url</span><span class="p">);</span>
</span><span class="line">         <span class="nb">i</span> <span class="p">=</span> <span class="n">m</span><span class="p">;</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">
</span><span class="line">      <span class="c">% Add a new link.</span>
</span><span class="line">
</span><span class="line">      <span class="k">if</span> <span class="nb">i</span> <span class="o">&gt;</span> 0
</span><span class="line">         <span class="n">G</span><span class="p">(</span><span class="nb">i</span><span class="p">,</span><span class="nb">j</span><span class="p">)</span> <span class="p">=</span> 1<span class="p">;</span>
</span><span class="line">         <span class="n">set</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="s">&#39;string&#39;</span><span class="p">,</span><span class="n">sprintf</span><span class="p">(</span><span class="s">&#39;%5d %s&#39;</span><span class="p">,</span><span class="nb">i</span><span class="p">,</span><span class="n">url</span><span class="p">))</span>
</span><span class="line">         <span class="n">line</span><span class="p">(</span><span class="nb">j</span><span class="p">,</span><span class="nb">i</span><span class="p">,</span><span class="s">&#39;marker&#39;</span><span class="p">,</span><span class="s">&#39;.&#39;</span><span class="p">,</span><span class="s">&#39;markersize&#39;</span><span class="p">,</span>6<span class="p">)</span>
</span><span class="line">         <span class="n">drawnow</span>
</span><span class="line">         <span class="k">if</span> <span class="n">get</span><span class="p">(</span><span class="n">slow</span><span class="p">,</span><span class="s">&#39;value&#39;</span><span class="p">)</span>
</span><span class="line">            <span class="n">pause</span><span class="p">(.</span>25<span class="p">)</span>
</span><span class="line">         <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">   <span class="k">end</span>
</span><span class="line">
</span><span class="line">   <span class="nb">j</span> <span class="p">=</span> <span class="nb">j</span><span class="o">+</span>1<span class="p">;</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line"><span class="n">delete</span><span class="p">(</span><span class="n">t1</span><span class="p">)</span>
</span><span class="line"><span class="n">delete</span><span class="p">(</span><span class="n">t2</span><span class="p">)</span>
</span><span class="line"><span class="n">delete</span><span class="p">(</span><span class="n">slow</span><span class="p">)</span>
</span><span class="line"><span class="n">set</span><span class="p">(</span><span class="n">quit</span><span class="p">,</span><span class="s">&#39;string&#39;</span><span class="p">,</span><span class="s">&#39;close&#39;</span><span class="p">,</span><span class="s">&#39;callback&#39;</span><span class="p">,</span><span class="s">&#39;close(gcf)&#39;</span><span class="p">,</span><span class="s">&#39;value&#39;</span><span class="p">,</span>0<span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">%------------------------</span>
</span><span class="line">
</span><span class="line"><span class="k">function</span><span class="w"> </span>h <span class="p">=</span><span class="w"> </span><span class="nf">hashfun</span><span class="p">(</span>url<span class="p">)</span><span class="w"></span>
</span><span class="line"><span class="c">% Almost unique numeric hash code for pages already visited.</span>
</span><span class="line"><span class="n">h</span> <span class="p">=</span> <span class="nb">length</span><span class="p">(</span><span class="n">url</span><span class="p">)</span> <span class="o">+</span> 1024<span class="o">*</span><span class="n">sum</span><span class="p">(</span><span class="n">url</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="mapreducepagerank">4.MapReduce框架下PageRank算法的实现</h3>

<p>利用前面wiki上的迭代(或者幂法)的思想来实现MapReduce框架下PageRank算法很简单，可以先阅读下参考内容5。</p>

<p>这篇文章<a href="http://michaelnielsen.org/blog/using-mapreduce-to-compute-pagerank/">using-mapreduce-to-compute-pagerank</a>更加详细，可以参考</p>

<p>以下是我的大数据的一次作业，要求是参考wiki上的简便算法，实现MapReduce框架下的PageRank算法。给的数据集是Twitter的用户之间的关系，可以看做是网页之间的关系，但是助教没要求写代码以及运行这个数据集(有1G多)，所以下面只是一个Python版本的理想可行版本，并没有通过实际大数据集的验证，另外，博主暂时还不太会Python的mapreduce框架中的一些函数，所以实现的是一个简明的可以测试的PageRank算法。</p>

<h4 id="section-2">1.输入输出格式</h4>

<p><strong>map函数的输入是&lt;节点，从该节点引出的边列表&gt;，其中节点是一个类，包含了其当前的pagerank值，输出是&lt;节点，反向节点pagerank值/反向节点引出边的总数&gt;；</strong></p>

<p><strong>reduce函数的输入是&lt;节点，反向节点pagerank值/反向节点引出边的总数&gt;，输出是&lt;节点，从该节点引出的边列表&gt;，其中节点包含了其更新后的pagerank值。</strong></p>

<p>伪代码： [一时犯二写了个英文形式的 ]</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="matlab"><span class="line"><span class="n">process</span> <span class="n">the</span> <span class="n">data</span> <span class="n">to</span> <span class="n">the</span> <span class="n">form</span> <span class="n">of</span> <span class="p">{</span><span class="n">node</span> <span class="nb">i</span><span class="p">:[</span><span class="n">its</span> <span class="n">adjacent</span> <span class="n">node</span> <span class="n">list</span><span class="p">],</span><span class="c">...}</span>
</span><span class="line"><span class="k">while</span> <span class="n">the</span> <span class="n">sum</span> <span class="n">of</span> <span class="n">difference</span> <span class="n">between</span> <span class="n">the</span> <span class="n">last</span> <span class="n">two</span> <span class="n">pagerank</span> <span class="n">values</span> <span class="o">&lt;</span> <span class="n">threshold</span>
</span><span class="line">	<span class="n">map</span><span class="p">({</span><span class="n">node</span> <span class="nb">i</span><span class="p">:[</span><span class="n">its</span> <span class="n">adjacent</span> <span class="n">node</span> <span class="n">list</span><span class="p">],</span><span class="c">...}):</span>
</span><span class="line">	    <span class="n">map_output</span><span class="p">={}</span>
</span><span class="line">	    <span class="k">for</span> <span class="n">every</span> <span class="n">node</span> <span class="nb">j</span> <span class="n">in</span> <span class="n">adjacent</span> <span class="n">node</span> <span class="n">list</span><span class="p">:</span>
</span><span class="line">	        <span class="n">put</span> <span class="n">or</span> <span class="n">sum</span> <span class="n">up</span> <span class="p">{</span><span class="nb">j</span><span class="p">:(</span><span class="nb">i</span><span class="p">,</span> <span class="n">PageRank</span><span class="p">(</span><span class="nb">i</span><span class="p">)</span><span class="o">/</span><span class="nb">length</span><span class="p">(</span><span class="n">adjacent</span> <span class="n">node</span> <span class="n">list</span><span class="p">))}</span> <span class="n">into</span> <span class="n">map_output</span>
</span><span class="line">	    <span class="k">return</span> <span class="n">map_output</span>
</span><span class="line">	
</span><span class="line">	<span class="n">reduce</span><span class="p">(</span><span class="n">map_output</span><span class="p">):</span>
</span><span class="line">	    <span class="n">reduce_output</span><span class="p">={}</span>
</span><span class="line">	    <span class="k">for</span> <span class="n">every</span> <span class="n">entry</span> <span class="p">{</span><span class="nb">j</span><span class="p">:(</span><span class="nb">i</span><span class="p">,</span> <span class="n">PageRank</span><span class="p">(</span><span class="nb">i</span><span class="p">)</span><span class="o">/</span><span class="nb">length</span><span class="p">(</span><span class="n">adjacent</span> <span class="n">node</span> <span class="n">list</span><span class="p">))}</span> <span class="n">in</span> <span class="n">map_output</span><span class="p">:</span>
</span><span class="line">	        <span class="n">put</span> <span class="n">or</span> <span class="n">sum</span> <span class="n">up</span> <span class="n">all</span> <span class="n">values</span> <span class="n">pagerank</span> <span class="n">values</span> <span class="k">for</span> <span class="n">node</span> <span class="nb">j</span> <span class="n">with</span> <span class="n">its</span> <span class="n">adjacent</span> <span class="n">node</span> <span class="n">list</span> <span class="n">into</span> <span class="n">reduce_output</span>
</span><span class="line">	    <span class="k">return</span> <span class="n">reduce_output</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-3">2.示例演示</h4>

<p>假设用户1，2，3，4是如下图所示的关系：</p>

<p><img src="http://hujiaweibujidao.github.io/images/others/pagerankdemo.png" alt="image" /></p>

<p>假设有2个mapper(A和B)和1个reducer(C)，初始时4个节点的pagerank值都是0.25</p>

<p>其中，关于用户1和2的数据被mapperA读取并处理，关于用户3和4的数据被mapperB读取并处理 [经验证，即使一个用户的数据是由不同的mapper来读取的，最终收敛到的结果差不多]</p>

<p>map的输入输出结果如下：</p>

<p><img src="http://hujiaweibujidao.github.io/images/others/mapper.png" alt="image" /></p>

<p>reduce的输入输出结果如下，输入是2个mapper的输出，输出的结果中更新了节点的pagerank值</p>

<p><img src="http://hujiaweibujidao.github.io/images/others/reducer.png" alt="image" /></p>

<p>reducer处理完了之后又将它的结果输入给mapper处理，直到迭代的次数超过了设定值或者两次迭代之后得到的所有节点的pagerank值之差的总和(也可以是取二范数)小于设定的阈值。</p>

<h4 id="section-4">3.示例的实验结果</h4>

<p>(1)首先是使用Matlab采用幂法的方式计算出在p=1.0的情况下示例得到的结果 [它的主要作用是验证后面python版本的正确性]</p>

<p>matlab源码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="matlab"><span class="line"><span class="n">n</span><span class="p">=</span>4<span class="p">;</span>
</span><span class="line"><span class="nb">i</span><span class="p">=[</span>2 3 4 3 4 4 1 2<span class="p">];</span>
</span><span class="line"><span class="nb">j</span><span class="p">=[</span>1 1 1 2 2 3 3 4<span class="p">];</span>
</span><span class="line"><span class="n">G</span><span class="p">=</span><span class="n">sparse</span><span class="p">(</span><span class="nb">i</span><span class="p">,</span><span class="nb">j</span><span class="p">,</span>1<span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="p">[</span><span class="n">n</span><span class="p">,</span><span class="n">n</span><span class="p">]</span> <span class="p">=</span> <span class="nb">size</span><span class="p">(</span><span class="n">G</span><span class="p">);</span>
</span><span class="line"><span class="k">for</span> <span class="nb">j</span> <span class="p">=</span> 1<span class="p">:</span><span class="n">n</span>
</span><span class="line">   <span class="n">L</span><span class="p">{</span><span class="nb">j</span><span class="p">}</span> <span class="p">=</span> <span class="nb">find</span><span class="p">(</span><span class="n">G</span><span class="p">(:,</span><span class="nb">j</span><span class="p">));</span>
</span><span class="line">   <span class="n">c</span><span class="p">(</span><span class="nb">j</span><span class="p">)</span> <span class="p">=</span> <span class="nb">length</span><span class="p">(</span><span class="n">L</span><span class="p">{</span><span class="nb">j</span><span class="p">});</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c">% Power method</span>
</span><span class="line"><span class="n">p</span><span class="p">=</span>1<span class="p">.</span>0<span class="p">;</span>
</span><span class="line"><span class="n">delta</span> <span class="p">=</span> <span class="p">(</span>1<span class="o">-</span><span class="n">p</span><span class="p">)</span><span class="o">/</span><span class="n">n</span><span class="p">;</span>
</span><span class="line"><span class="n">x</span> <span class="p">=</span> <span class="nb">ones</span><span class="p">(</span><span class="n">n</span><span class="p">,</span>1<span class="p">)</span><span class="o">/</span><span class="n">n</span><span class="p">;</span>
</span><span class="line"><span class="n">z</span> <span class="p">=</span> <span class="nb">zeros</span><span class="p">(</span><span class="n">n</span><span class="p">,</span>1<span class="p">);</span>
</span><span class="line"><span class="n">cnt</span> <span class="p">=</span> 0<span class="p">;</span>
</span><span class="line"><span class="k">while</span> <span class="n">max</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="n">z</span><span class="p">))</span> <span class="o">&gt;</span> <span class="p">.</span>0001
</span><span class="line">   <span class="n">z</span> <span class="p">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class="line">   <span class="n">x</span> <span class="p">=</span> <span class="nb">zeros</span><span class="p">(</span><span class="n">n</span><span class="p">,</span>1<span class="p">);</span>
</span><span class="line">   <span class="k">for</span> <span class="nb">j</span> <span class="p">=</span> 1<span class="p">:</span><span class="n">n</span>
</span><span class="line">      <span class="k">if</span> <span class="n">c</span><span class="p">(</span><span class="nb">j</span><span class="p">)</span> <span class="o">==</span> 0
</span><span class="line">         <span class="n">x</span> <span class="p">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">z</span><span class="p">(</span><span class="nb">j</span><span class="p">)</span><span class="o">/</span><span class="n">n</span><span class="p">;</span>
</span><span class="line">      <span class="k">else</span>
</span><span class="line">         <span class="n">x</span><span class="p">(</span><span class="n">L</span><span class="p">{</span><span class="nb">j</span><span class="p">})</span> <span class="p">=</span> <span class="n">x</span><span class="p">(</span><span class="n">L</span><span class="p">{</span><span class="nb">j</span><span class="p">})</span> <span class="o">+</span> <span class="n">z</span><span class="p">(</span><span class="nb">j</span><span class="p">)</span><span class="o">/</span><span class="n">c</span><span class="p">(</span><span class="nb">j</span><span class="p">);</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">   <span class="k">end</span>
</span><span class="line">   <span class="n">x</span> <span class="p">=</span> <span class="n">p</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">delta</span><span class="p">;</span>
</span><span class="line">   <span class="n">cnt</span> <span class="p">=</span> <span class="n">cnt</span><span class="o">+</span>1<span class="p">;</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line"><span class="n">sprintf</span><span class="p">(</span><span class="s">&#39;pagerank result:&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">x</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>结果为：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="matlab"><span class="line">0<span class="p">.</span>1072
</span><span class="line">0<span class="p">.</span>3571
</span><span class="line">0<span class="p">.</span>2143
</span><span class="line">0<span class="p">.</span>3214
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(2)matlab版本的page rank没有采用mapreduce的思想进行迭代，所以我另外写了一个python版本的利用mapreduce思想实现的pagerank算法(注：我并没有使用python的map和reduce函数去实现，而是使用更加容易明白的实现)，使用的阈值为0.0001，最多迭代的次数为100次。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
</pre></td><td class="code"><pre><code class="matlab"><span class="line"># <span class="n">coding</span><span class="p">=</span><span class="n">utf</span><span class="o">-</span>8
</span><span class="line">
</span><span class="line"><span class="n">__author__</span> <span class="p">=</span> <span class="s">&#39;hujiawei&#39;</span>
</span><span class="line"><span class="n">__doc__</span> <span class="p">=</span> <span class="s">&#39;pagerank mapreduce&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">class</span> <span class="n">Node</span><span class="p">:</span>
</span><span class="line">    <span class="n">def</span> <span class="n">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span><span class="n">id</span><span class="p">,</span><span class="n">pk</span><span class="p">):</span>
</span><span class="line">        <span class="n">self</span><span class="p">.</span><span class="n">id</span><span class="p">=</span><span class="n">id</span>
</span><span class="line">        <span class="n">self</span><span class="p">.</span><span class="n">pk</span><span class="p">=</span><span class="n">pk</span>
</span><span class="line">
</span><span class="line"><span class="n">def</span> <span class="n">pk_map</span><span class="p">(</span><span class="n">map_input</span><span class="p">):</span>
</span><span class="line">    <span class="n">map_output</span><span class="p">={}</span>
</span><span class="line">    <span class="k">for</span> <span class="n">node</span><span class="p">,</span><span class="n">outlinks</span> <span class="n">in</span> <span class="n">map_input</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
</span><span class="line">        <span class="k">for</span> <span class="n">link</span> <span class="n">in</span> <span class="n">outlinks</span><span class="p">:</span>
</span><span class="line">            <span class="nb">size</span><span class="p">=</span><span class="n">len</span><span class="p">(</span><span class="n">outlinks</span><span class="p">)</span>
</span><span class="line">            <span class="k">if</span> <span class="n">link</span> <span class="n">in</span> <span class="n">map_output</span><span class="p">:</span>
</span><span class="line">                <span class="n">map_output</span><span class="p">[</span><span class="n">link</span><span class="p">]</span><span class="o">+</span><span class="p">=(</span><span class="n">float</span><span class="p">)(</span><span class="n">node</span><span class="p">.</span><span class="n">pk</span><span class="p">)</span><span class="o">/</span><span class="nb">size</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">map_output</span><span class="p">[</span><span class="n">link</span><span class="p">]=(</span><span class="n">float</span><span class="p">)(</span><span class="n">node</span><span class="p">.</span><span class="n">pk</span><span class="p">)</span><span class="o">/</span><span class="nb">size</span>
</span><span class="line">    <span class="k">return</span> <span class="n">map_output</span>
</span><span class="line">
</span><span class="line"><span class="n">def</span> <span class="n">pk_reduce</span><span class="p">(</span><span class="n">reduce_input</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">result</span> <span class="n">in</span> <span class="n">reduce_input</span><span class="p">:</span>
</span><span class="line">        <span class="k">for</span> <span class="n">node</span><span class="p">,</span><span class="n">value</span> <span class="n">in</span> <span class="n">result</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
</span><span class="line">            <span class="n">node</span><span class="p">.</span><span class="n">pk</span><span class="o">+</span><span class="p">=</span><span class="n">value</span>
</span><span class="line">
</span><span class="line"><span class="n">def</span> <span class="n">pk_clear</span><span class="p">(</span><span class="n">nodes</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">node</span> <span class="n">in</span> <span class="n">nodes</span><span class="p">:</span>
</span><span class="line">        <span class="n">node</span><span class="p">.</span><span class="n">pk</span><span class="p">=</span>0
</span><span class="line">
</span><span class="line"><span class="n">def</span> <span class="n">pk_last</span><span class="p">(</span><span class="n">nodes</span><span class="p">):</span>
</span><span class="line">    <span class="n">lastnodes</span><span class="p">=[]</span>
</span><span class="line">    <span class="k">for</span> <span class="n">node</span> <span class="n">in</span> <span class="n">nodes</span><span class="p">:</span>
</span><span class="line">        <span class="n">lastnodes</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">Node</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">id</span><span class="p">,</span><span class="n">node</span><span class="p">.</span><span class="n">pk</span><span class="p">))</span>
</span><span class="line">    <span class="k">return</span> <span class="n">lastnodes</span>
</span><span class="line">
</span><span class="line"><span class="n">def</span> <span class="n">pk_diff</span><span class="p">(</span><span class="n">nodes</span><span class="p">,</span><span class="n">lastnodes</span><span class="p">):</span>
</span><span class="line">    <span class="n">diff</span><span class="p">=</span>0
</span><span class="line">    <span class="k">for</span> <span class="nb">i</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="n">len</span><span class="p">(</span><span class="n">nodes</span><span class="p">)):</span>
</span><span class="line">        <span class="n">print</span><span class="p">(</span><span class="s">&#39;node pk %f, last node pk %f &#39;</span> <span class="c">% (nodes[i].pk, lastnodes[i].pk))</span>
</span><span class="line">        <span class="n">diff</span><span class="o">+</span><span class="p">=</span><span class="nb">abs</span><span class="p">(</span><span class="n">nodes</span><span class="p">[</span><span class="nb">i</span><span class="p">].</span><span class="n">pk</span><span class="o">-</span><span class="n">lastnodes</span><span class="p">[</span><span class="nb">i</span><span class="p">].</span><span class="n">pk</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">diff</span>
</span><span class="line">
</span><span class="line"><span class="n">def</span> <span class="n">pk_test1</span><span class="p">():</span>
</span><span class="line">    <span class="n">node1</span> <span class="p">=</span> <span class="n">Node</span><span class="p">(</span>1<span class="p">,</span> 0<span class="p">.</span>25<span class="p">)</span>
</span><span class="line">    <span class="n">node2</span> <span class="p">=</span> <span class="n">Node</span><span class="p">(</span>2<span class="p">,</span> 0<span class="p">.</span>25<span class="p">)</span>
</span><span class="line">    <span class="n">node3</span> <span class="p">=</span> <span class="n">Node</span><span class="p">(</span>3<span class="p">,</span> 0<span class="p">.</span>25<span class="p">)</span>
</span><span class="line">    <span class="n">node4</span> <span class="p">=</span> <span class="n">Node</span><span class="p">(</span>4<span class="p">,</span> 0<span class="p">.</span>25<span class="p">)</span>
</span><span class="line">    <span class="n">nodes</span> <span class="p">=</span> <span class="p">[</span><span class="n">node1</span><span class="p">,</span> <span class="n">node2</span><span class="p">,</span> <span class="n">node3</span><span class="p">,</span> <span class="n">node4</span><span class="p">]</span>
</span><span class="line">    <span class="n">threshold</span> <span class="p">=</span> 0<span class="p">.</span>0001
</span><span class="line">    <span class="n">max_iters</span> <span class="p">=</span> 100
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="n">iter_count</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="n">max_iters</span><span class="p">):</span>
</span><span class="line">        <span class="n">iter_count</span> <span class="o">+</span><span class="p">=</span> 1
</span><span class="line">        <span class="n">lastnodes</span><span class="p">=</span><span class="n">pk_last</span><span class="p">(</span><span class="n">nodes</span><span class="p">)</span>
</span><span class="line">        <span class="n">print</span><span class="p">(</span><span class="s">&#39;============ map count %d =================&#39;</span> <span class="c">% (iter_count))</span>
</span><span class="line">        <span class="n">in1</span> <span class="p">=</span> <span class="p">{</span><span class="n">node1</span><span class="p">:</span> <span class="p">[</span><span class="n">node2</span><span class="p">,</span> <span class="n">node3</span><span class="p">,</span> <span class="n">node4</span><span class="p">],</span> <span class="n">node2</span><span class="p">:</span> <span class="p">[</span><span class="n">node3</span><span class="p">,</span> <span class="n">node4</span><span class="p">]}</span>
</span><span class="line">        <span class="n">in2</span> <span class="p">=</span> <span class="p">{</span><span class="n">node3</span><span class="p">:</span> <span class="p">[</span><span class="n">node1</span><span class="p">,</span> <span class="n">node4</span><span class="p">],</span> <span class="n">node4</span><span class="p">:</span> <span class="p">[</span><span class="n">node2</span><span class="p">]}</span>
</span><span class="line">
</span><span class="line">        <span class="n">mapout1</span> <span class="p">=</span> <span class="n">pk_map</span><span class="p">(</span><span class="n">in1</span><span class="p">)</span>
</span><span class="line">        <span class="n">mapout2</span> <span class="p">=</span> <span class="n">pk_map</span><span class="p">(</span><span class="n">in2</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span> <span class="n">node</span><span class="p">,</span> <span class="n">value</span> <span class="n">in</span> <span class="n">mapout1</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
</span><span class="line">            <span class="n">print</span> <span class="n">str</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">id</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39; &#39;</span> <span class="o">+</span> <span class="n">str</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span> <span class="n">node</span><span class="p">,</span> <span class="n">value</span> <span class="n">in</span> <span class="n">mapout2</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
</span><span class="line">            <span class="n">print</span> <span class="n">str</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">id</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39; &#39;</span> <span class="o">+</span> <span class="n">str</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="n">print</span><span class="p">(</span><span class="s">&#39;============ reduce count %d =================&#39;</span> <span class="c">% (iter_count))</span>
</span><span class="line">
</span><span class="line">        <span class="n">reducein</span> <span class="p">=</span> <span class="p">[</span><span class="n">mapout1</span><span class="p">,</span> <span class="n">mapout2</span><span class="p">]</span>
</span><span class="line">        <span class="n">pk_clear</span><span class="p">(</span><span class="n">nodes</span><span class="p">)</span>
</span><span class="line">        <span class="n">pk_reduce</span><span class="p">(</span><span class="n">reducein</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span> <span class="n">node</span> <span class="n">in</span> <span class="n">nodes</span><span class="p">:</span>
</span><span class="line">            <span class="n">print</span> <span class="n">str</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">id</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39; &#39;</span> <span class="o">+</span> <span class="n">str</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">pk</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="n">diff</span><span class="p">=</span><span class="n">pk_diff</span><span class="p">(</span><span class="n">nodes</span><span class="p">,</span><span class="n">lastnodes</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="n">diff</span> <span class="o">&lt;</span> <span class="n">threshold</span><span class="p">:</span>
</span><span class="line">            <span class="k">break</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="line">    <span class="n">pk_test1</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>得到的结果为如下，总共迭代了15次</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="matlab"><span class="line">1 0<span class="p">.</span>107138774577
</span><span class="line">2 0<span class="p">.</span>35712924859
</span><span class="line">3 0<span class="p">.</span>214296601128
</span><span class="line">4 0<span class="p">.</span>321435375705
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的结果和Matlab用幂法得到的pagerank值差别很小，可以认为是正确的，所以说明了使用这种mapreduce输入输出格式的正确性。</p>

<p>OK，差不多了，希望对需要理解PageRank算法的人有帮助！ :-) </p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/12/algorithms-pagerank/">http://hujiaweibujidao.github.io/blog/2014/05/12/algorithms-pagerank/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Happy Mother's Day]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/10/happy-mothers-day/"/>
    <updated>2014-05-10T20:08:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/10/happy-mothers-day</id>
    <content type="html"><![CDATA[<p>老妈，节日快乐！祝您永远幸福健康！</p>

<p><img src="http://hujiaweibujidao.github.io/images/mothersday.png" alt="image" /></p>

<p>使用的Python代码，<a href="http://pythontip.sinaapp.com/coding/skulpt/">源代码来源不记得了，可以看下这里</a>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">turtle</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">random</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class="line">    <span class="n">tList</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="n">head</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="n">numTurtles</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">numTurtles</span><span class="p">):</span>
</span><span class="line">        <span class="n">nt</span> <span class="o">=</span> <span class="n">turtle</span><span class="o">.</span><span class="n">Turtle</span><span class="p">()</span>   <span class="c"># Make a new turtle, initialize values</span>
</span><span class="line">        <span class="n">nt</span><span class="o">.</span><span class="n">setheading</span><span class="p">(</span><span class="n">head</span><span class="p">)</span>
</span><span class="line">        <span class="n">nt</span><span class="o">.</span><span class="n">pensize</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">        <span class="n">nt</span><span class="o">.</span><span class="n">color</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">randrange</span><span class="p">(</span><span class="mi">256</span><span class="p">),</span><span class="n">random</span><span class="o">.</span><span class="n">randrange</span><span class="p">(</span><span class="mi">256</span><span class="p">),</span><span class="n">random</span><span class="o">.</span><span class="n">randrange</span><span class="p">(</span><span class="mi">256</span><span class="p">))</span>
</span><span class="line">        <span class="n">nt</span><span class="o">.</span><span class="n">speed</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class="line">        <span class="n">nt</span><span class="o">.</span><span class="n">tracer</span><span class="p">(</span><span class="mi">30</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">        <span class="n">tList</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">nt</span><span class="p">)</span>       <span class="c"># Add the new turtle to the list</span>
</span><span class="line">        <span class="n">head</span> <span class="o">=</span> <span class="n">head</span> <span class="o">+</span> <span class="mi">360</span><span class="o">/</span><span class="n">numTurtles</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">):</span>
</span><span class="line">        <span class="n">moveTurtles</span><span class="p">(</span><span class="n">tList</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">w</span> <span class="o">=</span> <span class="n">tList</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">    <span class="n">w</span><span class="o">.</span><span class="n">up</span><span class="p">()</span>
</span><span class="line">    <span class="n">w</span><span class="o">.</span><span class="n">goto</span><span class="p">(</span><span class="o">-</span><span class="mi">130</span><span class="p">,</span><span class="mi">40</span><span class="p">)</span>
</span><span class="line">    <span class="n">w</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;You are my favorite lady!&quot;</span><span class="p">,</span><span class="bp">True</span><span class="p">,</span><span class="s">&quot;center&quot;</span><span class="p">,</span><span class="s">&quot;20px Arial&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">w</span><span class="o">.</span><span class="n">goto</span><span class="p">(</span><span class="o">-</span><span class="mi">130</span><span class="p">,</span><span class="o">-</span><span class="mi">35</span><span class="p">)</span>
</span><span class="line">    <span class="n">w</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;Happy Mother&#39;s Day&quot;</span><span class="p">,</span><span class="bp">True</span><span class="p">,</span><span class="s">&quot;center&quot;</span><span class="p">,</span><span class="s">&quot;24px Arial&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">moveTurtles</span><span class="p">(</span><span class="n">turtleList</span><span class="p">,</span><span class="n">dist</span><span class="p">,</span><span class="n">angle</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">turtle</span> <span class="ow">in</span> <span class="n">turtleList</span><span class="p">:</span>   <span class="c"># Make every turtle on the list do the same actions.</span>
</span><span class="line">        <span class="n">turtle</span><span class="o">.</span><span class="n">forward</span><span class="p">(</span><span class="n">dist</span><span class="p">)</span>
</span><span class="line">        <span class="n">turtle</span><span class="o">.</span><span class="n">right</span><span class="p">(</span><span class="n">angle</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/10/happy-mothers-day/">http://hujiaweibujidao.github.io/blog/2014/05/10/happy-mothers-day/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tsinghua 9ers Pictures]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/10/tsinghua-9ers-pictures/"/>
    <updated>2014-05-10T13:10:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/10/tsinghua-9ers-pictures</id>
    <content type="html"><![CDATA[<p>清华9字班毕业生于海童拍摄制作，视频地址<a href="http://v.youku.com/v_show/id_XNTkwNDYxNjIw/v.swf.html">优酷视频 时光机：清华园的延时摄影</a></p>

<p>虽不是9字班的，但是在园子里生活了一年多了，感觉很亲切，很梦幻，我要继续努力成为一名真正合格的清华人！</p>

<p>我希望在这里度过研究生之后，也能无怨无悔地写下“如果研究生重来，我什么都不想改变”！</p>

<p><img src="http://hujiaweibujidao.github.io/images/pics/dalitang.jpeg" alt="image" /></p>

<p><img src="http://hujiaweibujidao.github.io/images/pics/erxiaomen.jpeg" alt="image" /></p>

<p><img src="http://hujiaweibujidao.github.io/images/pics/hetang.jpeg" alt="image" /></p>

<!--![image](http://hujiaweibujidao.github.io/images/pics/hetangdong.jpeg)-->

<p><img src="http://hujiaweibujidao.github.io/images/pics/litang.jpeg" alt="image" /></p>

<p><img src="http://hujiaweibujidao.github.io/images/pics/qinghuaxuetang.jpeg" alt="image" /></p>

<p><img src="http://hujiaweibujidao.github.io/images/pics/qinghuaxuetangcaihong.jpeg" alt="image" /></p>

<p><img src="http://hujiaweibujidao.github.io/images/pics/quanjing.jpeg" alt="image" /></p>

<p><img src="http://hujiaweibujidao.github.io/images/pics/rigui.jpeg" alt="image" /></p>

<!--![image](http://hujiaweibujidao.github.io/images/pics/shandian.jpeg)-->

<p><img src="http://hujiaweibujidao.github.io/images/pics/xiaoche.jpeg" alt="image" /></p>

<p><img src="http://hujiaweibujidao.github.io/images/pics/xingkong.jpeg" alt="image" /></p>

<p><img src="http://hujiaweibujidao.github.io/images/pics/yekong.jpeg" alt="image" /></p>

<p><img src="http://hujiaweibujidao.github.io/images/pics/yinyueting.jpeg" alt="image" /></p>

<p><img src="http://hujiaweibujidao.github.io/images/pics/zijing.jpeg" alt="image" /></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/10/tsinghua-9ers-pictures/">http://hujiaweibujidao.github.io/blog/2014/05/10/tsinghua-9ers-pictures/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Basics]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/10/python-tips1/"/>
    <updated>2014-05-10T13:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/10/python-tips1</id>
    <content type="html"><![CDATA[<p>1.使用<code>glob</code>模块可以用通配符的方式搜索某个目录下的特定文件，返回结果是一个list</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">glob</span>
</span><span class="line"><span class="n">flist</span><span class="o">=</span><span class="n">glob</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s">&#39;*.jpeg&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>使用<code>os.getcwd()</code>可以得到当前目录，如果想切换到其他目录，可以使用<code>os.chdir('str/to/path')</code>，如果想执行Shell脚本，可以使用<code>os.system('mkdir newfolder')</code>。</p>

<p>对于日常文件和目录的管理, <code>shutil</code>模块提供了更便捷、更高层次的接口</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">shutil</span>
</span><span class="line"><span class="n">shutil</span><span class="o">.</span><span class="n">copyfile</span><span class="p">(</span><span class="s">&#39;data.db&#39;</span><span class="p">,</span> <span class="s">&#39;archive.db&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">shutil</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="s">&#39;/build/executables&#39;</span><span class="p">,</span> <span class="s">&#39;installdir&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>使用PyCharm中，在一个Project中新建一个Directory和新建一个Package之后，IDE都会创建对应的目录，并添加默认的<code>__init__.py</code>文件，但是，两者还是不一样的。
如果在它们的目录下各新建一个python脚本测试输出<code>os.getcwd()</code>，如果是在Directory中得到的是Project的根目录’/Users/hujiawei/PycharmProjects/leetcodeoj’；如果是在Package中得到的是Package的根目录，如’/Users/hujiawei/PycharmProjects/leetcodeoj/pypackage’。</p>

<p>2.如果要在代码中添加中文注释的话，最好在文档开头加上下面的编码声明语句。关于Python中的字符串编码可见<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386819196283586a37629844456ca7e5a7faa9b94ee8000">廖雪峰的python教程</a>。若代码打算用在国际化的环境中, 那么不要使用奇特的编码。Python 默认的 UTF-8, 或者甚至是简单的 ASCII 在任何情况下工作得最好。同样地，如果代码的读者或维护者只有很小的概率使用不同的语言，那么不要在标识符里使用非 ASCII 字符。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># coding=utf-8 </span>
</span><span class="line"><span class="err">或者</span>
</span><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.关于Python中的变量，摘自<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386820042500060e2921830a4adf94fb31bcea8d6f5c000">廖雪峰的python教程</a></p>

<p>在Python中，变量名类似<code>__xxx__</code>的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量，所以，不能用<code>__name__</code>、<code>__score__</code>这样的变量名。</p>

<p>有些时候，你会看到以一个下划线开头的实例变量名(<strong>两个下划线开头的也一样算，其实任何以下划线开头的都算</strong>)，比如<code>_name</code>，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，<strong>“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”</strong>。</p>

<p>双下划线开头的实例变量是不是一定不能从外部访问呢？其实也不是。不能直接访问<code>__name</code>是因为Python解释器对外把<code>__name</code>变量改成了<code>_Student__name</code>，所以，仍然可以通过<code>_Student__name</code>来访问<code>__name</code>变量。但是强烈建议你不要这么干，因为不同版本的Python解释器可能会把<code>__name</code>改成不同的变量名。</p>

<p>总的来说就是，Python本身没有任何机制阻止你干坏事，一切全靠自觉。</p>

<p>上面说的有点绕，下面我写了两个python脚本，大家可以对照看下哪些能够访问，哪些不能，不能的情况下如何操作变得可以访问(注释后面的<code>yes</code>和<code>no</code>表示能不能被访问)。</p>

<p>也就是说，<strong>默认呢，以一个下划线开始(不论结尾有没有下划线)的变量在外部都是可以直接访问的，但是不推荐这么做；以两个下划线开始和两个下划线结束的变量属于特殊变量，可以直接访问；而以两个下划线开始且结尾不是两个下划线(可以没有也可以有一个下划线)的变量属于私有变量，不能直接访问，虽然可以通过其他方式访问，但最好不要在外部访问。</strong></p>

<p>文件<code>APythonTestA.py</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># coding=utf-8</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">ListNode</span><span class="p">:</span>
</span><span class="line">
</span><span class="line">    <span class="n">_class_field10</span> <span class="o">=</span> <span class="s">&#39;node class field 1-0&#39;</span>
</span><span class="line">    <span class="n">_class_field11_</span> <span class="o">=</span> <span class="s">&#39;node class field 1-1&#39;</span>
</span><span class="line">    <span class="n">_class_field12__</span> <span class="o">=</span> <span class="s">&#39;node class field 1-2&#39;</span>
</span><span class="line">
</span><span class="line">    <span class="n">__class_field20</span> <span class="o">=</span> <span class="s">&#39;node class field 2-0&#39;</span>
</span><span class="line">    <span class="n">__class_field21_</span> <span class="o">=</span> <span class="s">&#39;node class field 2-1&#39;</span>
</span><span class="line">    <span class="n">__class_field22__</span> <span class="o">=</span> <span class="s">&#39;node class field 2-2&#39;</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">x</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">
</span><span class="line"><span class="n">_class_field10</span> <span class="o">=</span> <span class="s">&#39;node class field 1-0&#39;</span>
</span><span class="line"><span class="n">_class_field11_</span> <span class="o">=</span> <span class="s">&#39;node class field 1-1&#39;</span>
</span><span class="line"><span class="n">_class_field12__</span> <span class="o">=</span> <span class="s">&#39;node class field 1-2&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">__class_field20</span> <span class="o">=</span> <span class="s">&#39;node class field 2-0&#39;</span>
</span><span class="line"><span class="n">__class_field21_</span> <span class="o">=</span> <span class="s">&#39;node class field 2-1&#39;</span>
</span><span class="line"><span class="n">__class_field22__</span> <span class="o">=</span> <span class="s">&#39;node class field 2-2&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>文件<code>APythonTestB.py</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># coding=utf-8</span>
</span><span class="line"><span class="n">__author__</span> <span class="o">=</span> <span class="s">&#39;hujiawei&#39;</span>
</span><span class="line"><span class="n">__doc__</span> <span class="o">=</span> <span class="s">&#39;for python test 2&#39;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">APythonTestA</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="nb">dir</span><span class="p">(</span><span class="n">APythonTestA</span><span class="o">.</span><span class="n">ListNode</span><span class="p">))</span>
</span><span class="line">    <span class="n">node</span> <span class="o">=</span> <span class="n">APythonTestA</span><span class="o">.</span><span class="n">ListNode</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class="line">    <span class="c"># print(node._ListNode__class_field20) #yes</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">_class_field10</span><span class="p">)</span> <span class="c">#yes</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">_class_field11_</span><span class="p">)</span> <span class="c">#yes</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">_class_field12__</span><span class="p">)</span> <span class="c">#yes</span>
</span><span class="line">    <span class="c"># print(node.__class_field20) #no</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">_ListNode__class_field20</span><span class="p">)</span><span class="c">#yes</span>
</span><span class="line">    <span class="c"># print(node.__class_field21_) #no</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">_ListNode__class_field21_</span><span class="p">)</span><span class="c">#yes</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">__class_field22__</span><span class="p">)</span> <span class="c">#yes</span>
</span><span class="line">
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="nb">dir</span><span class="p">(</span><span class="n">APythonTestA</span><span class="p">))</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">APythonTestA</span><span class="o">.</span><span class="n">_class_field10</span><span class="p">)</span> <span class="c">#yes</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">APythonTestA</span><span class="o">.</span><span class="n">_class_field11_</span><span class="p">)</span> <span class="c">#yes</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">APythonTestA</span><span class="o">.</span><span class="n">_class_field12__</span><span class="p">)</span> <span class="c">#yes</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">APythonTestA</span><span class="o">.</span><span class="n">__class_field20</span><span class="p">)</span> <span class="c">#yes</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">APythonTestA</span><span class="o">.</span><span class="n">__class_field21_</span><span class="p">)</span> <span class="c">#yes</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">APythonTestA</span><span class="o">.</span><span class="n">__class_field22__</span><span class="p">)</span> <span class="c">#yes</span>
</span><span class="line">
</span><span class="line"><span class="c"># [&#39;_ListNode__class_field20&#39;, &#39;_ListNode__class_field21_&#39;, &#39;__class_field22__&#39;, &#39;__doc__&#39;, &#39;__init__&#39;, &#39;__module__&#39;, &#39;_class_field10&#39;, &#39;_class_field11_&#39;, &#39;_class_field12__&#39;]</span>
</span><span class="line"><span class="c"># node class field 1-0</span>
</span><span class="line"><span class="c"># node class field 1-1</span>
</span><span class="line"><span class="c"># node class field 1-2</span>
</span><span class="line"><span class="c"># node class field 2-0</span>
</span><span class="line"><span class="c"># node class field 2-1</span>
</span><span class="line"><span class="c"># node class field 2-2</span>
</span><span class="line"><span class="c"># [&#39;ListNode&#39;, &#39;__builtins__&#39;, &#39;__class_field20&#39;, &#39;__class_field21_&#39;, &#39;__class_field22__&#39;, &#39;__doc__&#39;, &#39;__file__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;_class_field10&#39;, &#39;_class_field11_&#39;, &#39;_class_field12__&#39;]</span>
</span><span class="line"><span class="c"># node class field 1-0</span>
</span><span class="line"><span class="c"># node class field 1-1</span>
</span><span class="line"><span class="c"># node class field 1-2</span>
</span><span class="line"><span class="c"># node class field 2-0</span>
</span><span class="line"><span class="c"># node class field 2-1</span>
</span><span class="line"><span class="c"># node class field 2-2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4.关于Python中函数的参数，摘自<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001374738449338c8a122a7f2e047899fc162f4a7205ea3000">廖雪峰的python教程</a></p>

<p>Python的函数具有非常灵活的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。
默认参数一定要用不可变对象，如果是可变对象，运行会有逻辑错误！</p>

<p>要注意定义可变参数和关键字参数的语法：</p>

<p><code>*args</code>是可变参数，args接收的是一个tuple；</p>

<p><code>**kw</code>是关键字参数，kw接收的是一个dict。</p>

<p>以及调用函数时如何传入可变参数和关键字参数的语法：</p>

<p>可变参数既可以直接传入：<code>func(1, 2, 3)</code>，又可以先组装list或tuple，再通过<code>*args</code>传入：<code>func(*(1, 2, 3))；</code></p>

<p>关键字参数既可以直接传入：<code>func(a=1, b=2)</code>，又可以先组装dict，再通过<code>**kw</code>传入：<code>func(**{'a': 1, 'b': 2})</code>。</p>

<p>使用<code>*args</code>和<code>**kw</code>是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。</p>

<p>5.关于Python的高级特性，参见<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013868196169906eb9ca5864384546bf3405ae6a172b3e000">廖雪峰的python教程</a></p>

<p>切片，迭代，列表生成式，生成器</p>

<p><strong>除非特殊的原因，应该经常在代码中使用生成器表达式。但除非是面对非常大的列表，否则是不会看出明显区别的。</strong></p>

<p>使用生成器得到当前目录及其子目录中的所有文件的代码，下面代码来自<a href="http://blog.jobbole.com/61171/">伯乐在线-python高级编程技巧</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">os</span>
</span><span class="line"><span class="k">def</span> <span class="nf">tree</span><span class="p">(</span><span class="n">top</span><span class="p">):</span>
</span><span class="line">    <span class="c">#path,folder list,file list</span>
</span><span class="line">    <span class="k">for</span> <span class="n">path</span><span class="p">,</span> <span class="n">names</span><span class="p">,</span> <span class="n">fnames</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="n">top</span><span class="p">):</span>
</span><span class="line">        <span class="k">for</span> <span class="n">fname</span> <span class="ow">in</span> <span class="n">fnames</span><span class="p">:</span>
</span><span class="line">            <span class="k">yield</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">fname</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">tree</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">()):</span>
</span><span class="line">    <span class="k">print</span> <span class="n">name</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>另一个使用生成器的代码示例：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">num</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="o">-</span><span class="mi">7</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">square_generator</span><span class="p">(</span><span class="n">optional_parameter</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span><span class="n">x</span> <span class="o">**</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">num</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="n">optional_parameter</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">square_generator</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line"><span class="c"># &lt;generator object &lt;genexpr&gt; at 0x004E6418&gt;</span>
</span><span class="line">
</span><span class="line"><span class="c"># Option I</span>
</span><span class="line"><span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">square_generator</span><span class="p">(</span><span class="mi">0</span><span class="p">):</span>
</span><span class="line">    <span class="k">print</span> <span class="n">k</span>
</span><span class="line"><span class="c"># 1, 16, 100, 4, 9</span>
</span><span class="line">
</span><span class="line"><span class="c"># Option II</span>
</span><span class="line"><span class="n">g</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">square_generator</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span><span class="line"><span class="k">print</span> <span class="n">g</span>
</span><span class="line"><span class="c"># [1, 16, 100, 4, 9]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>6.关于Python的函数式编程，参见<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386819866394c3f9efcd1a454b2a8c57933e976445c0000">廖雪峰的python教程</a>，讲解得很好</p>

<p>高阶函数(使用函数作为参数或者返回一个函数的函数称为<code>高阶函数</code>)，匿名函数(lambda)，装饰器(decorator)和偏函数</p>

<p>用来测试一个函数花费的运行时间的装饰器，当然你也可以使用其他的方式，比如<code>Timer</code>来得到运行时间。下面代码来自<a href="http://blog.jobbole.com/61171/">伯乐在线-python高级编程技巧</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">timethis</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&#39;&#39;&#39;</span>
</span><span class="line"><span class="sd">    Decorator that reports the execution time.</span>
</span><span class="line"><span class="sd">    &#39;&#39;&#39;</span>
</span><span class="line">    <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class="line">        <span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class="line">        <span class="n">result</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class="line">        <span class="n">end</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class="line">        <span class="k">print</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">__name__</span><span class="p">,</span> <span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">result</span>
</span><span class="line">    <span class="k">return</span> <span class="n">wrapper</span>
</span><span class="line">
</span><span class="line"><span class="nd">@timethis</span>
</span><span class="line"><span class="k">def</span> <span class="nf">countdown</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class="line">    <span class="k">while</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">        <span class="n">n</span> <span class="o">-=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>其中代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="nd">@timethis</span>
</span><span class="line"><span class="k">def</span> <span class="nf">countdown</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>就相当于：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">countdown</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class="line"><span class="o">...</span>
</span><span class="line"><span class="n">countdown</span> <span class="o">=</span> <span class="n">timethis</span><span class="p">(</span><span class="n">countdown</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>装饰器除了可以使用函数实现，也可以使用类来实现。</p>

<p><strong>对装饰器的类实现的唯一要求是它必须能如函数一般使用，也就是说它必须是可调用的。所以，如果想这么做这个类必须实现<code>__call__</code>方法。</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">decorator</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">f</span><span class="p">):</span>
</span><span class="line">        <span class="k">print</span><span class="p">(</span><span class="s">&quot;inside decorator.__init__()&quot;</span><span class="p">)</span>
</span><span class="line">        <span class="n">f</span><span class="p">()</span> <span class="c"># Prove that function definition has completed</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">print</span><span class="p">(</span><span class="s">&quot;inside decorator.__call__()&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nd">@decorator</span>
</span><span class="line"><span class="k">def</span> <span class="nf">function</span><span class="p">():</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="s">&quot;inside function()&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&quot;Finished decorating function()&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">function</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c"># inside decorator.__init__()</span>
</span><span class="line"><span class="c"># inside function()</span>
</span><span class="line"><span class="c"># Finished decorating function()</span>
</span><span class="line"><span class="c"># inside decorator.__call__()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>语法糖<code>@decorator</code>相当于<code>function=decorator(function)</code>，在此调用decorator的<code>__init__</code>打印<code>“inside decorator.__init__()”</code></li>
  <li>随后执行f()打印<code>“inside function()”</code></li>
  <li>随后执行<code>“print(“Finished decorating function()”)”</code></li>
  <li>最后再调用function函数时，由于使用装饰器包装，因此执行decorator的<code>__call__</code>打印 <code>“inside decorator.__call__()”</code>。</li>
</ol>

<p>==我的批注：我觉得上面代码不是一般的使用方式，实际装饰器类应该是在<code>__init__</code>方法中设置好自己内部的函数f，然后在方法<code>__call__</code>中调用函数f，并包含一些其他的方法调用，大概如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">decorator</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">f</span><span class="p">):</span>
</span><span class="line">        <span class="k">print</span><span class="p">(</span><span class="s">&quot;inside decorator.__init__()&quot;</span><span class="p">)</span>
</span><span class="line">        <span class="c"># f() # Prove that function definition has completed</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">f</span><span class="o">=</span><span class="n">f</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">print</span><span class="p">(</span><span class="s">&quot;inside decorator.__call__() begin&quot;</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">f</span><span class="p">()</span>
</span><span class="line">        <span class="k">print</span><span class="p">(</span><span class="s">&quot;inside decorator.__call__() end&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nd">@decorator</span>
</span><span class="line"><span class="k">def</span> <span class="nf">function</span><span class="p">():</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="s">&quot;inside function()&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&quot;Finished decorating function()&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">function</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c"># inside decorator.__init__()</span>
</span><span class="line"><span class="c"># Finished decorating function()</span>
</span><span class="line"><span class="c"># inside decorator.__call__() begin</span>
</span><span class="line"><span class="c"># inside function()</span>
</span><span class="line"><span class="c"># inside decorator.__call__() end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在提供一个装饰器的例子，实现自顶向下的带备忘录的DP算法来解决斐波那契数列求值，来源于<a href="http://link.springer.com/book/10.1007%2F978-1-4302-3238-4">Python Algorithms- Mastering Basic Algorithms in the Python Language</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">memo</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="n">cache</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line">    <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">wrap</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">args</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">cache</span><span class="p">:</span>
</span><span class="line">            <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span><span class="o">=</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">wrap</span>
</span><span class="line">
</span><span class="line"><span class="nd">@memo</span>
</span><span class="line"><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">:</span> <span class="k">return</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">return</span> <span class="n">fib</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="n">fib</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">fib</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/10/python-tips1/">http://hujiaweibujidao.github.io/blog/2014/05/10/python-tips1/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Algorithms - Dynamic Programming]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-dynamic-programming/"/>
    <updated>2014-05-08T23:30:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-dynamic-programming</id>
    <content type="html"><![CDATA[<p><strong><center>Python Algorithms Python算法系列</center></strong>
<strong><center>逸夫图书馆, 2014/5/18</center></strong></p>

<h3 id="centercenter"><center>动态规划</center></h3>

<p>参考内容：</p>

<p>1.<a href="http://link.springer.com/book/10.1007%2F978-1-4302-3238-4">Python Algorithms: Mastering Basic Algorithms in the Python Language</a></p>

<p>Chapter 8 Tangled Dependencies and Memoization</p>

<p>2.<a href="http://en.wikipedia.org/wiki/Introduction_to_Algorithms">算法导论</a></p>

<p>3.<a href="http://book.douban.com/subject/4875278/">算法设计、分析与实现从入门到精通</a></p>

<p>大家都知道，动态规划算法一般都有两种实现方式：</p>

<p><strong>1.直接自顶向下实现递归式，并将中间结果保存，这叫备忘录法；</strong></p>

<p><strong>2.将递归式翻转，自底向上地迭代，将结果保存在某个数据结构中。</strong></p>

<p>编程有一个原则<code>DRY=Don’t Repeat Yourself</code>，就是说你的代码不要重复来重复去的，这个原则同样可以用于理解动态规划，动态规划除了满足最优子结构，它还存在子问题重叠的性质，我们不能重复地去解决这些子问题，所以我们将子问题的解保存起来，类似缓存机制，之后遇到这个子问题时直接取出子问题的解。</p>

<p>举个简单的例子，斐波那契数列中的元素的计算，很简单，我们写下如下的代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">:</span> <span class="k">return</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">return</span> <span class="n">fib</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="n">fib</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>好，来测试下，运行<code>fib(10)</code>得到结果69，不错，速度也还行，换个大的数字，试试100，这时你会发现，这个程序执行不出结果了，为什么？递归太深了！要计算的子问题太多了！</p>

<p>所以，我们需要改进下，我们保存每次计算出来的子问题的解，用什么保存呢？用Python中的dict！那怎么实现保存子问题的解呢？用Python中的装饰器！</p>

<p>如果不是很了解Python的装饰器，可以快速看下<a href="http://hujiaweibujidao.github.io/blog/2014/05/10/python-tips1/">这篇总结中关于装饰器的解释：Python Basics</a></p>

<p>修改刚才的程序，得到如下代码，定义一个函数<code>memo</code>返回我们需要的装饰器，这里用<code>cache</code>保存子问题的解，key是方法的参数，也就是数字<code>n</code>，值就是<code>fib(n)</code>返回的解。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">memo</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="n">cache</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line">    <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">wrap</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">args</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">cache</span><span class="p">:</span>
</span><span class="line">            <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span><span class="o">=</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">wrap</span>
</span><span class="line">
</span><span class="line"><span class="nd">@memo</span>
</span><span class="line"><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">:</span> <span class="k">return</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">return</span> <span class="n">fib</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="n">fib</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>重新运行下<code>fib(100)</code>，你会发现这次很快就得到了结果<code>573147844013817084101</code>，这就是动态规划的威力，上面使用的是第一种带备忘录的递归实现方式。</p>

<p><strong>带备忘录的递归方式的优点就是易于理解，易于实现，代码简洁干净，运行速度也不错，直接从需要求解的问题出发，而且只计算需要求解的子问题，没有多余的计算。但是，它也有自己的缺点，因为是递归形式，所以有限的栈深度是它的硬伤，有些问题难免会出现栈溢出了。</strong></p>

<p>于是，迭代版本的实现方式就诞生了！</p>

<p><strong>迭代实现方式有2个好处：1.运行速度快，因为没有用栈去实现，也避免了栈溢出的情况；2.迭代实现的话可以不使用dict来进行缓存，而是使用其他的特殊cache结构，例如多维数组等更为高效的数据结构。</strong></p>

<p>那怎么把递归版本转变成迭代版本呢？</p>

<p><strong>这就是递归实现和迭代实现的重要区别：递归实现不需要去考虑计算顺序，只要给出问题，然后自顶向下去解就行；而迭代实现需要考虑计算顺序，并且顺序很重要，算法在运行的过程中要保证当前要计算的问题中的子问题的解已经是求解好了的。</strong></p>

<p>斐波那契数列的迭代版本很简单，就是按顺序来计算就行了，不解释，关键是你可以看到我们就用了3个简单变量就求解出来了，没有使用任何高级的数据结构，节省了大量的空间。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">fib_iter</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">n</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">:</span> <span class="k">return</span> <span class="mi">1</span>
</span><span class="line">    <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span>
</span><span class="line">    <span class="k">while</span> <span class="n">n</span><span class="o">&gt;=</span><span class="mi">2</span><span class="p">:</span>
</span><span class="line">        <span class="n">c</span><span class="o">=</span><span class="n">a</span><span class="o">+</span><span class="n">b</span>
</span><span class="line">        <span class="n">a</span><span class="o">=</span><span class="n">b</span>
</span><span class="line">        <span class="n">b</span><span class="o">=</span><span class="n">c</span>
</span><span class="line">        <span class="n">n</span><span class="o">=</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span>
</span><span class="line">    <span class="k">return</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>斐波那契数列的变种经常出现在上楼梯的走法问题中，每次只能走一个台阶或者两个台阶，广义上思考的话，<strong>动态规划也就是一个连续决策问题，到底当前这一步是选择它(走一步)还是不选择它(走两步)呢?</strong></p>

<p>其他问题也可以很快地变相思考发现它们其实是一样的，例如求二项式系数<code>C(n,k)</code>，杨辉三角(求从源点到目标点有多少种走法)等等问题。</p>

<p>二项式系数<code>C(n,k)</code>表示从n个中选k个，假设我们现在n个中的第1个，考虑是否选择它。如果选择它的话，那么我们还需要从剩下的n-1个中选k-1个，即<code>C(n-1,k-1)</code>；如果不选择它的话，我们需要从剩下的n-1中选k个，即<code>C(n-1,k)</code>。所以，<code>C(n,k)=C(n-1,k-1)+C(n-1,k)</code>。</p>

<p>结合前面的装饰器，我们很快便可以实现求二项式系数的递归实现代码，其中的<code>memo</code>函数完全没变，只是在函数<code>cnk</code>前面添加了<code>@memo</code>而已，就这么简单！</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">memo</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="n">cache</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line">    <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">wrap</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">args</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">cache</span><span class="p">:</span>
</span><span class="line">            <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span><span class="o">=</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">wrap</span>
</span><span class="line">
</span><span class="line"><span class="nd">@memo</span>
</span><span class="line"><span class="k">def</span> <span class="nf">cnk</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">k</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">k</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="mi">1</span> <span class="c">#the order of `if` should not change!!!</span>
</span><span class="line">    <span class="k">if</span> <span class="n">n</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">return</span> <span class="n">cnk</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">k</span><span class="p">)</span><span class="o">+</span><span class="n">cnk</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>它的迭代版本也比较简单，这里使用了<code>defaultdict</code>，略高级的数据结构，和dict不同的是，当查找的key不存在对应的value时，会返回一个默认的值，这个很有用，下面的代码可以看到。</p>

<p>如果不了解<code>defaultdict</code>的话可以看下<a href="http://blog.jobbole.com/65218/">这篇文章：Python中的高级数据结构</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span><span class="line">
</span><span class="line"><span class="n">n</span><span class="p">,</span><span class="n">k</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span><span class="mi">7</span>
</span><span class="line"><span class="n">C</span><span class="o">=</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span><span class="line"><span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class="line">    <span class="n">C</span><span class="p">[</span><span class="n">row</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span>
</span><span class="line">    <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class="line">        <span class="n">C</span><span class="p">[</span><span class="n">row</span><span class="p">,</span><span class="n">col</span><span class="p">]</span><span class="o">=</span><span class="n">C</span><span class="p">[</span><span class="n">row</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">col</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="n">C</span><span class="p">[</span><span class="n">row</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">col</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">C</span><span class="p">[</span><span class="n">n</span><span class="p">,</span><span class="n">k</span><span class="p">])</span> <span class="c">#120</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>杨辉三角大家都熟悉，在国外这个叫<code>Pascal Triangle</code>，它和二项式系数特别相似，看下图，除了两边的数字之外，里面的任何一个数字都是由它上面相邻的两个元素相加得到，想想<code>C(n,k)=C(n-1,k-1)+C(n-1,k)</code>不也就是这儿含义吗?</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/sanjiao.png" alt="image" /></p>

<p>所以说，顺序对于迭代版本的动态规划实现很重要，下面举个实例，用动态规划解决有向无环图的单源最短路径问题。假设有如下图所示的图，当然，我们看到的是这个有向无环图经过了拓扑排序之后的结果，从a到f的最短路径用灰色标明了。</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/dag_sp.png" alt="image" /></p>

<p>好，怎么实现呢? </p>

<p><strong>我们有两种思考方式：</strong></p>

<p><strong>1.”去哪里?”：我们顺向思维，首先假设从a点出发到所有其他点的距离都是无穷大，然后，按照拓扑排序的顺序，从a点出发，接着更新a点能够到达的其他的点的距离，那么就是b点和f点，b点的距离变成2，f点的距离变成9。因为这个有向无环图是经过了拓扑排序的，所以按照拓扑顺序访问一遍所有的点(到了目标点就可以停止了)就能够得到a点到所有已访问到的点的最短距离，也就是说，当到达哪个点的时候，我们就找到了从a点到该点的最短距离，拓扑排序保证了后面的点不会指向前面的点，所以访问到后面的点时不可能再更新它前面的点的最短距离！这种思维方式的代码实现就是迭代版本。</strong></p>

<p>这里涉及到了拓扑排序，我的博客中还没有讲解，所以下面的代码已经将输入的点进行了拓扑排序，待我更新了图算法那篇文章再来更新这里的代码，谅解。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">topsort</span><span class="p">(</span><span class="n">W</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="n">W</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">dag_sp</span><span class="p">(</span><span class="n">W</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">):</span>
</span><span class="line">    <span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="n">u</span><span class="p">:</span><span class="nb">float</span><span class="p">(</span><span class="s">&#39;inf&#39;</span><span class="p">)</span> <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">W</span><span class="p">}</span> <span class="c">#</span>
</span><span class="line">    <span class="n">d</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">topsort</span><span class="p">(</span><span class="n">W</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">u</span> <span class="o">==</span> <span class="n">t</span><span class="p">:</span> <span class="k">break</span>
</span><span class="line">        <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">W</span><span class="p">[</span><span class="n">u</span><span class="p">]:</span>
</span><span class="line">            <span class="n">d</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">v</span><span class="p">],</span> <span class="n">d</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">+</span> <span class="n">W</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">])</span>
</span><span class="line">    <span class="k">return</span> <span class="n">d</span><span class="p">[</span><span class="n">t</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="c">#邻接表</span>
</span><span class="line"><span class="n">W</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">:{</span><span class="mi">1</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">:</span><span class="mi">9</span><span class="p">},</span><span class="mi">1</span><span class="p">:{</span><span class="mi">2</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">:</span><span class="mi">6</span><span class="p">},</span><span class="mi">2</span><span class="p">:{</span><span class="mi">3</span><span class="p">:</span><span class="mi">7</span><span class="p">},</span><span class="mi">3</span><span class="p">:{</span><span class="mi">4</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">:</span><span class="mi">3</span><span class="p">},</span><span class="mi">4</span><span class="p">:{</span><span class="mi">5</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span><span class="mi">5</span><span class="p">:{}}</span>
</span><span class="line"><span class="n">s</span><span class="p">,</span><span class="n">t</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">dag_sp</span><span class="p">(</span><span class="n">W</span><span class="p">,</span><span class="n">s</span><span class="p">,</span><span class="n">t</span><span class="p">))</span> <span class="c">#7</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>用图来表示计算过程就是下面所示：</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/dag_sp_iter.png" alt="image" /></p>

<p><strong>2.”从哪里来?”：我们逆向思维，目标是要到f，那从a点经过哪个点到f点会近些呢?只能是求解从a点出发能够到达的那些点哪个距离f点更近，这里a点能够到达b点和f点，f点到f点距离是0，但是a到f点的距离是9，可能不是最近的路，所以还要看b点到f点有多近，看b点到f点有多近就是求解从b点出发能够到达的那些点哪个距离f点更近，所以又绕回来了，也就是递归下去，直到我们能够回答从a点经过哪个点到f点会更近。这种思维方式的代码实现就是递归版本。</strong></p>

<p>这种情况下，不需要输入是经过了拓扑排序的，所以你可以任意修改输入<code>W</code>中节点的顺序，结果都是一样的，而上面采用迭代实现方式必须要是拓扑排序了的，从中你就可以看出迭代版本和递归版本的区别了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
</span><span class="line"><span class="k">def</span> <span class="nf">memo</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="n">cache</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line">    <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">wrap</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">args</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">cache</span><span class="p">:</span>
</span><span class="line">            <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span><span class="o">=</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">            <span class="c"># print(&#39;cache {0} = {1}&#39;.format(args[0],cache[args]))</span>
</span><span class="line">        <span class="k">return</span> <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">wrap</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">rec_dag_sp</span><span class="p">(</span><span class="n">W</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">):</span>
</span><span class="line">    <span class="nd">@memo</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">d</span><span class="p">(</span><span class="n">u</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">u</span> <span class="o">==</span> <span class="n">t</span><span class="p">:</span> <span class="k">return</span> <span class="mi">0</span>
</span><span class="line">        <span class="k">return</span> <span class="nb">min</span><span class="p">(</span><span class="n">W</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">]</span><span class="o">+</span><span class="n">d</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">W</span><span class="p">[</span><span class="n">u</span><span class="p">])</span>
</span><span class="line">    <span class="k">return</span> <span class="n">d</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">#邻接表</span>
</span><span class="line"><span class="n">W</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">:{</span><span class="mi">1</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">:</span><span class="mi">9</span><span class="p">},</span><span class="mi">1</span><span class="p">:{</span><span class="mi">2</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">:</span><span class="mi">6</span><span class="p">},</span><span class="mi">2</span><span class="p">:{</span><span class="mi">3</span><span class="p">:</span><span class="mi">7</span><span class="p">},</span><span class="mi">3</span><span class="p">:{</span><span class="mi">4</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">:</span><span class="mi">3</span><span class="p">},</span><span class="mi">4</span><span class="p">:{</span><span class="mi">5</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span><span class="mi">5</span><span class="p">:{}}</span>
</span><span class="line"><span class="n">s</span><span class="p">,</span><span class="n">t</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">rec_dag_sp</span><span class="p">(</span><span class="n">W</span><span class="p">,</span><span class="n">s</span><span class="p">,</span><span class="n">t</span><span class="p">))</span> <span class="c">#7</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>用图来表示计算过程就是下面所示：</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/dag_sp_rec.png" alt="image" /></p>

<p>下面是参考内容1对DAG求单源最短路径的动态规划问题的总结，比较难理解，不知道我自己理解得对不对，可以忽视注释，:-)</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/dp_summary.png" alt="image" /></p>

<p>好，我们差不多搞清楚了动态规划的本质以及两种实现方式的优缺点，下面我们来实践下，举最常用的例子：矩阵链乘问题！</p>

<p>矩阵链乘问题的描述如下，就是说要确定一个完全加括号的形式使得需要进行的标量计算数目最少，矩阵$A<em>{i}$的维数为$p</em>{i-1}p_{i}$，如果穷举所有可能形式的话，时间复杂度是指数级的！因为该问题满足最优子结构，并且子问题存在重叠，所以我们要借助动态规划来求解。</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/matrix.png" alt="image" /></p>

<p>我们需要确定一个递归式来将我们要求解的问题表示出来，下面摘自算法导论，介绍地非常详细
<img src="http://hujiaweibujidao.github.io/images/algos/matrix2.png" alt="image" /></p>

<p>最后给出的递归式如下，就是说我们要如何确定从第i个矩阵到第j个矩阵组成的矩阵链的最优解。如果i和j相等，那么就是一个矩阵，不需要运算；如果i小于j，那么肯定要从它们中间的某个位置分开来，那从哪里分开来呢? 这个我们可以尝试下所有可能的选择，也就是尝试不同的位置k，k满足条件(i &lt;= k &lt; j)，在位置k将矩阵链进行分开，看看它需要的计算次数，然后我们从这些可能的k中选择使得计算次数最小的那个k进行分开，分开了之后我们的问题就变成了2个小问题，确定矩阵链从i到k
和另一个矩阵链从k+1到j的最优解。如果我们一开始设置i=1(第一个矩阵)，j=n(最后一个矩阵)，那么，经过上面的递归即可得到我们需要的解。这就是递归的思想！</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

m[i][j]= \left\{ 
  \begin{array}{l l}
    0 & \quad \text{if i=j }\\
    min_{i \le k < j}{m[i][k]+m[k+1][j]+p_{i-1}p_{k}p_{j}} & \quad \text{if i<j}
  \end{array} \right.
 %]]&gt;</script>

<p>根据上面的思想我们很快就可以写出一个递归版本的矩阵链承法的实现代码，输出的结果也没有错，给出的加括号的方式是<code>( ( A1 ( A2 A3 ) ) ( ( A4 A5 ) A6 ) )</code>。[问题的数据是算法导论中的问题的数据，值是<code>30,35,15,5,10,20,25</code>]。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">matrixchain_rec</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">i</span><span class="o">==</span><span class="n">j</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">):</span>
</span><span class="line">        <span class="n">q</span><span class="o">=</span><span class="n">matrixchain_rec</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">k</span><span class="p">)</span><span class="o">+</span><span class="n">matrixchain_rec</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="p">)</span><span class="o">+</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="n">p</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">*</span><span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">        <span class="k">if</span> <span class="n">q</span><span class="o">&lt;</span><span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]:</span>
</span><span class="line">            <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">q</span>
</span><span class="line">            <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">k</span>
</span><span class="line">    <span class="k">return</span> <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">showmatrixchain</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">i</span><span class="o">==</span><span class="n">j</span><span class="p">:</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;A</span><span class="si">%d</span><span class="s">&#39;</span><span class="o">%</span><span class="p">(</span><span class="n">i</span><span class="p">),</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;(&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="n">showmatrixchain</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span>
</span><span class="line">        <span class="n">showmatrixchain</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="p">)</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;)&#39;</span><span class="p">,</span>
</span><span class="line">
</span><span class="line"><span class="n">n</span><span class="o">=</span><span class="mi">6</span>
</span><span class="line"><span class="n">p</span><span class="o">=</span><span class="p">[</span><span class="mi">30</span><span class="p">,</span><span class="mi">35</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">25</span><span class="p">]</span>
</span><span class="line"><span class="n">m</span><span class="o">=</span><span class="p">[[</span><span class="n">sys</span><span class="o">.</span><span class="n">maxint</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
</span><span class="line"><span class="n">s</span><span class="o">=</span><span class="p">[[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
</span><span class="line"><span class="c"># pprint.pprint(m)</span>
</span><span class="line"><span class="n">result</span><span class="o">=</span><span class="n">matrixchain_rec</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="c">#15125</span>
</span><span class="line"><span class="n">showmatrixchain</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span> <span class="c">#( ( A1 ( A2 A3 ) ) ( ( A4 A5 ) A6 ) )</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的代码运行没有问题，但是，它不够完美！为什么呢? 很明显，矩阵链乘问题子问题存在重叠，下面这张图很形象地显示了哪些子问题被重复计算了，所以我们需要改进，改进的方法就是使用带备忘录的递归形式！</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/matrix3.png" alt="image" /></p>

<p>要改成带备忘录的很简单，我们实现过几次了，但是，这次我们不能直接使用原来的装饰器，因为Python中的dict不能对list对象进行hash，所以我们要简单地修改下我们key值的构建，也很简单，看下代码就明白了：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">memo</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="n">cache</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line">    <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">wrap</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class="line">        <span class="c">#build new key!!!</span>
</span><span class="line">        <span class="n">key</span><span class="o">=</span><span class="nb">str</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
</span><span class="line">        <span class="k">if</span> <span class="n">key</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">cache</span><span class="p">:</span>
</span><span class="line">            <span class="n">cache</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="o">=</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">cache</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">wrap</span>
</span><span class="line">
</span><span class="line"><span class="nd">@memo</span>
</span><span class="line"><span class="k">def</span> <span class="nf">matrixchain_rec</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">i</span><span class="o">==</span><span class="n">j</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">):</span>
</span><span class="line">        <span class="n">q</span><span class="o">=</span><span class="n">matrixchain_rec</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">k</span><span class="p">)</span><span class="o">+</span><span class="n">matrixchain_rec</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="p">)</span><span class="o">+</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="n">p</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">*</span><span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">        <span class="k">if</span> <span class="n">q</span><span class="o">&lt;</span><span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]:</span>
</span><span class="line">            <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">q</span>
</span><span class="line">            <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">k</span>
</span><span class="line">    <span class="k">return</span> <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">showmatrixchain</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">i</span><span class="o">==</span><span class="n">j</span><span class="p">:</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;A</span><span class="si">%d</span><span class="s">&#39;</span><span class="o">%</span><span class="p">(</span><span class="n">i</span><span class="p">),</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;(&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="n">showmatrixchain</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span>
</span><span class="line">        <span class="n">showmatrixchain</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="p">)</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;)&#39;</span><span class="p">,</span>
</span><span class="line">
</span><span class="line"><span class="n">n</span><span class="o">=</span><span class="mi">6</span>
</span><span class="line"><span class="n">p</span><span class="o">=</span><span class="p">[</span><span class="mi">30</span><span class="p">,</span><span class="mi">35</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">25</span><span class="p">]</span>
</span><span class="line"><span class="n">m</span><span class="o">=</span><span class="p">[[</span><span class="n">sys</span><span class="o">.</span><span class="n">maxint</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
</span><span class="line"><span class="n">s</span><span class="o">=</span><span class="p">[[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
</span><span class="line"><span class="c"># pprint.pprint(m)</span>
</span><span class="line"><span class="n">result</span><span class="o">=</span><span class="n">matrixchain_rec</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="c">#15125</span>
</span><span class="line"><span class="n">showmatrixchain</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span> <span class="c">#( ( A1 ( A2 A3 ) ) ( ( A4 A5 ) A6 ) )</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>接下来的一个问题是，我们怎么实现迭代版本呢? 迭代版本关键在于顺序！我们怎么保证我们在计算$A<em>{i…j}$的最优解时，所有可能的k的选择需要求解的子问题$A</em>{i…k}$以及$A_{(k+1)…j}$是已经求解出来了的呢? 一个简单但是有效的想法就是看矩阵链的长度，我们先计算矩阵链短的最优解，然后再计算矩阵链长的最优解，后者计算时所需要求解的子问题肯定已经求解完了，对不对? 于是就有了迭代版本的实现，需要注意的就是其中的i,j,k的取值范围。</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line"><span class="k">def</span> <span class="nf">matrixchain_iter</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
</span><span class="line">    <span class="n">n</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span> <span class="c">#total n matrices 6</span>
</span><span class="line">    <span class="c">#to solve the problem below, so initialize to n+1!!!</span>
</span><span class="line">    <span class="n">m</span><span class="o">=</span><span class="p">[[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
</span><span class="line">    <span class="n">s</span><span class="o">=</span><span class="p">[[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
</span><span class="line">    <span class="c"># for i in range(n): #for matrix with len=1</span>
</span><span class="line">        <span class="c"># m[i][i]=0</span>
</span><span class="line">    <span class="c"># pprint.pprint(m)</span>
</span><span class="line">    <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span> <span class="c">#iterate the length, max is n</span>
</span><span class="line">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="o">-</span><span class="n">l</span><span class="o">+</span><span class="mi">2</span><span class="p">):</span> <span class="c">#i max is n-l+1</span>
</span><span class="line">            <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="n">l</span><span class="o">-</span><span class="mi">1</span> <span class="c">#j is always l away from i</span>
</span><span class="line">            <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">maxint</span> <span class="c">#initial to infinity</span>
</span><span class="line">            <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">):</span>
</span><span class="line">                <span class="c">#attention to python array when index &lt; 0!!!</span>
</span><span class="line">                <span class="c">#solution is using more space with useless values</span>
</span><span class="line">                <span class="n">q</span><span class="o">=</span><span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">k</span><span class="p">]</span><span class="o">+</span><span class="n">m</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">+</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="n">p</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">*</span><span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">                <span class="k">if</span> <span class="n">q</span><span class="o">&lt;</span><span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]:</span>
</span><span class="line">                    <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">q</span>
</span><span class="line">                    <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">k</span>
</span><span class="line">        <span class="c"># print(&#39;when len is %d &#39; % (l))</span>
</span><span class="line">        <span class="c"># pprint.pprint(m)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">m</span><span class="p">,</span><span class="n">s</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">m</span><span class="p">,</span><span class="n">s</span><span class="o">=</span><span class="n">matrixchain_iter</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">6</span><span class="p">])</span> <span class="c">#15125</span>
</span><span class="line"><span class="n">showmatrixchain</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span> <span class="c">#( ( A1 ( A2 A3 ) ) ( ( A4 A5 ) A6 ) )</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>实现的时候需要注意一点，在Python中取list中的值时，如果索引是负值的话会从后面往前数返回对应的元素，而以前我们用其他语言的时候肯定是提示越界了，所以代码中用来存储结果的数数组是(n+1)x(n+1)，而不是nxn的，这样的话就能够保证返回的是0，而不是从后往前数得到的结果。</p>

<p>得到的数组<code>m</code>如下，<code>m[1,6]</code>就是我们需要的解。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="p">[[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
</span><span class="line"> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">15750</span><span class="p">,</span> <span class="mi">7875</span><span class="p">,</span> <span class="mi">9375</span><span class="p">,</span> <span class="mi">11875</span><span class="p">,</span> <span class="mi">15125</span><span class="p">],</span>
</span><span class="line"> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2625</span><span class="p">,</span> <span class="mi">4375</span><span class="p">,</span> <span class="mi">7125</span><span class="p">,</span> <span class="mi">10500</span><span class="p">],</span>
</span><span class="line"> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">750</span><span class="p">,</span> <span class="mi">2500</span><span class="p">,</span> <span class="mi">5375</span><span class="p">],</span>
</span><span class="line"> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="mi">3500</span><span class="p">],</span>
</span><span class="line"> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">5000</span><span class="p">],</span>
</span><span class="line"> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>数组<code>s</code>如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="p">[[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
</span><span class="line"> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
</span><span class="line"> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
</span><span class="line"> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
</span><span class="line"> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>
</span><span class="line"> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>
</span><span class="line"> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>将这个两个数组旋转下，并且只看上三角部分的数字，就可以得到算法导论中给出的那张三角图形了，非常类似杨辉三角</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/matrixmulti.png" alt="image" /></p>

<p>OK，希望我把动态规划将清楚了，总结下：<strong>动态规划其实就是一个连续决策的过程，每次决策我们可能有多种选择(二项式系数和0-1背包问题中我们只有两个选择，DAG图的单源最短路径中我们的选择要看点的出边或者入边，矩阵链乘问题中就是矩阵链可以分开的位置总数…)，我们每次选择最好的那个作为我们的决策。动态规划有2中实现方式，一种是带备忘录的递归形式，这种方式直接从原问题出发，遇到子问题就去求解子问题并存储子问题的解，下次遇到的时候直接取出来，问题求解的过程看起来就像是先自顶向下地展开问题，然后自下而上的进行决策。另一个实现方式是迭代方式，这种方式需要考虑如何给定一个子问题的求解方式，使得后面求解规模较大的问题是需要求解的子问题都已经求解好了，它的缺点就是可能有些子问题不要算但是它还是算了，而递归实现方式只会计算它需要求解的子问题。</strong></p>

<p>如果你感觉你有所顿悟，来试试写写最长公共子序列列吧，这篇文章中给出了Python版本的5种实现方式哟！</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-dynamic-programming/">http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-dynamic-programming/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Algorithms - Greedy]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-greedy/"/>
    <updated>2014-05-08T23:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-greedy</id>
    <content type="html"><![CDATA[<p><strong><center>Python Algorithms Python算法系列</center></strong>
<strong><center>逸夫图书馆, 2014/5/18</center></strong></p>

<h3 id="centercenter"><center>贪心算法</center></h3>

<p>参考内容：</p>

<p>1.<a href="http://link.springer.com/book/10.1007%2F978-1-4302-3238-4">Python Algorithms: Mastering Basic Algorithms in the Python Language</a></p>

<p>2.<a href="http://en.wikipedia.org/wiki/Introduction_to_Algorithms">算法导论</a></p>

<p>Todo</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-greedy/">http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-greedy/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Algorithms - Graphs]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-Graphs/"/>
    <updated>2014-05-08T22:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-Graphs</id>
    <content type="html"><![CDATA[<p><strong><center>Python Algorithms Python算法系列</center></strong>
<strong><center>逸夫图书馆, 2014/5/18</center></strong></p>

<h3 id="centercenter"><center>图算法</center></h3>

<p>参考内容：</p>

<p>1.<a href="http://interactivepython.org/courselib/static/pythonds/index.html">Problem Solving with Python</a></p>

<p>Chapter 7 Graphs</p>

<p>2.<a href="http://link.springer.com/book/10.1007%2F978-1-4302-3238-4">Python Algorithms: Mastering Basic Algorithms in the Python Language</a></p>

<p>Matchings, Cuts, and Flows</p>

<p>3.<a href="http://en.wikipedia.org/wiki/Introduction_to_Algorithms">算法导论</a></p>

<h4 id="section">图的总结</h4>

<p>Todo List</p>

<p>1.邻接矩阵和邻接表</p>

<p>2.DFS和BFS</p>

<p>3.DFS的应用：拓扑排序和有向无环图的强连通分量</p>

<p>4.最短路径：Dijkstra，Bellman-Ford，Floyd-Warshall等</p>

<p>5.最小生成树：Prim，Kruskal</p>

<p>6.网络流：最大流，最小割，二分图等</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-Graphs/">http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-Graphs/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Algorithms - Trees]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-Trees/"/>
    <updated>2014-05-08T20:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-Trees</id>
    <content type="html"><![CDATA[<p><strong><center>Python Algorithms Python算法系列</center></strong>
<strong><center>逸夫图书馆, 2014/5/8</center></strong></p>

<h3 id="centercenter"><center>树</center></h3>

<p>参考内容：</p>

<p>1.<a href="http://interactivepython.org/courselib/static/pythonds/index.html">Problem Solving with Python</a></p>

<p>Chapter 6 Trees and Tree Algorithms   </p>

<p>2.<a href="http://en.wikipedia.org/wiki/Introduction_to_Algorithms">算法导论</a></p>

<h4 id="section">树的总结</h4>

<p>1.二叉搜索树 <a href="http://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9">on_wiki</a>：一种特殊的二叉树，它满足下面的性质：任何一个节点的key值都比它左子树上的节点的key值要大，但是比它右子树上的节点的key值要小。节点查找，插入，删除等操作的时间复杂度都是$O(n)$</p>

<p>难点在于删除节点的操作(下面摘自wiki)：</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/bst_del_wiki.png" alt="image" /></p>

<p><strong>引用开始</strong> [一份不错的讲解<a href="http://www.cnblogs.com/Anker/archive/2013/01/28/2880581.html">来自博客园</a>]</p>

<hr />

<p>1.在二叉查找树中找某个节点的前驱和后继节点</p>

<p>给定一个二叉查找树中的结点，找出在中序遍历顺序下某个节点的前驱和后继。如果树中所有关键字都不相同，则某一结点x的前驱就是小于key[x]的所有关键字中最大的那个结点，后继即是大于key[x]中的所有关键字中最小的那个结点。根据二叉查找树的结构和性质，不用对关键字做任何比较，就可以找到某个结点的前驱和后继。</p>

<p>查找前驱步骤：先判断x是否有左子树，如果有则在left[x]中查找关键字最大的结点，即是x的前驱。如果没有左子树，则从x继续向上执行此操作，直到遇到某个结点是其父节点的右孩子结点，<strong>此时该父节点就是前驱</strong>。例如下图查找结点7的前驱结点6过程：</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/bst_pre.png" alt="image" /></p>

<p>伪代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="n">TREE_SUCCESSOR</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">right</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">!=</span> <span class="nb">NULL</span>
</span><span class="line">        <span class="n">then</span> <span class="k">return</span> <span class="n">TREE_MINMUM</span><span class="p">(</span><span class="n">right</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</span><span class="line">    <span class="n">y</span><span class="o">=</span><span class="n">parent</span><span class="p">[</span><span class="n">x</span><span class="p">]</span>
</span><span class="line">    <span class="k">while</span> <span class="n">y</span><span class="o">!=</span> <span class="nb">NULL</span> <span class="n">and</span> <span class="n">x</span> <span class="o">==</span><span class="n">left</span><span class="p">[</span><span class="n">y</span><span class="p">]</span>
</span><span class="line">           <span class="k">do</span> <span class="n">x</span> <span class="o">=</span> <span class="n">y</span>
</span><span class="line">              <span class="n">y</span><span class="o">=</span><span class="n">parent</span><span class="p">[</span><span class="n">y</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">y</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>查找后继步骤：先判断x是否有右子树，如果有则在right[x]中查找关键字最小的结点，即使x的后继。如果没有右子树，则从x的父节点开始向上查找，直到遇到某个结点是其父结点的左儿子的结点时为止，<strong>此时该父节点就是后继</strong>。例如下图查找结点13的后继结点15的过程：</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/bst_later.png" alt="image" /></p>

<p>伪代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="n">TREE_PROCESSOR</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">right</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">!=</span> <span class="nb">NULL</span>
</span><span class="line">        <span class="n">then</span> <span class="k">return</span> <span class="n">TREE_MINMUM</span><span class="p">(</span><span class="n">right</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</span><span class="line">    <span class="n">y</span><span class="o">=</span><span class="n">parent</span><span class="p">[</span><span class="n">x</span><span class="p">]</span>
</span><span class="line">    <span class="k">while</span> <span class="n">y</span><span class="o">!=</span> <span class="nb">NULL</span> <span class="n">and</span> <span class="n">x</span> <span class="o">==</span><span class="n">right</span><span class="p">[</span><span class="n">y</span><span class="p">]</span>
</span><span class="line">           <span class="k">do</span> <span class="n">x</span> <span class="o">=</span> <span class="n">y</span>
</span><span class="line">              <span class="n">y</span><span class="o">=</span><span class="n">parent</span><span class="p">[</span><span class="n">y</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">y</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.删除节点操作</p>

<p>(1)结点z没有左右子树，则修改其父节点p[z]，<strong>删除父节点对它的链接</strong>。</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/bst_del1.png" alt="image" /></p>

<p>(2)如果结点z只有一个子树（左子树或者右子树），通过在其子结点与父节点建立一条链接来删除z。</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/bst_del2.png" alt="image" /></p>

<p>(3)如果z有两个子女，则先删除z的后继y(y没有左孩子)，再用y的内容来替代z的内容。</p>

<p><strong>[博主提示：这里找到z的后继就是利用上面的查找后继的方法，根据wiki也可以是用z的前驱来替换。另外，删除后继和替换内容的操作其实也可以反过来，保证数据不丢失就行了]</strong></p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/bst_del3.png" alt="image" /></p>

<hr />

<p><strong>引用结束</strong></p>

<p><a href="http://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9">wiki</a>上的python代码实现节点删除操作，比后面的python代码更加简洁易懂</p>

<p>代码采用了递归的形式处理，相当于只需要考虑了要删除的节点就在当前位置该如何处理，然后，对于只有左孩子节点或者只有右孩子结点或者没有孩子节点的情况直接进行节点覆盖就行了，但是，对于复杂的第三种情况，在左右孩子节点都存在的情况下，只需从它的右孩子结点中找到最小的那个元素即为要删除节点的后继(同理，可以找到左孩子结点中找到最大的那个元素，即为要删除节点的前驱)，然后复制后继节点中的内容到要删除的节点，最后删除后继节点即可。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">find_min</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>   <span class="c"># Gets minimum node (leftmost leaf) in a subtree</span>
</span><span class="line">    <span class="n">current_node</span> <span class="o">=</span> <span class="bp">self</span>
</span><span class="line">    <span class="k">while</span> <span class="n">current_node</span><span class="o">.</span><span class="n">left_child</span><span class="p">:</span>
</span><span class="line">        <span class="n">current_node</span> <span class="o">=</span> <span class="n">current_node</span><span class="o">.</span><span class="n">left_child</span>
</span><span class="line">    <span class="k">return</span> <span class="n">current_node</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">replace_node_in_parent</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">new_value</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="p">:</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">left_child</span><span class="p">:</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">left_child</span> <span class="o">=</span> <span class="n">new_value</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">right_child</span> <span class="o">=</span> <span class="n">new_value</span>
</span><span class="line">    <span class="k">if</span> <span class="n">new_value</span><span class="p">:</span>
</span><span class="line">        <span class="n">new_value</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">binary_tree_delete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">key</span> <span class="o">&lt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">key</span><span class="p">:</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">left_child</span><span class="o">.</span><span class="n">binary_tree_delete</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class="line">    <span class="k">elif</span> <span class="n">key</span> <span class="o">&gt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">key</span><span class="p">:</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">right_child</span><span class="o">.</span><span class="n">binary_tree_delete</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span> <span class="c"># delete the key here</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">left_child</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">right_child</span><span class="p">:</span> <span class="c"># if both children are present</span>
</span><span class="line">            <span class="n">successor</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">right_child</span><span class="o">.</span><span class="n">find_min</span><span class="p">()</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">key</span> <span class="o">=</span> <span class="n">successor</span><span class="o">.</span><span class="n">key</span>
</span><span class="line">            <span class="n">successor</span><span class="o">.</span><span class="n">binary_tree_delete</span><span class="p">(</span><span class="n">successor</span><span class="o">.</span><span class="n">key</span><span class="p">)</span>
</span><span class="line">        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">left_child</span><span class="p">:</span>   <span class="c"># if the node has only a *left* child</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">replace_node_in_parent</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">left_child</span><span class="p">)</span>
</span><span class="line">        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">right_child</span><span class="p">:</span>  <span class="c"># if the node has only a *right* child</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">replace_node_in_parent</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">right_child</span><span class="p">)</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span> <span class="c"># this node has no children</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">replace_node_in_parent</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>参考内容1中在第三种情况下使用的是wiki中的第二种方案，并且是使用直接后继来代替要删除的节点。</p>

<p>二叉查找树的python完整实现见下面AVL树的完整实现(除去AVLTree即可)[参考内容1中的代码相当冗余，但是可读性蛮好，个人认为如果要实现删除节点操作的话建议参考wiki上python代码的实现，也可以查看参考内容1中对代码的详细解释加深理解]</p>

<p>如果原始的列表是基本有序的，那么得到的二叉树会变成一个扭曲的二叉树，性能就相当于一个链表了。</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/bst_worst.png" alt="image" /></p>

<p>8.平衡二叉查找树：为了避免得到前面提到的扭曲的二叉查找树，于是就有了平衡二叉查找树的概念。</p>

<p>AVL树是最先发明的平衡二叉树，它得名于它的发明者G.M. Adelson-Velsky和E.M. Landis，他们在1962年的论文《An algorithm for the organization of information》中发表了它。</p>

<p><a href="http://zh.wikipedia.org/wiki/AVL%E6%A0%91">on_wiki</a></p>

<p>AVL树的基本操作的实现</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/avl_operations.png" alt="image" /></p>

<p>如何进行旋转</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/avl_rotate.png" alt="image" /></p>

<p>旋转的实现描述</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/avl_rotatedetails.png" alt="image" /></p>

<p><a href="http://zhuyanfeng.com/archives/743">这篇文章对AVL树的讲解很好，并使用C++语言进行实现</a>以及<a href="http://zhuyanfeng.com/archives/716">另一篇文章</a></p>

<p><a href="http://interactivepython.org/courselib/static/pythonds/Trees/balanced.html">参考内容1关于AVL树的讲解</a> —&gt; <a href="http://hujiaweibujidao.github.io/files/avltree.pdf">如果访问较慢可以点击这里下载</a></p>

<p>(1)平衡因子：左子树与右子树的高度之差</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/avl_bf.png" alt="image" /></p>

<p>(2)分析为什么AVL树能够对查找，插入，删除操作都达到$O(logn)$的效率</p>

<p>推理当中关于斐波那契数列在N很大的时候后项与前项之商接近黄金分割比的内容可参见<a href="http://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B8">斐波那契数列on_wiki</a></p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/avl1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/201405/avl2.png" alt="image" /></p>

<p>(3)左旋，右旋以及左右旋和右左旋</p>

<p>左旋：如果新的根节点有左孩子结点，那么左孩子结点就成为原来的根节点的右孩子结点</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/avl_left.png" alt="image" /></p>

<p>右旋：如果新的根节点有右孩子结点，那么右孩子结点就成为原来的根节点的左孩子结点</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/avl_right.png" alt="image" /></p>

<p>一种特殊的情况，单一的左旋和右旋都不行，不停地重复交替，所以需要左右旋(或者右左旋)</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/avl_leftright.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/201405/avl_leftright2.png" alt="image" /></p>

<p>(4)如何在不重新计算子树的高度情况下修改旋转前的根节点和旋转后的根节点的平衡因子值</p>

<p>下面是左旋的例子</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/avl_rebal1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/201405/avl_rebal2.png" alt="image" /></p>

<p>python代码实现[参考内容1未给出完整代码，下面代码是我自己补充的，添加了测试，如果有误请回复我]</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
<span class="line-number">150</span>
<span class="line-number">151</span>
<span class="line-number">152</span>
<span class="line-number">153</span>
<span class="line-number">154</span>
<span class="line-number">155</span>
<span class="line-number">156</span>
<span class="line-number">157</span>
<span class="line-number">158</span>
<span class="line-number">159</span>
<span class="line-number">160</span>
<span class="line-number">161</span>
<span class="line-number">162</span>
<span class="line-number">163</span>
<span class="line-number">164</span>
<span class="line-number">165</span>
<span class="line-number">166</span>
<span class="line-number">167</span>
<span class="line-number">168</span>
<span class="line-number">169</span>
<span class="line-number">170</span>
<span class="line-number">171</span>
<span class="line-number">172</span>
<span class="line-number">173</span>
<span class="line-number">174</span>
<span class="line-number">175</span>
<span class="line-number">176</span>
<span class="line-number">177</span>
<span class="line-number">178</span>
<span class="line-number">179</span>
<span class="line-number">180</span>
<span class="line-number">181</span>
<span class="line-number">182</span>
<span class="line-number">183</span>
<span class="line-number">184</span>
<span class="line-number">185</span>
<span class="line-number">186</span>
<span class="line-number">187</span>
<span class="line-number">188</span>
<span class="line-number">189</span>
<span class="line-number">190</span>
<span class="line-number">191</span>
<span class="line-number">192</span>
<span class="line-number">193</span>
<span class="line-number">194</span>
<span class="line-number">195</span>
<span class="line-number">196</span>
<span class="line-number">197</span>
<span class="line-number">198</span>
<span class="line-number">199</span>
<span class="line-number">200</span>
<span class="line-number">201</span>
<span class="line-number">202</span>
<span class="line-number">203</span>
<span class="line-number">204</span>
<span class="line-number">205</span>
<span class="line-number">206</span>
<span class="line-number">207</span>
<span class="line-number">208</span>
<span class="line-number">209</span>
<span class="line-number">210</span>
<span class="line-number">211</span>
<span class="line-number">212</span>
<span class="line-number">213</span>
<span class="line-number">214</span>
<span class="line-number">215</span>
<span class="line-number">216</span>
<span class="line-number">217</span>
<span class="line-number">218</span>
<span class="line-number">219</span>
<span class="line-number">220</span>
<span class="line-number">221</span>
<span class="line-number">222</span>
<span class="line-number">223</span>
<span class="line-number">224</span>
<span class="line-number">225</span>
<span class="line-number">226</span>
<span class="line-number">227</span>
<span class="line-number">228</span>
<span class="line-number">229</span>
<span class="line-number">230</span>
<span class="line-number">231</span>
<span class="line-number">232</span>
<span class="line-number">233</span>
<span class="line-number">234</span>
<span class="line-number">235</span>
<span class="line-number">236</span>
<span class="line-number">237</span>
<span class="line-number">238</span>
<span class="line-number">239</span>
<span class="line-number">240</span>
<span class="line-number">241</span>
<span class="line-number">242</span>
<span class="line-number">243</span>
<span class="line-number">244</span>
<span class="line-number">245</span>
<span class="line-number">246</span>
<span class="line-number">247</span>
<span class="line-number">248</span>
<span class="line-number">249</span>
<span class="line-number">250</span>
<span class="line-number">251</span>
<span class="line-number">252</span>
<span class="line-number">253</span>
<span class="line-number">254</span>
<span class="line-number">255</span>
<span class="line-number">256</span>
<span class="line-number">257</span>
<span class="line-number">258</span>
<span class="line-number">259</span>
<span class="line-number">260</span>
<span class="line-number">261</span>
<span class="line-number">262</span>
<span class="line-number">263</span>
<span class="line-number">264</span>
<span class="line-number">265</span>
<span class="line-number">266</span>
<span class="line-number">267</span>
<span class="line-number">268</span>
<span class="line-number">269</span>
<span class="line-number">270</span>
<span class="line-number">271</span>
<span class="line-number">272</span>
<span class="line-number">273</span>
<span class="line-number">274</span>
<span class="line-number">275</span>
<span class="line-number">276</span>
<span class="line-number">277</span>
<span class="line-number">278</span>
<span class="line-number">279</span>
<span class="line-number">280</span>
<span class="line-number">281</span>
<span class="line-number">282</span>
<span class="line-number">283</span>
<span class="line-number">284</span>
<span class="line-number">285</span>
<span class="line-number">286</span>
<span class="line-number">287</span>
<span class="line-number">288</span>
<span class="line-number">289</span>
<span class="line-number">290</span>
<span class="line-number">291</span>
<span class="line-number">292</span>
<span class="line-number">293</span>
<span class="line-number">294</span>
<span class="line-number">295</span>
<span class="line-number">296</span>
<span class="line-number">297</span>
<span class="line-number">298</span>
<span class="line-number">299</span>
<span class="line-number">300</span>
<span class="line-number">301</span>
<span class="line-number">302</span>
<span class="line-number">303</span>
<span class="line-number">304</span>
<span class="line-number">305</span>
<span class="line-number">306</span>
<span class="line-number">307</span>
<span class="line-number">308</span>
<span class="line-number">309</span>
<span class="line-number">310</span>
<span class="line-number">311</span>
<span class="line-number">312</span>
<span class="line-number">313</span>
<span class="line-number">314</span>
<span class="line-number">315</span>
<span class="line-number">316</span>
<span class="line-number">317</span>
<span class="line-number">318</span>
<span class="line-number">319</span>
<span class="line-number">320</span>
<span class="line-number">321</span>
<span class="line-number">322</span>
<span class="line-number">323</span>
<span class="line-number">324</span>
<span class="line-number">325</span>
<span class="line-number">326</span>
<span class="line-number">327</span>
<span class="line-number">328</span>
<span class="line-number">329</span>
<span class="line-number">330</span>
<span class="line-number">331</span>
<span class="line-number">332</span>
<span class="line-number">333</span>
<span class="line-number">334</span>
<span class="line-number">335</span>
<span class="line-number">336</span>
<span class="line-number">337</span>
<span class="line-number">338</span>
<span class="line-number">339</span>
<span class="line-number">340</span>
<span class="line-number">341</span>
<span class="line-number">342</span>
<span class="line-number">343</span>
<span class="line-number">344</span>
<span class="line-number">345</span>
<span class="line-number">346</span>
<span class="line-number">347</span>
<span class="line-number">348</span>
<span class="line-number">349</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">TreeNode</span><span class="p">:</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">val</span><span class="p">,</span><span class="n">left</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span><span class="n">right</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span><span class="n">parent</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span><span class="n">balanceFactor</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">key</span> <span class="o">=</span> <span class="n">key</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">payload</span> <span class="o">=</span> <span class="n">val</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="n">left</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="n">right</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">parent</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">balanceFactor</span><span class="o">=</span><span class="n">balanceFactor</span><span class="p">;</span> <span class="c">#default new node balance factor is 0</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">hasLeftChild</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">leftChild</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">hasRightChild</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">rightChild</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">isLeftChild</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">leftChild</span> <span class="o">==</span> <span class="bp">self</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">isRightChild</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">==</span> <span class="bp">self</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">isRoot</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">isLeaf</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="ow">not</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">rightChild</span> <span class="ow">or</span> <span class="bp">self</span><span class="o">.</span><span class="n">leftChild</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">hasAnyChildren</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">rightChild</span> <span class="ow">or</span> <span class="bp">self</span><span class="o">.</span><span class="n">leftChild</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">hasBothChildren</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">rightChild</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">leftChild</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">replaceNodeData</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">value</span><span class="p">,</span><span class="n">lc</span><span class="p">,</span><span class="n">rc</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">key</span> <span class="o">=</span> <span class="n">key</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">payload</span> <span class="o">=</span> <span class="n">value</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="n">lc</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="n">rc</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">hasLeftChild</span><span class="p">():</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">leftChild</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="bp">self</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">hasRightChild</span><span class="p">():</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">rightChild</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="bp">self</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">BinarySearchTree</span><span class="p">:</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">root</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">length</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">inorder</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">node</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">leftChild</span><span class="p">:</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">inorder</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">leftChild</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">print_node</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">rightChild</span><span class="p">:</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">inorder</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">rightChild</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">levelorder</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">node</span><span class="p">):</span>
</span><span class="line">        <span class="n">nodes</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">        <span class="n">nodes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class="line">        <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">nodes</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">:</span>
</span><span class="line">            <span class="n">current_node</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">print_node</span><span class="p">(</span><span class="n">current_node</span><span class="p">)</span>
</span><span class="line">            <span class="k">if</span> <span class="n">current_node</span><span class="o">.</span><span class="n">leftChild</span><span class="p">:</span>
</span><span class="line">                <span class="n">nodes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">current_node</span><span class="o">.</span><span class="n">leftChild</span><span class="p">)</span>
</span><span class="line">            <span class="k">if</span> <span class="n">current_node</span><span class="o">.</span><span class="n">rightChild</span><span class="p">:</span>
</span><span class="line">                <span class="n">nodes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">current_node</span><span class="o">.</span><span class="n">rightChild</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">print_node</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">node</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">parent</span><span class="p">:</span>
</span><span class="line">            <span class="k">print</span><span class="p">([</span><span class="n">node</span><span class="o">.</span><span class="n">key</span><span class="p">,</span><span class="n">node</span><span class="o">.</span><span class="n">payload</span><span class="p">,</span><span class="n">node</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">key</span><span class="p">])</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="k">print</span><span class="p">([</span><span class="n">node</span><span class="o">.</span><span class="n">key</span><span class="p">,</span><span class="n">node</span><span class="o">.</span><span class="n">payload</span><span class="p">])</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">put</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">val</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="p">:</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">_put</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">val</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="p">)</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">root</span> <span class="o">=</span> <span class="n">TreeNode</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">val</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">_put</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">val</span><span class="p">,</span><span class="n">currentNode</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">key</span> <span class="o">&lt;</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">key</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">hasLeftChild</span><span class="p">():</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">_put</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">val</span><span class="p">,</span><span class="n">currentNode</span><span class="o">.</span><span class="n">leftChild</span><span class="p">)</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">currentNode</span><span class="o">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="n">TreeNode</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">val</span><span class="p">,</span><span class="n">parent</span><span class="o">=</span><span class="n">currentNode</span><span class="p">)</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">hasRightChild</span><span class="p">():</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">_put</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">val</span><span class="p">,</span><span class="n">currentNode</span><span class="o">.</span><span class="n">rightChild</span><span class="p">)</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">currentNode</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="n">TreeNode</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">val</span><span class="p">,</span><span class="n">parent</span><span class="o">=</span><span class="n">currentNode</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__setitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">key</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="p">:</span>
</span><span class="line">            <span class="n">res</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_get</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="p">)</span>
</span><span class="line">            <span class="k">if</span> <span class="n">res</span><span class="p">:</span>
</span><span class="line">                <span class="k">return</span> <span class="n">res</span><span class="o">.</span><span class="n">payload</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="k">return</span> <span class="bp">None</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="k">return</span> <span class="bp">None</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">_get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">currentNode</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="ow">not</span> <span class="n">currentNode</span><span class="p">:</span>
</span><span class="line">            <span class="k">return</span> <span class="bp">None</span>
</span><span class="line">        <span class="k">elif</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">key</span> <span class="o">==</span> <span class="n">key</span><span class="p">:</span>
</span><span class="line">            <span class="k">return</span> <span class="n">currentNode</span>
</span><span class="line">        <span class="k">elif</span> <span class="n">key</span> <span class="o">&lt;</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">key</span><span class="p">:</span>
</span><span class="line">            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_get</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">currentNode</span><span class="o">.</span><span class="n">leftChild</span><span class="p">)</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_get</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">currentNode</span><span class="o">.</span><span class="n">rightChild</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">key</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__contains__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">key</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_get</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="p">):</span>
</span><span class="line">            <span class="k">return</span> <span class="bp">True</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="k">return</span> <span class="bp">False</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">key</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">            <span class="n">nodeToRemove</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_get</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="p">)</span>
</span><span class="line">            <span class="k">if</span> <span class="n">nodeToRemove</span><span class="p">:</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">nodeToRemove</span><span class="p">)</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="k">raise</span> <span class="ne">KeyError</span><span class="p">(</span><span class="s">&#39;Error, key not in tree&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">key</span> <span class="o">==</span> <span class="n">key</span><span class="p">:</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">root</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="k">raise</span> <span class="ne">KeyError</span><span class="p">(</span><span class="s">&#39;Error, key not in tree&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__delitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">key</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">spliceOut</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">isLeaf</span><span class="p">():</span>
</span><span class="line">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">isLeftChild</span><span class="p">():</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">hasAnyChildren</span><span class="p">():</span>
</span><span class="line">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">hasLeftChild</span><span class="p">():</span>
</span><span class="line">                <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">isLeftChild</span><span class="p">():</span>
</span><span class="line">                    <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">leftChild</span>
</span><span class="line">                <span class="k">else</span><span class="p">:</span>
</span><span class="line">                    <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">leftChild</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">leftChild</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">isLeftChild</span><span class="p">():</span>
</span><span class="line">                    <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">rightChild</span>
</span><span class="line">                <span class="k">else</span><span class="p">:</span>
</span><span class="line">                    <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">rightChild</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">rightChild</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">findSuccessor</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="n">succ</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">hasRightChild</span><span class="p">():</span>
</span><span class="line">            <span class="n">succ</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">rightChild</span><span class="o">.</span><span class="n">findMin</span><span class="p">()</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="p">:</span>
</span><span class="line">                <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">isLeftChild</span><span class="p">():</span>
</span><span class="line">                    <span class="n">succ</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span>
</span><span class="line">                <span class="k">else</span><span class="p">:</span>
</span><span class="line">                    <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">                    <span class="n">succ</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">findSuccessor</span><span class="p">()</span>
</span><span class="line">                    <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="bp">self</span>
</span><span class="line">        <span class="k">return</span> <span class="n">succ</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">findMin</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="n">current</span> <span class="o">=</span> <span class="bp">self</span>
</span><span class="line">        <span class="k">while</span> <span class="n">current</span><span class="o">.</span><span class="n">hasLeftChild</span><span class="p">():</span>
</span><span class="line">            <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="n">leftChild</span>
</span><span class="line">        <span class="k">return</span> <span class="n">current</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">remove</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">currentNode</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">isLeaf</span><span class="p">():</span> <span class="c">#leaf</span>
</span><span class="line">            <span class="k">if</span> <span class="n">currentNode</span> <span class="o">==</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">leftChild</span><span class="p">:</span>
</span><span class="line">                <span class="n">currentNode</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">currentNode</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">        <span class="k">elif</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">hasBothChildren</span><span class="p">():</span> <span class="c">#interior</span>
</span><span class="line">            <span class="n">succ</span> <span class="o">=</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">findSuccessor</span><span class="p">()</span>
</span><span class="line">            <span class="n">succ</span><span class="o">.</span><span class="n">spliceOut</span><span class="p">()</span>
</span><span class="line">            <span class="n">currentNode</span><span class="o">.</span><span class="n">key</span> <span class="o">=</span> <span class="n">succ</span><span class="o">.</span><span class="n">key</span>
</span><span class="line">            <span class="n">currentNode</span><span class="o">.</span><span class="n">payload</span> <span class="o">=</span> <span class="n">succ</span><span class="o">.</span><span class="n">payload</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span> <span class="c"># this node has one child</span>
</span><span class="line">            <span class="k">if</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">hasLeftChild</span><span class="p">():</span>
</span><span class="line">                <span class="k">if</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">isLeftChild</span><span class="p">():</span>
</span><span class="line">                    <span class="n">currentNode</span><span class="o">.</span><span class="n">leftChild</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">parent</span>
</span><span class="line">                    <span class="n">currentNode</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">leftChild</span>
</span><span class="line">                <span class="k">elif</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">isRightChild</span><span class="p">():</span>
</span><span class="line">                    <span class="n">currentNode</span><span class="o">.</span><span class="n">leftChild</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">parent</span>
</span><span class="line">                    <span class="n">currentNode</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">leftChild</span>
</span><span class="line">                <span class="k">else</span><span class="p">:</span>
</span><span class="line">                    <span class="n">currentNode</span><span class="o">.</span><span class="n">replaceNodeData</span><span class="p">(</span><span class="n">currentNode</span><span class="o">.</span><span class="n">leftChild</span><span class="o">.</span><span class="n">key</span><span class="p">,</span>
</span><span class="line">                                                <span class="n">currentNode</span><span class="o">.</span><span class="n">leftChild</span><span class="o">.</span><span class="n">payload</span><span class="p">,</span>
</span><span class="line">                                                <span class="n">currentNode</span><span class="o">.</span><span class="n">leftChild</span><span class="o">.</span><span class="n">leftChild</span><span class="p">,</span>
</span><span class="line">                                                <span class="n">currentNode</span><span class="o">.</span><span class="n">leftChild</span><span class="o">.</span><span class="n">rightChild</span><span class="p">)</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="k">if</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">isLeftChild</span><span class="p">():</span>
</span><span class="line">                    <span class="n">currentNode</span><span class="o">.</span><span class="n">rightChild</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">parent</span>
</span><span class="line">                    <span class="n">currentNode</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">rightChild</span>
</span><span class="line">                <span class="k">elif</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">isRightChild</span><span class="p">():</span>
</span><span class="line">                    <span class="n">currentNode</span><span class="o">.</span><span class="n">rightChild</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">parent</span>
</span><span class="line">                    <span class="n">currentNode</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">rightChild</span>
</span><span class="line">                <span class="k">else</span><span class="p">:</span>
</span><span class="line">                    <span class="n">currentNode</span><span class="o">.</span><span class="n">replaceNodeData</span><span class="p">(</span><span class="n">currentNode</span><span class="o">.</span><span class="n">rightChild</span><span class="o">.</span><span class="n">key</span><span class="p">,</span>
</span><span class="line">                                                <span class="n">currentNode</span><span class="o">.</span><span class="n">rightChild</span><span class="o">.</span><span class="n">payload</span><span class="p">,</span>
</span><span class="line">                                                <span class="n">currentNode</span><span class="o">.</span><span class="n">rightChild</span><span class="o">.</span><span class="n">leftChild</span><span class="p">,</span>
</span><span class="line">                                                <span class="n">currentNode</span><span class="o">.</span><span class="n">rightChild</span><span class="o">.</span><span class="n">rightChild</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">AVLTree</span><span class="p">(</span><span class="n">BinarySearchTree</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="c"># def put(self,key,val):</span>
</span><span class="line">    <span class="c">#     if self.root:</span>
</span><span class="line">    <span class="c">#         self._put(key,val,self.root)</span>
</span><span class="line">    <span class="c">#     else:</span>
</span><span class="line">    <span class="c">#         self.root = TreeNode(key,val)</span>
</span><span class="line">    <span class="c">#         self.root.balanceFactor = 0</span>
</span><span class="line">    <span class="c">#     self.size = self.size + 1</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">_put</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">val</span><span class="p">,</span><span class="n">currentNode</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">key</span> <span class="o">&lt;</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">key</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">hasLeftChild</span><span class="p">():</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">_put</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">val</span><span class="p">,</span><span class="n">currentNode</span><span class="o">.</span><span class="n">leftChild</span><span class="p">)</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">currentNode</span><span class="o">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="n">TreeNode</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">val</span><span class="p">,</span><span class="n">parent</span><span class="o">=</span><span class="n">currentNode</span><span class="p">)</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">updateBalance</span><span class="p">(</span><span class="n">currentNode</span><span class="o">.</span><span class="n">leftChild</span><span class="p">)</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">hasRightChild</span><span class="p">():</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">_put</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">val</span><span class="p">,</span><span class="n">currentNode</span><span class="o">.</span><span class="n">rightChild</span><span class="p">)</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">currentNode</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="n">TreeNode</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">val</span><span class="p">,</span><span class="n">parent</span><span class="o">=</span><span class="n">currentNode</span><span class="p">)</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">updateBalance</span><span class="p">(</span><span class="n">currentNode</span><span class="o">.</span><span class="n">rightChild</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">updateBalance</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">node</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">balanceFactor</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="ow">or</span> <span class="n">node</span><span class="o">.</span><span class="n">balanceFactor</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">rebalance</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class="line">            <span class="k">return</span>
</span><span class="line">        <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">parent</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">isLeftChild</span><span class="p">():</span>
</span><span class="line">                <span class="n">node</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">balanceFactor</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">            <span class="k">elif</span> <span class="n">node</span><span class="o">.</span><span class="n">isRightChild</span><span class="p">():</span>
</span><span class="line">                <span class="n">node</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">balanceFactor</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class="line">            <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">balanceFactor</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">updateBalance</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">parent</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">rotateLeft</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">rotRoot</span><span class="p">):</span> <span class="c">#rotate left</span>
</span><span class="line">        <span class="n">newRoot</span> <span class="o">=</span> <span class="n">rotRoot</span><span class="o">.</span><span class="n">rightChild</span>
</span><span class="line">        <span class="n">rotRoot</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="n">newRoot</span><span class="o">.</span><span class="n">leftChild</span>
</span><span class="line">        <span class="k">if</span> <span class="n">newRoot</span><span class="o">.</span><span class="n">leftChild</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">            <span class="n">newRoot</span><span class="o">.</span><span class="n">leftChild</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">rotRoot</span>
</span><span class="line">        <span class="n">newRoot</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">rotRoot</span><span class="o">.</span><span class="n">parent</span>
</span><span class="line">        <span class="k">if</span> <span class="n">rotRoot</span><span class="o">.</span><span class="n">isRoot</span><span class="p">():</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">root</span> <span class="o">=</span> <span class="n">newRoot</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="n">rotRoot</span><span class="o">.</span><span class="n">isLeftChild</span><span class="p">():</span>
</span><span class="line">                <span class="n">rotRoot</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="n">newRoot</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">rotRoot</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="n">newRoot</span>
</span><span class="line">        <span class="n">newRoot</span><span class="o">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="n">rotRoot</span>
</span><span class="line">        <span class="n">rotRoot</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">newRoot</span>
</span><span class="line">        <span class="n">rotRoot</span><span class="o">.</span><span class="n">balanceFactor</span> <span class="o">=</span> <span class="n">rotRoot</span><span class="o">.</span><span class="n">balanceFactor</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">-</span> <span class="nb">min</span><span class="p">(</span><span class="n">newRoot</span><span class="o">.</span><span class="n">balanceFactor</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">        <span class="n">newRoot</span><span class="o">.</span><span class="n">balanceFactor</span> <span class="o">=</span> <span class="n">newRoot</span><span class="o">.</span><span class="n">balanceFactor</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="nb">max</span><span class="p">(</span><span class="n">rotRoot</span><span class="o">.</span><span class="n">balanceFactor</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">rotateRight</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">rotRoot</span><span class="p">):</span> <span class="c">#rotate right</span>
</span><span class="line">        <span class="n">newRoot</span> <span class="o">=</span> <span class="n">rotRoot</span><span class="o">.</span><span class="n">leftChild</span>
</span><span class="line">        <span class="n">rotRoot</span><span class="o">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="n">newRoot</span><span class="o">.</span><span class="n">rightChild</span> <span class="c"># deal child</span>
</span><span class="line">        <span class="k">if</span> <span class="n">newRoot</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">            <span class="n">newRoot</span><span class="o">.</span><span class="n">rightChild</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">rotRoot</span> <span class="c">#deal child parent</span>
</span><span class="line">        <span class="n">newRoot</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">rotRoot</span><span class="o">.</span><span class="n">parent</span> <span class="c">#deal root parent</span>
</span><span class="line">        <span class="k">if</span> <span class="n">rotRoot</span><span class="o">.</span><span class="n">isRoot</span><span class="p">():</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">root</span> <span class="o">=</span> <span class="n">newRoot</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="n">rotRoot</span><span class="o">.</span><span class="n">isLeftChild</span><span class="p">():</span>
</span><span class="line">                <span class="n">rotRoot</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="n">newRoot</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">rotRoot</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="n">newRoot</span>
</span><span class="line">        <span class="n">newRoot</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="n">rotRoot</span> <span class="c">#deal new root right child</span>
</span><span class="line">        <span class="n">rotRoot</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">newRoot</span> <span class="c">#deal old root parent</span>
</span><span class="line">        <span class="n">rotRoot</span><span class="o">.</span><span class="n">balanceFactor</span> <span class="o">=</span> <span class="n">rotRoot</span><span class="o">.</span><span class="n">balanceFactor</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="nb">min</span><span class="p">(</span><span class="n">newRoot</span><span class="o">.</span><span class="n">balanceFactor</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">        <span class="n">newRoot</span><span class="o">.</span><span class="n">balanceFactor</span> <span class="o">=</span> <span class="n">newRoot</span><span class="o">.</span><span class="n">balanceFactor</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">+</span> <span class="nb">max</span><span class="p">(</span><span class="n">rotRoot</span><span class="o">.</span><span class="n">balanceFactor</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">rebalance</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">node</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">balanceFactor</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">rightChild</span><span class="o">.</span><span class="n">balanceFactor</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">rotateRight</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">rightChild</span><span class="p">)</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">rotateLeft</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">rotateLeft</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class="line">        <span class="k">elif</span> <span class="n">node</span><span class="o">.</span><span class="n">balanceFactor</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">leftChild</span><span class="o">.</span><span class="n">balanceFactor</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">rotateLeft</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">leftChild</span><span class="p">)</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">rotateRight</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">rotateRight</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">#test code</span>
</span><span class="line"><span class="c"># test avl tree</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&#39;test avl&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">mytree</span> <span class="o">=</span> <span class="n">AVLTree</span><span class="p">()</span>
</span><span class="line"><span class="n">mytree</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="s">&quot;red&quot;</span>
</span><span class="line"><span class="n">mytree</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="s">&quot;blue&quot;</span>
</span><span class="line"><span class="n">mytree</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="s">&quot;yellow&quot;</span>
</span><span class="line"><span class="n">mytree</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="s">&quot;at&quot;</span>
</span><span class="line"><span class="n">mytree</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;dog&#39;</span>
</span><span class="line"><span class="n">mytree</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;cat&#39;</span>
</span><span class="line"><span class="n">mytree</span><span class="o">.</span><span class="n">levelorder</span><span class="p">(</span><span class="n">mytree</span><span class="o">.</span><span class="n">root</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># test bst</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&#39;test bst&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">mytree</span> <span class="o">=</span> <span class="n">BinarySearchTree</span><span class="p">()</span>
</span><span class="line"><span class="n">mytree</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="s">&quot;red&quot;</span>
</span><span class="line"><span class="n">mytree</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="s">&quot;blue&quot;</span>
</span><span class="line"><span class="n">mytree</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="s">&quot;yellow&quot;</span>
</span><span class="line"><span class="n">mytree</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="s">&quot;at&quot;</span>
</span><span class="line"><span class="n">mytree</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;dog&#39;</span>
</span><span class="line"><span class="n">mytree</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;cat&#39;</span>
</span><span class="line"><span class="n">mytree</span><span class="o">.</span><span class="n">levelorder</span><span class="p">(</span><span class="n">mytree</span><span class="o">.</span><span class="n">root</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># test avl</span>
</span><span class="line"><span class="c"># [4, &#39;blue&#39;]</span>
</span><span class="line"><span class="c"># [2, &#39;at&#39;, 4]</span>
</span><span class="line"><span class="c"># [6, &#39;yellow&#39;, 4]</span>
</span><span class="line"><span class="c"># [1, &#39;cat&#39;, 2]</span>
</span><span class="line"><span class="c"># [3, &#39;red&#39;, 2]</span>
</span><span class="line"><span class="c"># [5, &#39;dog&#39;, 6]</span>
</span><span class="line"><span class="c"># test bst</span>
</span><span class="line"><span class="c"># [3, &#39;red&#39;]</span>
</span><span class="line"><span class="c"># [2, &#39;at&#39;, 3]</span>
</span><span class="line"><span class="c"># [4, &#39;blue&#39;, 3]</span>
</span><span class="line"><span class="c"># [1, &#39;cat&#39;, 2]</span>
</span><span class="line"><span class="c"># [6, &#39;yellow&#39;, 4]</span>
</span><span class="line"><span class="c"># [5, &#39;dog&#39;, 6]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>对于我给定的测试数据，对应得到的二叉查找树和AVL树如下图所示，二叉查找树明显不平衡，AVL树中所有节点的平衡因子为0或者1，在构造的过程中，共发生了一次左旋和一次右旋。</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/bst_avl.png" alt="images" /></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-Trees/">http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-Trees/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Algorithms - Data Structures]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-datastructures/"/>
    <updated>2014-05-08T10:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-datastructures</id>
    <content type="html"><![CDATA[<p><strong><center>Python Algorithms Python算法系列</center></strong>
<strong><center>逸夫图书馆, 2014/5/8</center></strong></p>

<h3 id="centercenter"><center>数据结构</center></h3>

<p>参考内容：</p>

<p>1.<a href="http://interactivepython.org/courselib/static/pythonds/index.html">Problem Solving with Python</a></p>

<p>Chapter 2 Algorithm Analysis <br />
Chapter 3 Basic Data Structures <br />
Chapter 6 Trees and Tree Algorithms   </p>

<p>2.<a href="http://en.wikipedia.org/wiki/Introduction_to_Algorithms">算法导论</a></p>

<h4 id="section">数据结构总结</h4>

<p>1.Python内置数据结构的性能分析</p>

<p>(1)List</p>

<p>List的各个操作的时间复杂度</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/listoptime.png" alt="image" /></p>

<p>同样是执行1000次创建一个包含1-1000的列表，四种方式使用的时间差距很大！使用append比逐次增加要快很多，另外，使用python的列表产生式比append要快，而第四种方式更加快！</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">test1</span><span class="p">():</span>
</span><span class="line">   <span class="n">l</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">   <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1000</span><span class="p">):</span>
</span><span class="line">      <span class="n">l</span> <span class="o">=</span> <span class="n">l</span> <span class="o">+</span> <span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line"><span class="k">def</span> <span class="nf">test2</span><span class="p">():</span>
</span><span class="line">   <span class="n">l</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">   <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1000</span><span class="p">):</span>
</span><span class="line">      <span class="n">l</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class="line"><span class="k">def</span> <span class="nf">test3</span><span class="p">():</span>
</span><span class="line">   <span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1000</span><span class="p">)]</span>
</span><span class="line"><span class="k">def</span> <span class="nf">test4</span><span class="p">():</span>
</span><span class="line">   <span class="n">l</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1000</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="c"># Import the timeit module -&gt; import timeit</span>
</span><span class="line"><span class="c"># Import the Timer class defined in the module</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">timeit</span> <span class="kn">import</span> <span class="n">Timer</span>
</span><span class="line"><span class="c"># If the above line is excluded, you need to replace Timer with</span>
</span><span class="line"><span class="c"># timeit.Timer when defining a Timer object</span>
</span><span class="line"><span class="n">t1</span> <span class="o">=</span> <span class="n">Timer</span><span class="p">(</span><span class="s">&quot;test1()&quot;</span><span class="p">,</span> <span class="s">&quot;from __main__ import test1&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&quot;concat &quot;</span><span class="p">,</span><span class="n">t1</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">number</span><span class="o">=</span><span class="mi">1000</span><span class="p">),</span> <span class="s">&quot;milliseconds&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">t2</span> <span class="o">=</span> <span class="n">Timer</span><span class="p">(</span><span class="s">&quot;test2()&quot;</span><span class="p">,</span> <span class="s">&quot;from __main__ import test2&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&quot;append &quot;</span><span class="p">,</span><span class="n">t2</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">number</span><span class="o">=</span><span class="mi">1000</span><span class="p">),</span> <span class="s">&quot;milliseconds&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">t3</span> <span class="o">=</span> <span class="n">Timer</span><span class="p">(</span><span class="s">&quot;test3()&quot;</span><span class="p">,</span> <span class="s">&quot;from __main__ import test3&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&quot;comprehension &quot;</span><span class="p">,</span><span class="n">t3</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">number</span><span class="o">=</span><span class="mi">1000</span><span class="p">),</span> <span class="s">&quot;milliseconds&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">t4</span> <span class="o">=</span> <span class="n">Timer</span><span class="p">(</span><span class="s">&quot;test4()&quot;</span><span class="p">,</span> <span class="s">&quot;from __main__ import test4&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&quot;list range &quot;</span><span class="p">,</span><span class="n">t4</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">number</span><span class="o">=</span><span class="mi">1000</span><span class="p">),</span> <span class="s">&quot;milliseconds&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># (&#39;concat &#39;, 1.7890608310699463, &#39;milliseconds&#39;)</span>
</span><span class="line"><span class="c"># (&#39;append &#39;, 0.13796091079711914, &#39;milliseconds&#39;)</span>
</span><span class="line"><span class="c"># (&#39;comprehension &#39;, 0.05671119689941406, &#39;milliseconds&#39;)</span>
</span><span class="line"><span class="c"># (&#39;list range &#39;, 0.014147043228149414, &#39;milliseconds&#39;)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>timeit</code>模块的解释：</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/timeit.png" alt="image" /></p>

<p>测试pop操作：从结果可以看出，pop最后一个元素的效率远远高于pop第一个元素</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">x</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">2000000</span><span class="p">))</span>
</span><span class="line"><span class="n">pop_zero</span> <span class="o">=</span> <span class="n">Timer</span><span class="p">(</span><span class="s">&quot;x.pop(0)&quot;</span><span class="p">,</span><span class="s">&quot;from __main__ import x&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&quot;pop_zero &quot;</span><span class="p">,</span><span class="n">pop_zero</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">number</span><span class="o">=</span><span class="mi">1000</span><span class="p">),</span> <span class="s">&quot;milliseconds&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">x</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">2000000</span><span class="p">))</span>
</span><span class="line"><span class="n">pop_end</span> <span class="o">=</span> <span class="n">Timer</span><span class="p">(</span><span class="s">&quot;x.pop()&quot;</span><span class="p">,</span><span class="s">&quot;from __main__ import x&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&quot;pop_end &quot;</span><span class="p">,</span><span class="n">pop_end</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">number</span><span class="o">=</span><span class="mi">1000</span><span class="p">),</span> <span class="s">&quot;milliseconds&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># (&#39;pop_zero &#39;, 1.9101738929748535, &#39;milliseconds&#39;)</span>
</span><span class="line"><span class="c"># (&#39;pop_end &#39;, 0.00023603439331054688, &#39;milliseconds&#39;)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(2)Dictionary</p>

<p>Dictionary的各个操作的性能</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/dictionary.png" alt="image" /></p>

<p>Dictionary和List的性能比较：list基本上随着其元素的数目呈线性增长，而dictionary一直维持在很短很短的时间内(我的机子测试的结果都是<code>0.001ms</code>)。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">timeit</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">random</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10000</span><span class="p">,</span><span class="mi">1000001</span><span class="p">,</span><span class="mi">20000</span><span class="p">):</span>
</span><span class="line">    <span class="n">t</span> <span class="o">=</span> <span class="n">timeit</span><span class="o">.</span><span class="n">Timer</span><span class="p">(</span><span class="s">&quot;random.randrange(</span><span class="si">%d</span><span class="s">) in x&quot;</span><span class="o">%</span><span class="n">i</span><span class="p">,</span><span class="s">&quot;from __main__ import random,x&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">x</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
</span><span class="line">    <span class="n">lst_time</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">number</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>
</span><span class="line">    <span class="n">x</span> <span class="o">=</span> <span class="p">{</span><span class="n">j</span><span class="p">:</span><span class="bp">None</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">)}</span>
</span><span class="line">    <span class="n">d_time</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">number</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%d</span><span class="s">,</span><span class="si">%10.3f</span><span class="s">,</span><span class="si">%10.3f</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">lst_time</span><span class="p">,</span> <span class="n">d_time</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>结果图</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/compare.png" alt="image" /></p>

<p>2.栈：LIFO结构，后进先出</p>

<p>栈能解决的问题很多，比如逆波兰表达式求值，得到一个十进制数的二进制表达，检查括号匹配问题以及图的深度搜索等等，都很简单，可查看参考内容1学习。</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/stack.png" alt="image" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># Completed implementation of a stack ADT</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Stack</span><span class="p">:</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">       <span class="bp">self</span><span class="o">.</span><span class="n">items</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">is_empty</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">       <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">items</span> <span class="o">==</span> <span class="p">[]</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">push</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class="line">       <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">pop</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">       <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">peek</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">       <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">size</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">       <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">s</span> <span class="o">=</span> <span class="n">Stack</span><span class="p">()</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">is_empty</span><span class="p">())</span>
</span><span class="line"><span class="n">s</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class="line"><span class="n">s</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="s">&#39;dog&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">peek</span><span class="p">())</span>
</span><span class="line"><span class="n">s</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">size</span><span class="p">())</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">is_empty</span><span class="p">())</span>
</span><span class="line"><span class="n">s</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mf">8.4</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">size</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.队列：FIFO结构，先进先出</p>

<p>队列一般用于解决需要优先队列的问题或者进行广度优先搜索的问题，也很简单。</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/queue.png" alt="image" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># Completed implementation of a queue ADT</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Queue</span><span class="p">:</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">      <span class="bp">self</span><span class="o">.</span><span class="n">items</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">is_empty</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">      <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">items</span> <span class="o">==</span> <span class="p">[]</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">enqueue</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class="line">      <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">item</span><span class="p">)</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">dequeue</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">      <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">size</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">      <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">q</span> <span class="o">=</span> <span class="n">Queue</span><span class="p">()</span>
</span><span class="line"><span class="n">q</span><span class="o">.</span><span class="n">enqueue</span><span class="p">(</span><span class="s">&#39;hello&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">q</span><span class="o">.</span><span class="n">enqueue</span><span class="p">(</span><span class="s">&#39;dog&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="o">.</span><span class="n">items</span><span class="p">)</span>
</span><span class="line"><span class="n">q</span><span class="o">.</span><span class="n">enqueue</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="n">q</span><span class="o">.</span><span class="n">dequeue</span><span class="p">()</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="o">.</span><span class="n">items</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4.双向队列：左右两边都可以插入和删除的队列</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/deque.png" alt="image" /></p>

<p>下面的实现是以右端为front，左端为rear</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># Completed implementation of a deque ADT</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Deque</span><span class="p">:</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">      <span class="bp">self</span><span class="o">.</span><span class="n">items</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">is_empty</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">      <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">items</span> <span class="o">==</span> <span class="p">[]</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">add_front</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class="line">       <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">add_rear</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class="line">      <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">item</span><span class="p">)</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">remove_front</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">      <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">remove_rear</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">      <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">size</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">      <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">dq</span><span class="o">=</span><span class="n">Deque</span><span class="p">();</span>
</span><span class="line"><span class="n">dq</span><span class="o">.</span><span class="n">add_front</span><span class="p">(</span><span class="s">&#39;dog&#39;</span><span class="p">);</span>
</span><span class="line"><span class="n">dq</span><span class="o">.</span><span class="n">add_rear</span><span class="p">(</span><span class="s">&#39;cat&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">dq</span><span class="o">.</span><span class="n">items</span><span class="p">)</span>
</span><span class="line"><span class="n">dq</span><span class="o">.</span><span class="n">remove_front</span><span class="p">();</span>
</span><span class="line"><span class="n">dq</span><span class="o">.</span><span class="n">add_front</span><span class="p">(</span><span class="s">&#39;pig&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">dq</span><span class="o">.</span><span class="n">items</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>5.二叉树：一个节点最多有两个孩子节点的树。如果是从0索引开始存储，那么对应于节点p的孩子节点是2p+1和2p+2两个节点，相反，节点p的父亲节点是(p-1)/2位置上的点</p>

<p>二叉树的应用很多，比如对算术表达式建立一颗二叉树可以清楚看出表达式是如何计算的(详情请见参考内容1)，二叉树的变种可以得到其他的有一定特性的数据结构，例如后面的二叉堆。二叉树的三种遍历方法(前序，中序，后序)同样有很多的应用，比较简单，略过。</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/bt2.png" alt="image" /></p>

<p>第一种，直接使用list来实现二叉树，可读性差</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">binary_tree</span><span class="p">(</span><span class="n">r</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="p">[</span><span class="n">r</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[]]</span>
</span><span class="line"><span class="k">def</span> <span class="nf">insert_left</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">new_branch</span><span class="p">):</span>
</span><span class="line">    <span class="n">t</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">        <span class="c">#new_branch becomes the left node of root, and original left</span>
</span><span class="line">        <span class="c">#node t becomes left node of new_branch, right node is none</span>
</span><span class="line">        <span class="n">root</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="n">new_branch</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="p">[]])</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="n">root</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="n">new_branch</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[]])</span>
</span><span class="line">    <span class="k">return</span> <span class="n">root</span>
</span><span class="line"><span class="k">def</span> <span class="nf">insert_right</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">new_branch</span><span class="p">):</span>
</span><span class="line">    <span class="n">t</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">        <span class="n">root</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="n">new_branch</span><span class="p">,</span> <span class="p">[],</span> <span class="n">t</span><span class="p">])</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="n">root</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="n">new_branch</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[]])</span>
</span><span class="line">    <span class="k">return</span> <span class="n">root</span>
</span><span class="line"><span class="k">def</span> <span class="nf">get_root_val</span><span class="p">(</span><span class="n">root</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="n">root</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line"><span class="k">def</span> <span class="nf">set_root_val</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">new_val</span><span class="p">):</span>
</span><span class="line">    <span class="n">root</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">new_val</span>
</span><span class="line"><span class="k">def</span> <span class="nf">get_left_child</span><span class="p">(</span><span class="n">root</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="n">root</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line"><span class="k">def</span> <span class="nf">get_right_child</span><span class="p">(</span><span class="n">root</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="n">root</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">r</span> <span class="o">=</span> <span class="n">binary_tree</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="n">insert_left</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span><span class="line"><span class="n">insert_left</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class="line"><span class="n">insert_right</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
</span><span class="line"><span class="n">insert_right</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span><span class="line"><span class="n">l</span> <span class="o">=</span> <span class="n">get_left_child</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
</span><span class="line"><span class="n">set_root_val</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span><span class="line"><span class="n">insert_left</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="mi">11</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">get_right_child</span><span class="p">(</span><span class="n">get_right_child</span><span class="p">(</span><span class="n">r</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>第二种，使用类的形式定义二叉树，可读性更好</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/btclass.png" alt="image" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">BinaryTree</span><span class="p">:</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">key</span> <span class="o">=</span> <span class="n">root</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">left_child</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">right_child</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">insert_left</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">new_node</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">left_child</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">left_child</span> <span class="o">=</span> <span class="n">BinaryTree</span><span class="p">(</span><span class="n">new_node</span><span class="p">)</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="n">t</span> <span class="o">=</span> <span class="n">BinaryTree</span><span class="p">(</span><span class="n">new_node</span><span class="p">)</span>
</span><span class="line">            <span class="n">t</span><span class="o">.</span><span class="n">left_child</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">left_child</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">left_child</span> <span class="o">=</span> <span class="n">t</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">insert_right</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">new_node</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">right_child</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">right_child</span> <span class="o">=</span> <span class="n">BinaryTree</span><span class="p">(</span><span class="n">new_node</span><span class="p">)</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="n">t</span> <span class="o">=</span> <span class="n">BinaryTree</span><span class="p">(</span><span class="n">new_node</span><span class="p">)</span>
</span><span class="line">            <span class="n">t</span><span class="o">.</span><span class="n">right_child</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">right_child</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">right_child</span> <span class="o">=</span> <span class="n">t</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get_right_child</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">right_child</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get_left_child</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">left_child</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">set_root_val</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">obj</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">key</span> <span class="o">=</span> <span class="n">obj</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get_root_val</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">key</span>
</span><span class="line">
</span><span class="line"><span class="n">r</span> <span class="o">=</span> <span class="n">BinaryTree</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">get_root_val</span><span class="p">())</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">get_left_child</span><span class="p">())</span>
</span><span class="line"><span class="n">r</span><span class="o">.</span><span class="n">insert_left</span><span class="p">(</span><span class="s">&#39;b&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">get_left_child</span><span class="p">())</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">get_left_child</span><span class="p">()</span><span class="o">.</span><span class="n">get_root_val</span><span class="p">())</span>
</span><span class="line"><span class="n">r</span><span class="o">.</span><span class="n">insert_right</span><span class="p">(</span><span class="s">&#39;c&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">get_right_child</span><span class="p">())</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">get_right_child</span><span class="p">()</span><span class="o">.</span><span class="n">get_root_val</span><span class="p">())</span>
</span><span class="line"><span class="n">r</span><span class="o">.</span><span class="n">get_right_child</span><span class="p">()</span><span class="o">.</span><span class="n">set_root_val</span><span class="p">(</span><span class="s">&#39;hello&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">get_right_child</span><span class="p">()</span><span class="o">.</span><span class="n">get_root_val</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>6.二叉堆：根据堆的性质又可以分为最小堆和最大堆，是一种非常好的优先队列。在最小堆中孩子节点一定大于等于其父亲节点，最大堆反之。二叉堆实际上一棵完全二叉树，并且满足堆的性质。对于插入和查找操作的时间复杂度度都是$O(nlogn)$。</p>

<p>它的插入操作图示：</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/heapinsert.png" alt="image" /></p>

<p>去除根节点的操作图示：</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/heapdel.png" alt="image" /></p>

<p>注意，下面的实现中默认在初始的堆列表中插入了一个元素0，这样做可以保证堆的真实有效的元素个数和current_size值对应，而且最后一个元素的索引就对应了current_size。</p>

<p>此外，从list中建堆的过程需要从最后一个非叶子节点开始到第一个非叶子节点(根节点)进行。这篇文章<a href="http://www.cnblogs.com/Anker/archive/2013/01/23/2873422.html">来自博客园</a>解释了这个问题。建堆的过程如下：[下图摘自原博客，版权归原作者，谢谢]</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/heapbuild.png" alt="image" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">BinHeap</span><span class="p">:</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">current_size</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">perc_up</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">i</span><span class="p">):</span>
</span><span class="line">        <span class="k">while</span> <span class="n">i</span> <span class="o">//</span> <span class="mi">2</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span> <span class="c"># &gt;0 means this node is still available</span>
</span><span class="line">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="n">i</span> <span class="o">//</span> <span class="mi">2</span><span class="p">]:</span>
</span><span class="line">                <span class="n">tmp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="n">i</span> <span class="o">//</span> <span class="mi">2</span><span class="p">]</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="n">i</span> <span class="o">//</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span>
</span><span class="line">            <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">//</span> <span class="mi">2</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">current_size</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">current_size</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">perc_up</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">current_size</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">perc_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">i</span><span class="p">):</span>
</span><span class="line">        <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="bp">self</span><span class="o">.</span><span class="n">current_size</span><span class="p">:</span>
</span><span class="line">            <span class="n">mc</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">min_child</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="n">mc</span><span class="p">]:</span>
</span><span class="line">                <span class="n">tmp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="n">mc</span><span class="p">]</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="n">mc</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span>
</span><span class="line">            <span class="n">i</span> <span class="o">=</span> <span class="n">mc</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">min_child</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">i</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">current_size</span><span class="p">:</span>
</span><span class="line">            <span class="k">return</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">2</span><span class="p">]</span> <span class="o">&lt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]:</span>
</span><span class="line">                <span class="k">return</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="k">return</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">del_min</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="n">ret_val</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">current_size</span><span class="p">]</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">current_size</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">current_size</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">perc_down</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">ret_val</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">build_heap</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">a_list</span><span class="p">):</span>
</span><span class="line">        <span class="n">i</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">current_size</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">a_list</span><span class="p">[:]</span> <span class="c">#append original list</span>
</span><span class="line">        <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">):</span>
</span><span class="line">            <span class="c">#build the heap we only need to deal the first part!</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">perc_down</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">            <span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="n">a_list</span><span class="o">=</span><span class="p">[</span><span class="mi">9</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span><span class="line"><span class="n">bh</span><span class="o">=</span><span class="n">BinHeap</span><span class="p">();</span>
</span><span class="line"><span class="n">bh</span><span class="o">.</span><span class="n">build_heap</span><span class="p">(</span><span class="n">a_list</span><span class="p">);</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">bh</span><span class="o">.</span><span class="n">heap_list</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">bh</span><span class="o">.</span><span class="n">current_size</span><span class="p">)</span>
</span><span class="line"><span class="n">bh</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class="line"><span class="n">bh</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">bh</span><span class="o">.</span><span class="n">heap_list</span><span class="p">)</span>
</span><span class="line"><span class="n">bh</span><span class="o">.</span><span class="n">del_min</span><span class="p">();</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">bh</span><span class="o">.</span><span class="n">heap_list</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">bh</span><span class="o">.</span><span class="n">current_size</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>关于二叉查找树等内容请见<a href="http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-Trees/">树的总结</a>。</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-datastructures/">http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-datastructures/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Algorithms - Sort]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/07/python-algorithms-sort/"/>
    <updated>2014-05-07T22:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/07/python-algorithms-sort</id>
    <content type="html"><![CDATA[<p><strong><center>Python Algorithms Python算法系列</center></strong>
<strong><center>逸夫图书馆, 2014/5/7</center></strong></p>

<h3 id="centercenter"><center>排序</center></h3>

<p>参考内容：</p>

<p>1.<a href="http://interactivepython.org/courselib/static/pythonds/index.html">Problem Solving with Python</a></p>

<p>Chapter5: Search and Sorting <a href="http://interactivepython.org/courselib/static/pythonds/SortSearch/sorting.html">online_link</a></p>

<p>2.<a href="http://en.wikipedia.org/wiki/Introduction_to_Algorithms">算法导论</a></p>

<h4 id="section">排序总结</h4>

<p>1.冒泡排序(bubble sort)：每个回合都从第一个元素开始和它后面的元素比较，如果比它后面的元素更大的话就交换，一直重复，直到这个元素到了它能到达的位置。注意检测是否已经完成了排序，如果已完成就可以退出了。时间复杂度$O(n^2)$</p>

<p><strong>Python支持对两个数字同时进行交换！<code>a,b = b,a</code>就可以交换a和b的值了。</strong></p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/bubblesort.png" alt="image" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">short_bubble_sort</span><span class="p">(</span><span class="n">a_list</span><span class="p">):</span>
</span><span class="line">    <span class="n">exchanges</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">    <span class="n">pass_num</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">while</span> <span class="n">pass_num</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">exchanges</span><span class="p">:</span>
</span><span class="line">        <span class="n">exchanges</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class="line">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">pass_num</span><span class="p">):</span>
</span><span class="line">            <span class="k">if</span> <span class="n">a_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">a_list</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]:</span>
</span><span class="line">                <span class="n">exchanges</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">                <span class="c"># temp = a_list[i]</span>
</span><span class="line">                <span class="c"># a_list[i] = a_list[i + 1]</span>
</span><span class="line">                <span class="c"># a_list[i + 1] = temp</span>
</span><span class="line">                <span class="n">a_list</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">a_list</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">a_list</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="n">a_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">        <span class="n">pass_num</span> <span class="o">=</span> <span class="n">pass_num</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="line">    <span class="n">a_list</span><span class="o">=</span><span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">110</span><span class="p">,</span> <span class="mi">100</span><span class="p">]</span>
</span><span class="line">    <span class="n">short_bubble_sort</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.选择排序(selection sort)：每个回合都选择出剩下的元素中最大的那个，选择的方法是首先默认第一元素是最大的，如果后面的元素比它大的话，那就更新剩下的最大的元素值，找到剩下元素中最大的之后将它放入到合适的位置就行了。时间复杂度$O(n^2)$</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/selectionsort.png" alt="image" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">selection_sort</span><span class="p">(</span><span class="n">a_list</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">fill_slot</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class="line">        <span class="n">pos_of_max</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">        <span class="k">for</span> <span class="n">location</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">fill_slot</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
</span><span class="line">            <span class="k">if</span> <span class="n">a_list</span><span class="p">[</span><span class="n">location</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">a_list</span><span class="p">[</span><span class="n">pos_of_max</span><span class="p">]:</span>
</span><span class="line">                <span class="n">pos_of_max</span> <span class="o">=</span> <span class="n">location</span>
</span><span class="line">        <span class="c"># temp = a_list[fill_slot]</span>
</span><span class="line">        <span class="c"># a_list[fill_slot] = a_list[pos_of_max]</span>
</span><span class="line">        <span class="c"># a_list[pos_of_max] = temp</span>
</span><span class="line">        <span class="n">a_list</span><span class="p">[</span><span class="n">fill_slot</span><span class="p">],</span><span class="n">a_list</span><span class="p">[</span><span class="n">pos_of_max</span><span class="p">]</span><span class="o">=</span><span class="n">a_list</span><span class="p">[</span><span class="n">pos_of_max</span><span class="p">],</span><span class="n">a_list</span><span class="p">[</span><span class="n">fill_slot</span><span class="p">]</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">a_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">54</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">20</span><span class="p">]</span>
</span><span class="line"><span class="n">selection_sort</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.插入排序(insertion sort)：每次假设前面的元素都是已经排好序了的，然后将当前位置的元素插入到原来的序列中，为了尽快地查找合适的插入位置，可以使用二分查找。时间复杂度$O(n^2)$，别误以为二分查找可以降低它的复杂度，因为插入排序还需要移动元素的操作！</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/insertionsort.png" alt="image" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">insertion_sort</span><span class="p">(</span><span class="n">a_list</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">index</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_list</span><span class="p">)):</span>
</span><span class="line">        <span class="n">current_value</span> <span class="o">=</span> <span class="n">a_list</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class="line">        <span class="n">position</span> <span class="o">=</span> <span class="n">index</span>
</span><span class="line">        <span class="k">while</span> <span class="n">position</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">a_list</span><span class="p">[</span><span class="n">position</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">current_value</span><span class="p">:</span>
</span><span class="line">            <span class="n">a_list</span><span class="p">[</span><span class="n">position</span><span class="p">]</span> <span class="o">=</span> <span class="n">a_list</span><span class="p">[</span><span class="n">position</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
</span><span class="line">            <span class="n">position</span> <span class="o">=</span> <span class="n">position</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">        <span class="n">a_list</span><span class="p">[</span><span class="n">position</span><span class="p">]</span> <span class="o">=</span> <span class="n">current_value</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">insertion_sort_binarysearch</span><span class="p">(</span><span class="n">a_list</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">index</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_list</span><span class="p">)):</span>
</span><span class="line">        <span class="n">current_value</span> <span class="o">=</span> <span class="n">a_list</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class="line">        <span class="n">position</span> <span class="o">=</span> <span class="n">index</span>
</span><span class="line">        <span class="n">low</span><span class="o">=</span><span class="mi">0</span>
</span><span class="line">        <span class="n">high</span><span class="o">=</span><span class="n">index</span><span class="o">-</span><span class="mi">1</span>
</span><span class="line">        <span class="k">while</span> <span class="n">low</span><span class="o">&lt;=</span><span class="n">high</span><span class="p">:</span>
</span><span class="line">            <span class="n">mid</span><span class="o">=</span><span class="p">(</span><span class="n">low</span><span class="o">+</span><span class="n">high</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span>
</span><span class="line">            <span class="k">if</span> <span class="n">a_list</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span><span class="o">&gt;</span><span class="n">current_value</span><span class="p">:</span>
</span><span class="line">                <span class="n">high</span><span class="o">=</span><span class="n">mid</span><span class="o">-</span><span class="mi">1</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">low</span><span class="o">=</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">        <span class="k">while</span> <span class="n">position</span> <span class="o">&gt;</span> <span class="n">low</span><span class="p">:</span>
</span><span class="line">            <span class="n">a_list</span><span class="p">[</span><span class="n">position</span><span class="p">]</span> <span class="o">=</span> <span class="n">a_list</span><span class="p">[</span><span class="n">position</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
</span><span class="line">        <span class="n">a_list</span><span class="p">[</span><span class="n">position</span><span class="p">]</span> <span class="o">=</span> <span class="n">current_value</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">a_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">54</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">20</span><span class="p">]</span>
</span><span class="line"><span class="n">insertion_sort</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span><span class="line"><span class="n">insertion_sort_binarysearch</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4.合并排序(merge sort)：典型的是二路合并排序，将原始数据集分成两部分(不一定能够均分)，分别对它们进行排序，然后将排序后的子数据集进行合并，这是典型的分治法策略。时间复杂度$O(nlogn)$</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/mergesort.png" alt="image" /></p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/mergesort2.png" alt="image" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">merge_sort</span><span class="p">(</span><span class="n">a_list</span><span class="p">):</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Splitting &quot;</span><span class="p">,</span> <span class="n">a_list</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">        <span class="n">mid</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
</span><span class="line">        <span class="n">left_half</span> <span class="o">=</span> <span class="n">a_list</span><span class="p">[:</span><span class="n">mid</span><span class="p">]</span>
</span><span class="line">        <span class="n">right_half</span> <span class="o">=</span> <span class="n">a_list</span><span class="p">[</span><span class="n">mid</span><span class="p">:]</span>
</span><span class="line">        <span class="n">merge_sort</span><span class="p">(</span><span class="n">left_half</span><span class="p">)</span>
</span><span class="line">        <span class="n">merge_sort</span><span class="p">(</span><span class="n">right_half</span><span class="p">)</span>
</span><span class="line">        <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class="line">        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">left_half</span><span class="p">)</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">right_half</span><span class="p">):</span>
</span><span class="line">            <span class="k">if</span> <span class="n">left_half</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">right_half</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
</span><span class="line">                <span class="n">a_list</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">left_half</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">                <span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">a_list</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">right_half</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">                <span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">            <span class="n">k</span><span class="o">=</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">left_half</span><span class="p">):</span>
</span><span class="line">            <span class="n">a_list</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">left_half</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">            <span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">            <span class="n">k</span><span class="o">=</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">        <span class="k">while</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">right_half</span><span class="p">):</span>
</span><span class="line">            <span class="n">a_list</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">right_half</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">            <span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">            <span class="n">k</span><span class="o">=</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Merging &quot;</span><span class="p">,</span> <span class="n">a_list</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">a_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">54</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">20</span><span class="p">]</span>
</span><span class="line"><span class="n">merge_sort</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>算法导论2-4题利用合并排序可以在$O(nlogn)$的最坏情况下得到包含n个元素的数组的逆序对的数目。[下面使用的是C++来实现的，合并排序的代码格式类似算法导论]</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">calculateInversions</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">p</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">);</span>
</span><span class="line"><span class="kt">int</span> <span class="n">mergeInversions</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">p</span><span class="p">,</span> <span class="kt">int</span> <span class="n">q</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">1</span><span class="p">};</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">calculateInversions</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;count inversions : &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">count</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">calculateInversions</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">p</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="kt">int</span> <span class="n">count</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class="line">	<span class="k">if</span><span class="p">(</span><span class="n">p</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="kt">int</span> <span class="n">q</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line">        <span class="n">count</span> <span class="o">+=</span> <span class="n">calculateInversions</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">);</span>
</span><span class="line">        <span class="n">count</span> <span class="o">+=</span> <span class="n">calculateInversions</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class="line">        <span class="n">count</span> <span class="o">+=</span> <span class="n">mergeInversions</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">return</span> <span class="n">count</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">mergeInversions</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">p</span><span class="p">,</span> <span class="kt">int</span> <span class="n">q</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">){</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">count</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">n1</span><span class="o">=</span><span class="n">q</span><span class="o">-</span><span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">n2</span><span class="o">=</span><span class="n">r</span><span class="o">-</span><span class="n">q</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">left</span><span class="p">[</span><span class="n">n1</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="n">right</span><span class="p">[</span><span class="n">n2</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">left</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">arr</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="n">i</span><span class="p">];</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">n2</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">right</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">arr</span><span class="p">[</span><span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="o">+</span><span class="n">j</span><span class="p">];</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">left</span><span class="p">[</span><span class="n">n1</span><span class="p">]</span><span class="o">=</span><span class="n">INT32_MAX</span><span class="p">;</span>
</span><span class="line">    <span class="n">right</span><span class="p">[</span><span class="n">n2</span><span class="p">]</span><span class="o">=</span><span class="n">INT32_MAX</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="n">p</span><span class="p">;</span> <span class="n">k</span><span class="o">&lt;=</span><span class="n">r</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">left</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;=</span><span class="n">right</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line">            <span class="n">arr</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">=</span><span class="n">left</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class="line">            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class="line">            <span class="n">arr</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">=</span><span class="n">right</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class="line">            <span class="n">count</span> <span class="o">+=</span> <span class="n">n1</span><span class="o">-</span><span class="n">i</span><span class="p">;</span>
</span><span class="line">            <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>5.快速排序(quick sort)：</p>

<p>想法一：如下图所示，它选择第一个元素作为主元，它同样可以按照下面提到的算法导论中将数组分成了4个不同的部分，但是这里其实有更好的解释方法。<strong>首先，它每次都是选择第一个元素都为主元，这个回合就是要确定主元的位置；然后，有两个指针，一个leftmark指向主元的后面一个位置，另一个rightmark指向要排序的数组最后一个元素；接着，两个指针分别向中间移动，leftmark遇到比主元大的元素停止，rightmark遇到比主元小的元素停止，如果此时leftmark&lt;rightmark，也就是说中间还有未处理(未确定与主元大小关系)的元素，那么就交换leftmark和rightmark位置上的元素，然后重复刚才的移动操作，直到rightmark&lt;leftmark；最后，停止移动时候rightmark就是主元要放置的位置，因为它停在一个比主元小的元素的位置上，之后交换主元和rightmark指向的元素即可。完了之后，递归地对主元左右两边的数组进行排序即可。</strong></p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/quicksort.png" alt="image" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">quick_sort</span><span class="p">(</span><span class="n">a_list</span><span class="p">):</span>
</span><span class="line">    <span class="n">quick_sort_helper</span><span class="p">(</span><span class="n">a_list</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">quick_sort_helper</span><span class="p">(</span><span class="n">a_list</span><span class="p">,</span> <span class="n">first</span><span class="p">,</span> <span class="n">last</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">first</span> <span class="o">&lt;</span> <span class="n">last</span><span class="p">:</span>
</span><span class="line">        <span class="n">split_point</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="n">a_list</span><span class="p">,</span> <span class="n">first</span><span class="p">,</span> <span class="n">last</span><span class="p">)</span>
</span><span class="line">        <span class="n">quick_sort_helper</span><span class="p">(</span><span class="n">a_list</span><span class="p">,</span> <span class="n">first</span><span class="p">,</span> <span class="n">split_point</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">        <span class="n">quick_sort_helper</span><span class="p">(</span><span class="n">a_list</span><span class="p">,</span> <span class="n">split_point</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">last</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">partition</span><span class="p">(</span><span class="n">a_list</span><span class="p">,</span> <span class="n">first</span><span class="p">,</span> <span class="n">last</span><span class="p">):</span>
</span><span class="line">    <span class="n">pivot_value</span> <span class="o">=</span> <span class="n">a_list</span><span class="p">[</span><span class="n">first</span><span class="p">]</span>
</span><span class="line">    <span class="n">left_mark</span> <span class="o">=</span> <span class="n">first</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">    <span class="n">right_mark</span> <span class="o">=</span> <span class="n">last</span>
</span><span class="line">    <span class="n">done</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class="line">    <span class="k">while</span> <span class="ow">not</span> <span class="n">done</span><span class="p">:</span>
</span><span class="line">        <span class="k">while</span> <span class="n">left_mark</span> <span class="o">&lt;=</span> <span class="n">right_mark</span> <span class="ow">and</span> <span class="n">a_list</span><span class="p">[</span><span class="n">left_mark</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">pivot_value</span><span class="p">:</span>
</span><span class="line">            <span class="n">left_mark</span> <span class="o">=</span> <span class="n">left_mark</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">        <span class="k">while</span> <span class="n">a_list</span><span class="p">[</span><span class="n">right_mark</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">pivot_value</span> <span class="ow">and</span> <span class="n">right_mark</span> <span class="o">&gt;=</span> <span class="n">left_mark</span><span class="p">:</span>
</span><span class="line">            <span class="n">right_mark</span> <span class="o">=</span> <span class="n">right_mark</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">        <span class="k">if</span> <span class="n">right_mark</span> <span class="o">&lt;</span> <span class="n">left_mark</span><span class="p">:</span>
</span><span class="line">            <span class="n">done</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="n">temp</span> <span class="o">=</span> <span class="n">a_list</span><span class="p">[</span><span class="n">left_mark</span><span class="p">]</span>
</span><span class="line">            <span class="n">a_list</span><span class="p">[</span><span class="n">left_mark</span><span class="p">]</span> <span class="o">=</span> <span class="n">a_list</span><span class="p">[</span><span class="n">right_mark</span><span class="p">]</span>
</span><span class="line">            <span class="n">a_list</span><span class="p">[</span><span class="n">right_mark</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span>
</span><span class="line">    <span class="n">temp</span> <span class="o">=</span> <span class="n">a_list</span><span class="p">[</span><span class="n">first</span><span class="p">]</span>
</span><span class="line">    <span class="n">a_list</span><span class="p">[</span><span class="n">first</span><span class="p">]</span> <span class="o">=</span> <span class="n">a_list</span><span class="p">[</span><span class="n">right_mark</span><span class="p">]</span>
</span><span class="line">    <span class="n">a_list</span><span class="p">[</span><span class="n">right_mark</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span>
</span><span class="line">    <span class="k">return</span> <span class="n">right_mark</span>
</span><span class="line">
</span><span class="line"><span class="n">a_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">54</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">20</span><span class="p">]</span>
</span><span class="line"><span class="n">quick_sort</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>想法二：如下图所示，它选择最后的那个元素作为主元，它的思路是将数组划分成4部分：</p>

<p>第一部分：$p \le k \le i, A[k] \le pivot$</p>

<p>第二部分：$i+1 \le k \le j-1, A[k] \gt pivot$</p>

<p>第三部分：$j \le k \le r-1, A[k]$可以取任何值(因为它们还没有进行处理)。</p>

<p>第四部分：$p \le k \le i, A[k] = pivot$</p>

<p><strong>首先，让i指向要排序的数组的第一个元素的前面，p和j都指向第一个元素；然后，一直移动j直到主元前一个位置，一旦发现一个大于主元的元素就让i指向它的下一个位置，然后交换i和j对应位置上的元素。这样一定是可行的，因为i一直都是指向已发现的小于主元的元素中的最后一个，从i+1开始就大于主元了(或者还未确定/未处理)，而j一直都是指向大于主元的元素中最后一个的后面一个位置，所以i+1和j位置上的元素交换就可以使得j发现的这个小于主元的元素移动到第一部分，而i+1位置上大于主元的元素移动到j的位置上，即第二部分的最后一个位置上。</strong></p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/quicksort_cn.png" alt="image" /></p>

<p>根据算法导论中的伪代码的C++版本实现</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">// partition, locate the pivot value in properate position</span>
</span><span class="line"><span class="kt">int</span> <span class="n">partition</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">low</span><span class="p">,</span> <span class="kt">int</span> <span class="n">high</span><span class="p">){</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">key</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">high</span><span class="p">];</span><span class="c1">//pivot</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">low</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">temp</span><span class="p">;</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">low</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">high</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&lt;</span><span class="n">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">            <span class="n">temp</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class="line">            <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class="line">            <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">temp</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">temp</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">high</span><span class="p">];</span>
</span><span class="line">    <span class="n">a</span><span class="p">[</span><span class="n">high</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class="line">    <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span><span class="c1">//i+1 is the split point</span>
</span><span class="line">    <span class="k">return</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// quick sort</span>
</span><span class="line"><span class="kt">void</span> <span class="n">quicksort</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">low</span><span class="p">,</span> <span class="kt">int</span> <span class="n">high</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">low</span><span class="p">,</span><span class="n">high</span><span class="p">);</span>
</span><span class="line">        <span class="n">quicksort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">        <span class="n">quicksort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">high</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// print array</span>
</span><span class="line"><span class="kt">void</span> <span class="n">print</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span><span class="kt">int</span> <span class="n">len</span><span class="p">){</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; &quot;</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">a</span><span class="p">[]</span><span class="o">=</span><span class="p">{</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">33</span><span class="p">,</span><span class="mi">28</span><span class="p">,</span><span class="mi">19</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">};</span>
</span><span class="line">    <span class="n">quicksort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class="line">    <span class="n">print</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">11</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>由于快排每次都能够确定一个元素在数组中最终的位置，所以可以用快排来解决很多变种问题，例如在线性时间内求中位数或者其他顺序统计量的问题(例如第k大或者第k小的元素)，该部分内容可以参考<a href="http://www.cnblogs.com/Anker/archive/2013/01/25/2877311.html">来自博客园</a></p>

<p>关于快排的性能分析可以参考<a href="http://www.cnblogs.com/Anker/archive/2013/01/24/2875234.html">来自博客园</a>，一般来说划分之后两边越均衡的话快排的性能更好。为了避免最坏的情况出现(原始的数组是已经是有序的)可以使用随机化版本的快排。</p>

<p>另外，为了减少快排的栈深度可以使用尾递归技术，该内容可以参见算法导论习题7-4。</p>

<p>6.希尔排序：类似合并排序和插入排序的结合体，二路合并排序将原来的数组分成左右两部分，希尔排序则将数组按照一定的间隔分成几部分，每部分采用插入排序来排序，有意思的是这样做了之后，元素很多情况下就差不多在它应该呆的位置，所以效率不一定比插入排序差。时间复杂度为$[O(n),O(n^2)]$。</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/shellsort.png" alt="image" /></p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/shellsort2.png" alt="image" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">shell_sort</span><span class="p">(</span><span class="n">a_list</span><span class="p">):</span>
</span><span class="line">    <span class="c">#how many sublists, also how many elements in a sublist</span>
</span><span class="line">    <span class="n">sublist_count</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
</span><span class="line">    <span class="k">while</span> <span class="n">sublist_count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">        <span class="k">for</span> <span class="n">start_position</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sublist_count</span><span class="p">):</span>
</span><span class="line">            <span class="n">gap_insertion_sort</span><span class="p">(</span><span class="n">a_list</span><span class="p">,</span> <span class="n">start_position</span><span class="p">,</span> <span class="n">sublist_count</span><span class="p">)</span>
</span><span class="line">        <span class="k">print</span><span class="p">(</span><span class="s">&quot;After increments of size&quot;</span><span class="p">,</span> <span class="n">sublist_count</span><span class="p">,</span> <span class="s">&quot;The list is&quot;</span><span class="p">,</span> <span class="n">a_list</span><span class="p">)</span>
</span><span class="line">        <span class="n">sublist_count</span> <span class="o">=</span> <span class="n">sublist_count</span> <span class="o">//</span> <span class="mi">2</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">gap_insertion_sort</span><span class="p">(</span><span class="n">a_list</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">gap</span><span class="p">):</span>
</span><span class="line">    <span class="c">#start+gap is the second element in this sublist</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">gap</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_list</span><span class="p">),</span> <span class="n">gap</span><span class="p">):</span>
</span><span class="line">        <span class="n">current_value</span> <span class="o">=</span> <span class="n">a_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">        <span class="n">position</span> <span class="o">=</span> <span class="n">i</span>
</span><span class="line">        <span class="k">while</span> <span class="n">position</span> <span class="o">&gt;=</span> <span class="n">gap</span> <span class="ow">and</span> <span class="n">a_list</span><span class="p">[</span><span class="n">position</span> <span class="o">-</span> <span class="n">gap</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">current_value</span><span class="p">:</span>
</span><span class="line">            <span class="n">a_list</span><span class="p">[</span><span class="n">position</span><span class="p">]</span> <span class="o">=</span> <span class="n">a_list</span><span class="p">[</span><span class="n">position</span> <span class="o">-</span> <span class="n">gap</span><span class="p">]</span> <span class="c">#move backward</span>
</span><span class="line">            <span class="n">position</span> <span class="o">=</span> <span class="n">position</span> <span class="o">-</span> <span class="n">gap</span>
</span><span class="line">            <span class="n">a_list</span><span class="p">[</span><span class="n">position</span><span class="p">]</span> <span class="o">=</span> <span class="n">current_value</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">a_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">54</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">88</span><span class="p">]</span>
</span><span class="line"><span class="n">shell_sort</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>7.堆排序请参见该系列文章中的<a href="http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-datastructures/">DataStrctures章节中的二叉堆部分的内容</a>。</p>

<p>8.其他线性排序可以参见算法导论第8章或者看下<a href="http://www.cnblogs.com/Anker/archive/2013/01/25/2876397.html">这篇不错的文章</a></p>

<p>其实看个图就明白了，图摘自上面的博客，版权归原作者，谢谢！</p>

<p>计数排序：在数的范围很小时还是不错的，当数的范围很大的时候就不适用了，计数排序一般用于基数排序中。需要注意的是，计数完了之后进行插入时，为了保证排序的稳定性，需要从后往前插入。</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/sortcount.png" alt="image" /></p>

<p>基数排序</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/sortradix.png" alt="image" /></p>

<p>桶排序：适用于元素是均匀分布的，在每个桶内采用插入排序。</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/sortbucket.png" alt="image" /></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/07/python-algorithms-sort/">http://hujiaweibujidao.github.io/blog/2014/05/07/python-algorithms-sort/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Algorithms - Search]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/07/python-algorithms-search/"/>
    <updated>2014-05-07T16:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/07/python-algorithms-search</id>
    <content type="html"><![CDATA[<p><strong><center>Python Algorithms Python算法系列</center></strong>
<strong><center>逸夫图书馆, 2014/5/7</center></strong></p>

<h3 id="centercenter"><center>搜索</center></h3>

<p>参考内容：</p>

<p>1.<a href="http://interactivepython.org/courselib/static/pythonds/index.html">Problem Solving with Python</a>
Chapter5: Search and Sorting <a href="http://interactivepython.org/courselib/static/pythonds/SortSearch/searching.html#searching">online_link</a></p>

<p>2.<a href="http://en.wikipedia.org/wiki/Introduction_to_Algorithms">算法导论</a></p>

<h4 id="section">搜索总结</h4>

<p>(1)顺序查找：O(n)</p>

<p>(2)二分查找：O(lgn)</p>

<p>(3)Hash查找：O(1)</p>

<p>概念：hash，hash table，hash function <a href="http://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8#.E5.A4.84.E7.90.86.E7.A2.B0.E6.92.9E">哈希表_on_wiki</a></p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/hashbasics.png" alt="image" />  </p>

<p>常用的哈希函数：</p>

<p>1.reminder method：取余数（size=11）</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/reminder.png" alt="image" /></p>

<p>2.folding method</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/folding.png" alt="image" /></p>

<p>3.mid-square method</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/mid-square.png" alt="image" /></p>

<p>4.对于由字符的元素可以尝试使用<code>ord</code>函数来将字符串转换成一个有序的数值序列。</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/stringord1.png" alt="image" /></p>

<p>但是，对于通过回文构词法构成的字符串它们得到的值总是一样，为了解决这个问题，可以根据字符的位置添加一个权重。</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/stringord2.png" alt="image" /></p>

<p>From wiki</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/hashfun.png" alt="image" />   </p>

<p>使用哈希查找，难免遇到冲突，该如何解决冲突(Collision Resolution)呢？</p>

<p>常用的解决冲突的办法：</p>

<p>1.open address(开放寻址)：线性探测(linear probing)下一个位置，缺点是容易造成聚集现象(cluster)，解决聚集现象的办法是跳跃式地查找下一个空槽。数值的顺序：(54, 26, 93, 17, 77, 31, 44, 55, 20).</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/linearprob.png" alt="image" /></p>

<p>2.quadratic probing(平方探测)：一开始的hash值为h，如果不是空槽，那就尝试h+1，还不是空槽就尝试h+4，依次继续尝试h+9，h+16等等。</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/quadraticprob.png" alt="image" /></p>

<p>3.chain：利用链表链接起来</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/chain.png" alt="image" /></p>

<p>From wiki</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/hashcollision.png" alt="image" />   </p>

<p>分析hash查找的性能：一般使用平均查找长度来衡量，和装载因子有关</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/hashanalysis.png" alt="image" /></p>

<p>From wiki</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/hashefficiency.png" alt="image" />   </p>

<p>下面的代码包含了顺序查找，二分查找，哈希查找(size=11, plus 1, reminder method)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">sequential_search</span><span class="p">(</span><span class="n">a_list</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class="line">    <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="n">found</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class="line">    <span class="k">while</span> <span class="n">pos</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">found</span><span class="p">:</span>
</span><span class="line">        <span class="k">if</span> <span class="n">a_list</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="o">==</span> <span class="n">item</span><span class="p">:</span>
</span><span class="line">            <span class="n">found</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="n">pos</span> <span class="o">=</span> <span class="n">pos</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">    <span class="k">return</span> <span class="n">found</span>
</span><span class="line">
</span><span class="line"><span class="n">test_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">sequential_search</span><span class="p">(</span><span class="n">test_list</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">sequential_search</span><span class="p">(</span><span class="n">test_list</span><span class="p">,</span> <span class="mi">13</span><span class="p">))</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">binary_search</span><span class="p">(</span><span class="n">a_list</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class="line">    <span class="n">first</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="n">last</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">    <span class="n">found</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class="line">    <span class="k">while</span> <span class="n">first</span> <span class="o">&lt;=</span> <span class="n">last</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">found</span><span class="p">:</span>
</span><span class="line">        <span class="n">midpoint</span> <span class="o">=</span> <span class="p">(</span><span class="n">first</span> <span class="o">+</span> <span class="n">last</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
</span><span class="line">        <span class="k">if</span> <span class="n">a_list</span><span class="p">[</span><span class="n">midpoint</span><span class="p">]</span> <span class="o">==</span> <span class="n">item</span><span class="p">:</span>
</span><span class="line">            <span class="n">found</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="n">item</span> <span class="o">&lt;</span> <span class="n">a_list</span><span class="p">[</span><span class="n">midpoint</span><span class="p">]:</span>
</span><span class="line">                <span class="n">last</span> <span class="o">=</span> <span class="n">midpoint</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">first</span> <span class="o">=</span> <span class="n">midpoint</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">return</span> <span class="n">found</span>
</span><span class="line">
</span><span class="line"><span class="n">test_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">42</span><span class="p">,]</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">binary_search</span><span class="p">(</span><span class="n">test_list</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">binary_search</span><span class="p">(</span><span class="n">test_list</span><span class="p">,</span> <span class="mi">13</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">HashTable</span><span class="p">:</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">=</span> <span class="mi">11</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">slots</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span>
</span><span class="line">
</span><span class="line">    <span class="c">#put data in slot</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">put_data_in_slot</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">data</span><span class="p">,</span><span class="n">slot</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">slots</span><span class="p">[</span><span class="n">slot</span><span class="p">]</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span> <span class="c"># &#39;==None&#39; ? or  &#39;is None&#39; ?</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">slots</span><span class="p">[</span><span class="n">slot</span><span class="p">]</span> <span class="o">=</span> <span class="n">key</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">slot</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span>
</span><span class="line">            <span class="k">return</span> <span class="bp">True</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">slots</span><span class="p">[</span><span class="n">slot</span><span class="p">]</span> <span class="o">==</span> <span class="n">key</span><span class="p">:</span> <span class="c"># not None</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">slot</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span> <span class="c">#replace</span>
</span><span class="line">                <span class="k">return</span> <span class="bp">True</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="k">return</span> <span class="bp">False</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">put</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
</span><span class="line">        <span class="n">slot</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">hash_function</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span><span class="p">);</span>
</span><span class="line">        <span class="n">result</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">put_data_in_slot</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">data</span><span class="p">,</span><span class="n">slot</span><span class="p">);</span>
</span><span class="line">        <span class="k">while</span> <span class="ow">not</span> <span class="n">result</span><span class="p">:</span>
</span><span class="line">            <span class="n">slot</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">rehash</span><span class="p">(</span><span class="n">slot</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span><span class="p">);</span>
</span><span class="line">            <span class="n">result</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">put_data_in_slot</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">data</span><span class="p">,</span><span class="n">slot</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="c">#reminder method</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">hash_function</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="n">key</span> <span class="o">%</span> <span class="n">size</span>
</span><span class="line">
</span><span class="line">    <span class="c">#plus 1</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">rehash</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">old_hash</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="p">(</span><span class="n">old_hash</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">size</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span><span class="line">        <span class="n">start_slot</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">hash_function</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">slots</span><span class="p">))</span>
</span><span class="line">        <span class="n">data</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">        <span class="n">stop</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class="line">        <span class="n">found</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class="line">        <span class="n">position</span> <span class="o">=</span> <span class="n">start_slot</span>
</span><span class="line">        <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">slots</span><span class="p">[</span><span class="n">position</span><span class="p">]</span> <span class="o">!=</span> <span class="bp">None</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">found</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">stop</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">slots</span><span class="p">[</span><span class="n">position</span><span class="p">]</span> <span class="o">==</span> <span class="n">key</span><span class="p">:</span>
</span><span class="line">                <span class="n">found</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">                <span class="n">data</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">position</span><span class="p">]</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">position</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">rehash</span><span class="p">(</span><span class="n">position</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">slots</span><span class="p">))</span>
</span><span class="line">                <span class="k">if</span> <span class="n">position</span> <span class="o">==</span> <span class="n">start_slot</span><span class="p">:</span>
</span><span class="line">                    <span class="n">stop</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">        <span class="k">return</span> <span class="n">data</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__setitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="line">    <span class="n">table</span><span class="o">=</span><span class="n">HashTable</span><span class="p">();</span>
</span><span class="line">    <span class="n">table</span><span class="p">[</span><span class="mi">54</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;cat&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="n">table</span><span class="p">[</span><span class="mi">26</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;dog&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="n">table</span><span class="p">[</span><span class="mi">93</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;lion&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="n">table</span><span class="p">[</span><span class="mi">17</span><span class="p">]</span><span class="o">=</span><span class="s">&quot;tiger&quot;</span><span class="p">;</span>
</span><span class="line">    <span class="n">table</span><span class="p">[</span><span class="mi">77</span><span class="p">]</span><span class="o">=</span><span class="s">&quot;bird&quot;</span><span class="p">;</span>
</span><span class="line">    <span class="n">table</span><span class="p">[</span><span class="mi">44</span><span class="p">]</span><span class="o">=</span><span class="s">&quot;goat&quot;</span><span class="p">;</span>
</span><span class="line">    <span class="n">table</span><span class="p">[</span><span class="mi">55</span><span class="p">]</span><span class="o">=</span><span class="s">&quot;pig&quot;</span><span class="p">;</span>
</span><span class="line">    <span class="n">table</span><span class="p">[</span><span class="mi">20</span><span class="p">]</span><span class="o">=</span><span class="s">&quot;chicken&quot;</span><span class="p">;</span>
</span><span class="line">    <span class="k">print</span> <span class="n">table</span><span class="o">.</span><span class="n">slots</span><span class="p">;</span>
</span><span class="line">    <span class="k">print</span> <span class="n">table</span><span class="o">.</span><span class="n">data</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c"># [77, 44, 55, None, 26, 93, 17, None, None, 20, 54]</span>
</span><span class="line"><span class="c"># [&#39;bird&#39;, &#39;goat&#39;, &#39;pig&#39;, None, &#39;dog&#39;, &#39;lion&#39;, &#39;tiger&#39;, None, None, &#39;chicken&#39;, &#39;cat&#39;]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/07/python-algorithms-search/">http://hujiaweibujidao.github.io/blog/2014/05/07/python-algorithms-search/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
</feed>
