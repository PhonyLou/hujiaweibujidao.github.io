<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hujiawei Bujidao]]></title>
  <link href="http://hujiaweibujidao.github.io/feed" rel="self"/>
  <link href="http://hujiaweibujidao.github.io/"/>
  <updated>2014-05-08T17:28:40+08:00</updated>
  <id>http://hujiaweibujidao.github.io/</id>
  <author>
    <name><![CDATA[hujiawei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Algorithms - Data Structures]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-datastructures/"/>
    <updated>2014-05-08T10:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-datastructures</id>
    <content type="html"><![CDATA[<p>参考内容：</p>

<p>1.<a href="http://interactivepython.org/courselib/static/pythonds/index.html">Problem Solving with Python</a>
Chapter 2 Algorithm Analysis
Chapter 3 Basic Data Structures
Chapter 6 Trees and Tree Algorithms</p>

<p>2.<a href="http://en.wikipedia.org/wiki/Introduction_to_Algorithms">算法导论</a></p>

<h4 id="section">数据结构总结</h4>

<p>1.Python内置数据结构的性能分析</p>

<p>(1)List</p>

<p>List的各个操作的时间复杂度</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/listoptime.png" alt="image" /></p>

<p>同样是执行1000次创建一个包含1-1000的列表，四种方式使用的时间差距很大！使用append比逐次增加要快很多，另外，使用python的列表产生式比append要快，而第四种方式更加快！</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">test1</span><span class="p">():</span>
</span><span class="line">   <span class="n">l</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">   <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1000</span><span class="p">):</span>
</span><span class="line">      <span class="n">l</span> <span class="o">=</span> <span class="n">l</span> <span class="o">+</span> <span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line"><span class="k">def</span> <span class="nf">test2</span><span class="p">():</span>
</span><span class="line">   <span class="n">l</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">   <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1000</span><span class="p">):</span>
</span><span class="line">      <span class="n">l</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class="line"><span class="k">def</span> <span class="nf">test3</span><span class="p">():</span>
</span><span class="line">   <span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1000</span><span class="p">)]</span>
</span><span class="line"><span class="k">def</span> <span class="nf">test4</span><span class="p">():</span>
</span><span class="line">   <span class="n">l</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1000</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="c"># Import the timeit module -&gt; import timeit</span>
</span><span class="line"><span class="c"># Import the Timer class defined in the module</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">timeit</span> <span class="kn">import</span> <span class="n">Timer</span>
</span><span class="line"><span class="c"># If the above line is excluded, you need to replace Timer with</span>
</span><span class="line"><span class="c"># timeit.Timer when defining a Timer object</span>
</span><span class="line"><span class="n">t1</span> <span class="o">=</span> <span class="n">Timer</span><span class="p">(</span><span class="s">&quot;test1()&quot;</span><span class="p">,</span> <span class="s">&quot;from __main__ import test1&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&quot;concat &quot;</span><span class="p">,</span><span class="n">t1</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">number</span><span class="o">=</span><span class="mi">1000</span><span class="p">),</span> <span class="s">&quot;milliseconds&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">t2</span> <span class="o">=</span> <span class="n">Timer</span><span class="p">(</span><span class="s">&quot;test2()&quot;</span><span class="p">,</span> <span class="s">&quot;from __main__ import test2&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&quot;append &quot;</span><span class="p">,</span><span class="n">t2</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">number</span><span class="o">=</span><span class="mi">1000</span><span class="p">),</span> <span class="s">&quot;milliseconds&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">t3</span> <span class="o">=</span> <span class="n">Timer</span><span class="p">(</span><span class="s">&quot;test3()&quot;</span><span class="p">,</span> <span class="s">&quot;from __main__ import test3&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&quot;comprehension &quot;</span><span class="p">,</span><span class="n">t3</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">number</span><span class="o">=</span><span class="mi">1000</span><span class="p">),</span> <span class="s">&quot;milliseconds&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">t4</span> <span class="o">=</span> <span class="n">Timer</span><span class="p">(</span><span class="s">&quot;test4()&quot;</span><span class="p">,</span> <span class="s">&quot;from __main__ import test4&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&quot;list range &quot;</span><span class="p">,</span><span class="n">t4</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">number</span><span class="o">=</span><span class="mi">1000</span><span class="p">),</span> <span class="s">&quot;milliseconds&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># (&#39;concat &#39;, 1.7890608310699463, &#39;milliseconds&#39;)</span>
</span><span class="line"><span class="c"># (&#39;append &#39;, 0.13796091079711914, &#39;milliseconds&#39;)</span>
</span><span class="line"><span class="c"># (&#39;comprehension &#39;, 0.05671119689941406, &#39;milliseconds&#39;)</span>
</span><span class="line"><span class="c"># (&#39;list range &#39;, 0.014147043228149414, &#39;milliseconds&#39;)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>timeit</code>模块的解释：</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/timeit.png" alt="image" /></p>

<p>测试pop操作：从结果可以看出，pop最后一个元素的效率远远高于pop第一个元素</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">x</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">2000000</span><span class="p">))</span>
</span><span class="line"><span class="n">pop_zero</span> <span class="o">=</span> <span class="n">Timer</span><span class="p">(</span><span class="s">&quot;x.pop(0)&quot;</span><span class="p">,</span><span class="s">&quot;from __main__ import x&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&quot;pop_zero &quot;</span><span class="p">,</span><span class="n">pop_zero</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">number</span><span class="o">=</span><span class="mi">1000</span><span class="p">),</span> <span class="s">&quot;milliseconds&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">x</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">2000000</span><span class="p">))</span>
</span><span class="line"><span class="n">pop_end</span> <span class="o">=</span> <span class="n">Timer</span><span class="p">(</span><span class="s">&quot;x.pop()&quot;</span><span class="p">,</span><span class="s">&quot;from __main__ import x&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&quot;pop_end &quot;</span><span class="p">,</span><span class="n">pop_end</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">number</span><span class="o">=</span><span class="mi">1000</span><span class="p">),</span> <span class="s">&quot;milliseconds&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># (&#39;pop_zero &#39;, 1.9101738929748535, &#39;milliseconds&#39;)</span>
</span><span class="line"><span class="c"># (&#39;pop_end &#39;, 0.00023603439331054688, &#39;milliseconds&#39;)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(2)Dictionary</p>

<p>Dictionary的各个操作的性能</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/dictionary.png" alt="image" /></p>

<p>Dictionary和List的性能比较：list基本上随着其元素的数目呈线性增长，而dictionary一直维持在很短很短的时间内(我的机子测试的结果都是<code>0.001ms</code>)。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">timeit</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">random</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10000</span><span class="p">,</span><span class="mi">1000001</span><span class="p">,</span><span class="mi">20000</span><span class="p">):</span>
</span><span class="line">    <span class="n">t</span> <span class="o">=</span> <span class="n">timeit</span><span class="o">.</span><span class="n">Timer</span><span class="p">(</span><span class="s">&quot;random.randrange(</span><span class="si">%d</span><span class="s">) in x&quot;</span><span class="o">%</span><span class="n">i</span><span class="p">,</span><span class="s">&quot;from __main__ import random,x&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">x</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
</span><span class="line">    <span class="n">lst_time</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">number</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>
</span><span class="line">    <span class="n">x</span> <span class="o">=</span> <span class="p">{</span><span class="n">j</span><span class="p">:</span><span class="bp">None</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">)}</span>
</span><span class="line">    <span class="n">d_time</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">number</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%d</span><span class="s">,</span><span class="si">%10.3f</span><span class="s">,</span><span class="si">%10.3f</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">lst_time</span><span class="p">,</span> <span class="n">d_time</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>结果图</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/compare.png" alt="image" /></p>

<p>2.栈：LIFO结构，后进先出</p>

<p>栈能解决的问题很多，比如逆波兰表达式求值，得到一个十进制数的二进制表达，检查括号匹配问题以及图的深度搜索等等，都很简单，可查看参考内容1学习。</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/stack.png" alt="image" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># Completed implementation of a stack ADT</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Stack</span><span class="p">:</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">       <span class="bp">self</span><span class="o">.</span><span class="n">items</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">is_empty</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">       <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">items</span> <span class="o">==</span> <span class="p">[]</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">push</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class="line">       <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">pop</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">       <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">peek</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">       <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">size</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">       <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">s</span> <span class="o">=</span> <span class="n">Stack</span><span class="p">()</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">is_empty</span><span class="p">())</span>
</span><span class="line"><span class="n">s</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class="line"><span class="n">s</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="s">&#39;dog&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">peek</span><span class="p">())</span>
</span><span class="line"><span class="n">s</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">size</span><span class="p">())</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">is_empty</span><span class="p">())</span>
</span><span class="line"><span class="n">s</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mf">8.4</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">size</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.队列：FIFO结构，先进先出</p>

<p>队列一般用于解决需要优先队列的问题或者进行广度优先搜索的问题，也很简单。</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/queue.png" alt="image" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># Completed implementation of a queue ADT</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Queue</span><span class="p">:</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">      <span class="bp">self</span><span class="o">.</span><span class="n">items</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">is_empty</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">      <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">items</span> <span class="o">==</span> <span class="p">[]</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">enqueue</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class="line">      <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">item</span><span class="p">)</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">dequeue</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">      <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">size</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">      <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">q</span> <span class="o">=</span> <span class="n">Queue</span><span class="p">()</span>
</span><span class="line"><span class="n">q</span><span class="o">.</span><span class="n">enqueue</span><span class="p">(</span><span class="s">&#39;hello&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">q</span><span class="o">.</span><span class="n">enqueue</span><span class="p">(</span><span class="s">&#39;dog&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="o">.</span><span class="n">items</span><span class="p">)</span>
</span><span class="line"><span class="n">q</span><span class="o">.</span><span class="n">enqueue</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="n">q</span><span class="o">.</span><span class="n">dequeue</span><span class="p">()</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="o">.</span><span class="n">items</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4.双向队列：左右两边都可以插入和删除的队列</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/deque.png" alt="image" /></p>

<p>下面的实现是以右端为front，左端为rear</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># Completed implementation of a deque ADT</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Deque</span><span class="p">:</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">      <span class="bp">self</span><span class="o">.</span><span class="n">items</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">is_empty</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">      <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">items</span> <span class="o">==</span> <span class="p">[]</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">add_front</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class="line">       <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">add_rear</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class="line">      <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">item</span><span class="p">)</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">remove_front</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">      <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">remove_rear</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">      <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">size</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">      <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">dq</span><span class="o">=</span><span class="n">Deque</span><span class="p">();</span>
</span><span class="line"><span class="n">dq</span><span class="o">.</span><span class="n">add_front</span><span class="p">(</span><span class="s">&#39;dog&#39;</span><span class="p">);</span>
</span><span class="line"><span class="n">dq</span><span class="o">.</span><span class="n">add_rear</span><span class="p">(</span><span class="s">&#39;cat&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">dq</span><span class="o">.</span><span class="n">items</span><span class="p">)</span>
</span><span class="line"><span class="n">dq</span><span class="o">.</span><span class="n">remove_front</span><span class="p">();</span>
</span><span class="line"><span class="n">dq</span><span class="o">.</span><span class="n">add_front</span><span class="p">(</span><span class="s">&#39;pig&#39;</span><span class="p">);</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">dq</span><span class="o">.</span><span class="n">items</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>5.二叉树：一个节点最多有两个孩子节点的树。如果是从0索引开始存储，那么对应于节点p的孩子节点是2p+1和2p+2两个节点，相反，节点p的父亲节点是(p-1)/2位置上的点</p>

<p>二叉树的应用很多，比如对算术表达式建立一颗二叉树可以清楚看出表达式是如何计算的(详情请见参考内容1)，二叉树的变种可以得到其他的有一定特性的数据结构，例如后面的二叉堆。二叉树的三种遍历方法(前序，中序，后序)同样有很多的应用，比较简单，略过。</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/bt2.png" alt="image" /></p>

<p>第一种，直接使用list来实现二叉树，可读性差</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">binary_tree</span><span class="p">(</span><span class="n">r</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="p">[</span><span class="n">r</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[]]</span>
</span><span class="line"><span class="k">def</span> <span class="nf">insert_left</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">new_branch</span><span class="p">):</span>
</span><span class="line">    <span class="n">t</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">        <span class="c">#new_branch becomes the left node of root, and original left</span>
</span><span class="line">        <span class="c">#node t becomes left node of new_branch, right node is none</span>
</span><span class="line">        <span class="n">root</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="n">new_branch</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="p">[]])</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="n">root</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="n">new_branch</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[]])</span>
</span><span class="line">    <span class="k">return</span> <span class="n">root</span>
</span><span class="line"><span class="k">def</span> <span class="nf">insert_right</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">new_branch</span><span class="p">):</span>
</span><span class="line">    <span class="n">t</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">        <span class="n">root</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="n">new_branch</span><span class="p">,</span> <span class="p">[],</span> <span class="n">t</span><span class="p">])</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="n">root</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="n">new_branch</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[]])</span>
</span><span class="line">    <span class="k">return</span> <span class="n">root</span>
</span><span class="line"><span class="k">def</span> <span class="nf">get_root_val</span><span class="p">(</span><span class="n">root</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="n">root</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line"><span class="k">def</span> <span class="nf">set_root_val</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">new_val</span><span class="p">):</span>
</span><span class="line">    <span class="n">root</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">new_val</span>
</span><span class="line"><span class="k">def</span> <span class="nf">get_left_child</span><span class="p">(</span><span class="n">root</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="n">root</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line"><span class="k">def</span> <span class="nf">get_right_child</span><span class="p">(</span><span class="n">root</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="n">root</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">r</span> <span class="o">=</span> <span class="n">binary_tree</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="n">insert_left</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span><span class="line"><span class="n">insert_left</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class="line"><span class="n">insert_right</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
</span><span class="line"><span class="n">insert_right</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span><span class="line"><span class="n">l</span> <span class="o">=</span> <span class="n">get_left_child</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
</span><span class="line"><span class="n">set_root_val</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span><span class="line"><span class="n">insert_left</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="mi">11</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">get_right_child</span><span class="p">(</span><span class="n">get_right_child</span><span class="p">(</span><span class="n">r</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>第二种，使用类的形式定义二叉树，可读性更好</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/btclass.png" alt="image" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">BinaryTree</span><span class="p">:</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">key</span> <span class="o">=</span> <span class="n">root</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">left_child</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">right_child</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">insert_left</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">new_node</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">left_child</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">left_child</span> <span class="o">=</span> <span class="n">BinaryTree</span><span class="p">(</span><span class="n">new_node</span><span class="p">)</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="n">t</span> <span class="o">=</span> <span class="n">BinaryTree</span><span class="p">(</span><span class="n">new_node</span><span class="p">)</span>
</span><span class="line">            <span class="n">t</span><span class="o">.</span><span class="n">left_child</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">left_child</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">left_child</span> <span class="o">=</span> <span class="n">t</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">insert_right</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">new_node</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">right_child</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">right_child</span> <span class="o">=</span> <span class="n">BinaryTree</span><span class="p">(</span><span class="n">new_node</span><span class="p">)</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="n">t</span> <span class="o">=</span> <span class="n">BinaryTree</span><span class="p">(</span><span class="n">new_node</span><span class="p">)</span>
</span><span class="line">            <span class="n">t</span><span class="o">.</span><span class="n">right_child</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">right_child</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">right_child</span> <span class="o">=</span> <span class="n">t</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get_right_child</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">right_child</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get_left_child</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">left_child</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">set_root_val</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">obj</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">key</span> <span class="o">=</span> <span class="n">obj</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get_root_val</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">key</span>
</span><span class="line">
</span><span class="line"><span class="n">r</span> <span class="o">=</span> <span class="n">BinaryTree</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">get_root_val</span><span class="p">())</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">get_left_child</span><span class="p">())</span>
</span><span class="line"><span class="n">r</span><span class="o">.</span><span class="n">insert_left</span><span class="p">(</span><span class="s">&#39;b&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">get_left_child</span><span class="p">())</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">get_left_child</span><span class="p">()</span><span class="o">.</span><span class="n">get_root_val</span><span class="p">())</span>
</span><span class="line"><span class="n">r</span><span class="o">.</span><span class="n">insert_right</span><span class="p">(</span><span class="s">&#39;c&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">get_right_child</span><span class="p">())</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">get_right_child</span><span class="p">()</span><span class="o">.</span><span class="n">get_root_val</span><span class="p">())</span>
</span><span class="line"><span class="n">r</span><span class="o">.</span><span class="n">get_right_child</span><span class="p">()</span><span class="o">.</span><span class="n">set_root_val</span><span class="p">(</span><span class="s">&#39;hello&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">get_right_child</span><span class="p">()</span><span class="o">.</span><span class="n">get_root_val</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>6.二叉堆：根据堆的性质又可以分为最小堆和最大堆，是一种非常好的优先队列。在最小堆中孩子节点一定大于等于其父亲节点，最大堆反之。二叉堆实际上一棵完全二叉树，并且满足堆的性质。对于插入和查找操作的时间复杂度度都是$O(nlogn)$。</p>

<p>它的插入操作图示：</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/heapinsert.png" alt="image" /></p>

<p>去除根节点的操作图示：</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/heapdel.png" alt="image" /></p>

<p>注意，下面的实现中默认在初始的堆列表中插入了一个元素0，这样做可以保证堆的真实有效的元素个数和current_size值对应，而且最后一个元素的索引就对应了current_size。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">BinHeap</span><span class="p">:</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">current_size</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">perc_up</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">i</span><span class="p">):</span>
</span><span class="line">        <span class="k">while</span> <span class="n">i</span> <span class="o">//</span> <span class="mi">2</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span> <span class="c"># &gt;0 means this node is still available</span>
</span><span class="line">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="n">i</span> <span class="o">//</span> <span class="mi">2</span><span class="p">]:</span>
</span><span class="line">                <span class="n">tmp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="n">i</span> <span class="o">//</span> <span class="mi">2</span><span class="p">]</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="n">i</span> <span class="o">//</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span>
</span><span class="line">            <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">//</span> <span class="mi">2</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">current_size</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">current_size</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">perc_up</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">current_size</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">perc_down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">i</span><span class="p">):</span>
</span><span class="line">        <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="bp">self</span><span class="o">.</span><span class="n">current_size</span><span class="p">:</span>
</span><span class="line">            <span class="n">mc</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">min_child</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="n">mc</span><span class="p">]:</span>
</span><span class="line">                <span class="n">tmp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="n">mc</span><span class="p">]</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="n">mc</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span>
</span><span class="line">            <span class="n">i</span> <span class="o">=</span> <span class="n">mc</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">min_child</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">i</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">current_size</span><span class="p">:</span>
</span><span class="line">            <span class="k">return</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">2</span><span class="p">]</span> <span class="o">&lt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]:</span>
</span><span class="line">                <span class="k">return</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="k">return</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">del_min</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="n">ret_val</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">current_size</span><span class="p">]</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">current_size</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">current_size</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">perc_down</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">ret_val</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">build_heap</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">a_list</span><span class="p">):</span>
</span><span class="line">        <span class="n">i</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">current_size</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">heap_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">a_list</span><span class="p">[:]</span> <span class="c">#append original list</span>
</span><span class="line">        <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">):</span>
</span><span class="line">            <span class="c">#build the heap we only need to deal the first part!</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">perc_down</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">            <span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="n">a_list</span><span class="o">=</span><span class="p">[</span><span class="mi">9</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span><span class="line"><span class="n">bh</span><span class="o">=</span><span class="n">BinHeap</span><span class="p">();</span>
</span><span class="line"><span class="n">bh</span><span class="o">.</span><span class="n">build_heap</span><span class="p">(</span><span class="n">a_list</span><span class="p">);</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">bh</span><span class="o">.</span><span class="n">heap_list</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">bh</span><span class="o">.</span><span class="n">current_size</span><span class="p">)</span>
</span><span class="line"><span class="n">bh</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class="line"><span class="n">bh</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">bh</span><span class="o">.</span><span class="n">heap_list</span><span class="p">)</span>
</span><span class="line"><span class="n">bh</span><span class="o">.</span><span class="n">del_min</span><span class="p">();</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">bh</span><span class="o">.</span><span class="n">heap_list</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">bh</span><span class="o">.</span><span class="n">current_size</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>7.二叉搜索树 <a href="http://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9">on_wiki</a>：一种特殊的二叉树，它满足下面的性质：任何一个节点的key值都比它左子树上的节点的key值要大，但是比它右子树上的节点的key值要小。</p>

<p>难点在于删除节点的操作：</p>

<blockquote>
  <p>From wiki 
在二叉查找树删去一个结点，分三种情况讨论：
1.若<em>p结点为叶子结点，即PL(左子树)和PR(右子树)均为空树。由于删去叶子结点不破坏整棵树的结构，则只需修改其双亲结点的指针即可。
2.若</em>p结点只有左子树PL或右子树PR，此时只要令PL或PR直接成为其双亲结点<em>f的左子树（当</em>p是左子树）或右子树（当<em>p是右子树）即可，作此修改也不破坏二叉查找树的特性。
3.若</em>p结点的左子树和右子树均不空。<em>*在删去</em>p之后，为保持其它元素之间的相对位置不变，可按中序遍历保持有序进行调整<em>*，可以有两种做法：其一是令</em>p的左子树为<em>f的左/右(依</em>p是<em>f的左子树还是右子树而定)子树，</em>s为<em>p左子树的最右下的结点，而</em>p的右子树为<em>s的右子树；其二是令</em>p的直接前驱（in-order predecessor）或直接后继（in-order successor）替代*p，然后再从二叉查找树中删去它的直接前驱（或直接后继）。</p>

</blockquote>

<p>一份不错的讲解<a href="http://www.cnblogs.com/Anker/archive/2013/01/28/2880581.html">来自博客园</a></p>

<p><strong>引用开始</strong></p>

<hr />

<p>1.在二叉查找树中找某个节点的前驱和后继节点</p>

<p>给定一个二叉查找树中的结点，找出在中序遍历顺序下某个节点的前驱和后继。如果树中所有关键字都不相同，则某一结点x的前驱就是小于key[x]的所有关键字中最大的那个结点，后继即是大于key[x]中的所有关键字中最小的那个结点。根据二叉查找树的结构和性质，不用对关键字做任何比较，就可以找到某个结点的前驱和后继。</p>

<p>查找前驱步骤：先判断x是否有左子树，如果有则在left[x]中查找关键字最大的结点，即是x的前驱。如果没有左子树，则从x继续向上执行此操作，直到遇到某个结点是其父节点的右孩子结点，<strong>此时该父节点就是前驱</strong>。例如下图查找结点7的前驱结点6过程：</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/bst_pre.png" alt="image" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="n">TREE_SUCCESSOR</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">right</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">!=</span> <span class="nb">NULL</span>
</span><span class="line">        <span class="n">then</span> <span class="k">return</span> <span class="n">TREE_MINMUM</span><span class="p">(</span><span class="n">right</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</span><span class="line">    <span class="n">y</span><span class="o">=</span><span class="n">parent</span><span class="p">[</span><span class="n">x</span><span class="p">]</span>
</span><span class="line">    <span class="k">while</span> <span class="n">y</span><span class="o">!=</span> <span class="nb">NULL</span> <span class="n">and</span> <span class="n">x</span> <span class="o">==</span><span class="n">left</span><span class="p">[</span><span class="n">y</span><span class="p">]</span>
</span><span class="line">           <span class="k">do</span> <span class="n">x</span> <span class="o">=</span> <span class="n">y</span>
</span><span class="line">              <span class="n">y</span><span class="o">=</span><span class="n">parent</span><span class="p">[</span><span class="n">y</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">y</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>查找后继步骤：先判断x是否有右子树，如果有则在right[x]中查找关键字最小的结点，即使x的后继。如果没有右子树，则从x的父节点开始向上查找，直到遇到某个结点是其父结点的左儿子的结点时为止，<strong>此时该父节点就是后继</strong>。例如下图查找结点13的后继结点15的过程：</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/bst_later.png" alt="image" /></p>

<p>伪代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="n">TREE_PROCESSOR</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">right</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">!=</span> <span class="nb">NULL</span>
</span><span class="line">        <span class="n">then</span> <span class="k">return</span> <span class="n">TREE_MINMUM</span><span class="p">(</span><span class="n">right</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</span><span class="line">    <span class="n">y</span><span class="o">=</span><span class="n">parent</span><span class="p">[</span><span class="n">x</span><span class="p">]</span>
</span><span class="line">    <span class="k">while</span> <span class="n">y</span><span class="o">!=</span> <span class="nb">NULL</span> <span class="n">and</span> <span class="n">x</span> <span class="o">==</span><span class="n">right</span><span class="p">[</span><span class="n">y</span><span class="p">]</span>
</span><span class="line">           <span class="k">do</span> <span class="n">x</span> <span class="o">=</span> <span class="n">y</span>
</span><span class="line">              <span class="n">y</span><span class="o">=</span><span class="n">parent</span><span class="p">[</span><span class="n">y</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">y</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.删除节点操作</p>

<p>(1)结点z没有左右子树，则修改其父节点p[z]，使其为NULL。</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/bst_del1.png" alt="image" /></p>

<p>(2)如果结点z只有一个子树（左子树或者右子树），通过在其子结点与父节点建立一条链来删除z。</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/bst_del2.png" alt="image" /></p>

<p>(3)如果z有两个子女，则先删除z的后继y（y没有左孩子），在用y的内容来替代z的内容。</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/bst_del3.png" alt="image" /></p>

<hr />

<p><strong>引用结束</strong></p>

<p><a href="http://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9">wiki</a>上的python代码实现节点删除操作，比后面的python代码更加简洁易懂</p>

<p>代码采用了递归的形式处理，相当于只需要考虑了要删除的节点就在当前位置该如何处理，然后，对于只有左孩子节点或者只有右孩子结点或者没有孩子节点的情况直接进行节点覆盖就行了，但是，对于复杂的第三种情况，在左右孩子节点都存在的情况下，只需从它的右孩子结点中找到最小的那个元素即为要删除节点的后继(同理，可以找到左孩子结点中找到最大的那个元素，即为要删除节点的前驱)，然后复制后继节点中的内容到要删除的节点，最后删除后继节点即可。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">find_min</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>   <span class="c"># Gets minimum node (leftmost leaf) in a subtree</span>
</span><span class="line">    <span class="n">current_node</span> <span class="o">=</span> <span class="bp">self</span>
</span><span class="line">    <span class="k">while</span> <span class="n">current_node</span><span class="o">.</span><span class="n">left_child</span><span class="p">:</span>
</span><span class="line">        <span class="n">current_node</span> <span class="o">=</span> <span class="n">current_node</span><span class="o">.</span><span class="n">left_child</span>
</span><span class="line">    <span class="k">return</span> <span class="n">current_node</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">replace_node_in_parent</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">new_value</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="p">:</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">left_child</span><span class="p">:</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">left_child</span> <span class="o">=</span> <span class="n">new_value</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">right_child</span> <span class="o">=</span> <span class="n">new_value</span>
</span><span class="line">    <span class="k">if</span> <span class="n">new_value</span><span class="p">:</span>
</span><span class="line">        <span class="n">new_value</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">binary_tree_delete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">key</span> <span class="o">&lt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">key</span><span class="p">:</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">left_child</span><span class="o">.</span><span class="n">binary_tree_delete</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class="line">    <span class="k">elif</span> <span class="n">key</span> <span class="o">&gt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">key</span><span class="p">:</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">right_child</span><span class="o">.</span><span class="n">binary_tree_delete</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span> <span class="c"># delete the key here</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">left_child</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">right_child</span><span class="p">:</span> <span class="c"># if both children are present</span>
</span><span class="line">            <span class="n">successor</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">right_child</span><span class="o">.</span><span class="n">find_min</span><span class="p">()</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">key</span> <span class="o">=</span> <span class="n">successor</span><span class="o">.</span><span class="n">key</span>
</span><span class="line">            <span class="n">successor</span><span class="o">.</span><span class="n">binary_tree_delete</span><span class="p">(</span><span class="n">successor</span><span class="o">.</span><span class="n">key</span><span class="p">)</span>
</span><span class="line">        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">left_child</span><span class="p">:</span>   <span class="c"># if the node has only a *left* child</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">replace_node_in_parent</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">left_child</span><span class="p">)</span>
</span><span class="line">        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">right_child</span><span class="p">:</span>  <span class="c"># if the node has only a *right* child</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">replace_node_in_parent</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">right_child</span><span class="p">)</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span> <span class="c"># this node has no children</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">replace_node_in_parent</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>参考内容1中在第三种情况下使用的是第二种方案，并且是使用直接前驱来代替要删除的节点。</p>

<p>完整实现[参考内容1中的代码，相当冗余，但是可读性较好，个人认为如果要实现删除节点操作的话建议参考wiki上python代码的实现，也可以查看参考内容1中对代码的详细解释]</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
<span class="line-number">150</span>
<span class="line-number">151</span>
<span class="line-number">152</span>
<span class="line-number">153</span>
<span class="line-number">154</span>
<span class="line-number">155</span>
<span class="line-number">156</span>
<span class="line-number">157</span>
<span class="line-number">158</span>
<span class="line-number">159</span>
<span class="line-number">160</span>
<span class="line-number">161</span>
<span class="line-number">162</span>
<span class="line-number">163</span>
<span class="line-number">164</span>
<span class="line-number">165</span>
<span class="line-number">166</span>
<span class="line-number">167</span>
<span class="line-number">168</span>
<span class="line-number">169</span>
<span class="line-number">170</span>
<span class="line-number">171</span>
<span class="line-number">172</span>
<span class="line-number">173</span>
<span class="line-number">174</span>
<span class="line-number">175</span>
<span class="line-number">176</span>
<span class="line-number">177</span>
<span class="line-number">178</span>
<span class="line-number">179</span>
<span class="line-number">180</span>
<span class="line-number">181</span>
<span class="line-number">182</span>
<span class="line-number">183</span>
<span class="line-number">184</span>
<span class="line-number">185</span>
<span class="line-number">186</span>
<span class="line-number">187</span>
<span class="line-number">188</span>
<span class="line-number">189</span>
<span class="line-number">190</span>
<span class="line-number">191</span>
<span class="line-number">192</span>
<span class="line-number">193</span>
<span class="line-number">194</span>
<span class="line-number">195</span>
<span class="line-number">196</span>
<span class="line-number">197</span>
<span class="line-number">198</span>
<span class="line-number">199</span>
<span class="line-number">200</span>
<span class="line-number">201</span>
<span class="line-number">202</span>
<span class="line-number">203</span>
<span class="line-number">204</span>
<span class="line-number">205</span>
<span class="line-number">206</span>
<span class="line-number">207</span>
<span class="line-number">208</span>
<span class="line-number">209</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">TreeNode</span><span class="p">:</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">val</span><span class="p">,</span><span class="n">left</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span><span class="n">right</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span><span class="n">parent</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">key</span> <span class="o">=</span> <span class="n">key</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">payload</span> <span class="o">=</span> <span class="n">val</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="n">left</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="n">right</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">parent</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">hasLeftChild</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">leftChild</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">hasRightChild</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">rightChild</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">isLeftChild</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">leftChild</span> <span class="o">==</span> <span class="bp">self</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">isRightChild</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">==</span> <span class="bp">self</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">isRoot</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">isLeaf</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="ow">not</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">rightChild</span> <span class="ow">or</span> <span class="bp">self</span><span class="o">.</span><span class="n">leftChild</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">hasAnyChildren</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">rightChild</span> <span class="ow">or</span> <span class="bp">self</span><span class="o">.</span><span class="n">leftChild</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">hasBothChildren</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">rightChild</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">leftChild</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">replaceNodeData</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">value</span><span class="p">,</span><span class="n">lc</span><span class="p">,</span><span class="n">rc</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">key</span> <span class="o">=</span> <span class="n">key</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">payload</span> <span class="o">=</span> <span class="n">value</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="n">lc</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="n">rc</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">hasLeftChild</span><span class="p">():</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">leftChild</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="bp">self</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">hasRightChild</span><span class="p">():</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">rightChild</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="bp">self</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">BinarySearchTree</span><span class="p">:</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">root</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">length</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">put</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">val</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="p">:</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">_put</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">val</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="p">)</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">root</span> <span class="o">=</span> <span class="n">TreeNode</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">val</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">_put</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">val</span><span class="p">,</span><span class="n">currentNode</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">key</span> <span class="o">&lt;</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">key</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">hasLeftChild</span><span class="p">():</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">_put</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">val</span><span class="p">,</span><span class="n">currentNode</span><span class="o">.</span><span class="n">leftChild</span><span class="p">)</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">currentNode</span><span class="o">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="n">TreeNode</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">val</span><span class="p">,</span><span class="n">parent</span><span class="o">=</span><span class="n">currentNode</span><span class="p">)</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">hasRightChild</span><span class="p">():</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">_put</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">val</span><span class="p">,</span><span class="n">currentNode</span><span class="o">.</span><span class="n">rightChild</span><span class="p">)</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">currentNode</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="n">TreeNode</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">val</span><span class="p">,</span><span class="n">parent</span><span class="o">=</span><span class="n">currentNode</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__setitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">key</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="p">:</span>
</span><span class="line">            <span class="n">res</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_get</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="p">)</span>
</span><span class="line">            <span class="k">if</span> <span class="n">res</span><span class="p">:</span>
</span><span class="line">                <span class="k">return</span> <span class="n">res</span><span class="o">.</span><span class="n">payload</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="k">return</span> <span class="bp">None</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="k">return</span> <span class="bp">None</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">_get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">currentNode</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="ow">not</span> <span class="n">currentNode</span><span class="p">:</span>
</span><span class="line">            <span class="k">return</span> <span class="bp">None</span>
</span><span class="line">        <span class="k">elif</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">key</span> <span class="o">==</span> <span class="n">key</span><span class="p">:</span>
</span><span class="line">            <span class="k">return</span> <span class="n">currentNode</span>
</span><span class="line">        <span class="k">elif</span> <span class="n">key</span> <span class="o">&lt;</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">key</span><span class="p">:</span>
</span><span class="line">            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_get</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">currentNode</span><span class="o">.</span><span class="n">leftChild</span><span class="p">)</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_get</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">currentNode</span><span class="o">.</span><span class="n">rightChild</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">key</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__contains__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">key</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_get</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="p">):</span>
</span><span class="line">            <span class="k">return</span> <span class="bp">True</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="k">return</span> <span class="bp">False</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">key</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">            <span class="n">nodeToRemove</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_get</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="p">)</span>
</span><span class="line">            <span class="k">if</span> <span class="n">nodeToRemove</span><span class="p">:</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">nodeToRemove</span><span class="p">)</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="k">raise</span> <span class="ne">KeyError</span><span class="p">(</span><span class="s">&#39;Error, key not in tree&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">key</span> <span class="o">==</span> <span class="n">key</span><span class="p">:</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">root</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="k">raise</span> <span class="ne">KeyError</span><span class="p">(</span><span class="s">&#39;Error, key not in tree&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__delitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">key</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">spliceOut</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">isLeaf</span><span class="p">():</span>
</span><span class="line">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">isLeftChild</span><span class="p">():</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">hasAnyChildren</span><span class="p">():</span>
</span><span class="line">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">hasLeftChild</span><span class="p">():</span>
</span><span class="line">                <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">isLeftChild</span><span class="p">():</span>
</span><span class="line">                    <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">leftChild</span>
</span><span class="line">                <span class="k">else</span><span class="p">:</span>
</span><span class="line">                    <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">leftChild</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">leftChild</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">isLeftChild</span><span class="p">():</span>
</span><span class="line">                    <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">rightChild</span>
</span><span class="line">                <span class="k">else</span><span class="p">:</span>
</span><span class="line">                    <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">rightChild</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">rightChild</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">findSuccessor</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="n">succ</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">hasRightChild</span><span class="p">():</span>
</span><span class="line">            <span class="n">succ</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">rightChild</span><span class="o">.</span><span class="n">findMin</span><span class="p">()</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="p">:</span>
</span><span class="line">                <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">isLeftChild</span><span class="p">():</span>
</span><span class="line">                    <span class="n">succ</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span>
</span><span class="line">                <span class="k">else</span><span class="p">:</span>
</span><span class="line">                    <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">                    <span class="n">succ</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">findSuccessor</span><span class="p">()</span>
</span><span class="line">                    <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="bp">self</span>
</span><span class="line">        <span class="k">return</span> <span class="n">succ</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">findMin</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="n">current</span> <span class="o">=</span> <span class="bp">self</span>
</span><span class="line">        <span class="k">while</span> <span class="n">current</span><span class="o">.</span><span class="n">hasLeftChild</span><span class="p">():</span>
</span><span class="line">            <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="n">leftChild</span>
</span><span class="line">        <span class="k">return</span> <span class="n">current</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">remove</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">currentNode</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">isLeaf</span><span class="p">():</span> <span class="c">#leaf</span>
</span><span class="line">            <span class="k">if</span> <span class="n">currentNode</span> <span class="o">==</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">leftChild</span><span class="p">:</span>
</span><span class="line">                <span class="n">currentNode</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">currentNode</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">        <span class="k">elif</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">hasBothChildren</span><span class="p">():</span> <span class="c">#interior</span>
</span><span class="line">            <span class="n">succ</span> <span class="o">=</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">findSuccessor</span><span class="p">()</span>
</span><span class="line">            <span class="n">succ</span><span class="o">.</span><span class="n">spliceOut</span><span class="p">()</span>
</span><span class="line">            <span class="n">currentNode</span><span class="o">.</span><span class="n">key</span> <span class="o">=</span> <span class="n">succ</span><span class="o">.</span><span class="n">key</span>
</span><span class="line">            <span class="n">currentNode</span><span class="o">.</span><span class="n">payload</span> <span class="o">=</span> <span class="n">succ</span><span class="o">.</span><span class="n">payload</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span> <span class="c"># this node has one child</span>
</span><span class="line">            <span class="k">if</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">hasLeftChild</span><span class="p">():</span>
</span><span class="line">                <span class="k">if</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">isLeftChild</span><span class="p">():</span>
</span><span class="line">                    <span class="n">currentNode</span><span class="o">.</span><span class="n">leftChild</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">parent</span>
</span><span class="line">                    <span class="n">currentNode</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">leftChild</span>
</span><span class="line">                <span class="k">elif</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">isRightChild</span><span class="p">():</span>
</span><span class="line">                    <span class="n">currentNode</span><span class="o">.</span><span class="n">leftChild</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">parent</span>
</span><span class="line">                    <span class="n">currentNode</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">leftChild</span>
</span><span class="line">                <span class="k">else</span><span class="p">:</span>
</span><span class="line">                    <span class="n">currentNode</span><span class="o">.</span><span class="n">replaceNodeData</span><span class="p">(</span><span class="n">currentNode</span><span class="o">.</span><span class="n">leftChild</span><span class="o">.</span><span class="n">key</span><span class="p">,</span>
</span><span class="line">                                                <span class="n">currentNode</span><span class="o">.</span><span class="n">leftChild</span><span class="o">.</span><span class="n">payload</span><span class="p">,</span>
</span><span class="line">                                                <span class="n">currentNode</span><span class="o">.</span><span class="n">leftChild</span><span class="o">.</span><span class="n">leftChild</span><span class="p">,</span>
</span><span class="line">                                                <span class="n">currentNode</span><span class="o">.</span><span class="n">leftChild</span><span class="o">.</span><span class="n">rightChild</span><span class="p">)</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="k">if</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">isLeftChild</span><span class="p">():</span>
</span><span class="line">                    <span class="n">currentNode</span><span class="o">.</span><span class="n">rightChild</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">parent</span>
</span><span class="line">                    <span class="n">currentNode</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">leftChild</span> <span class="o">=</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">rightChild</span>
</span><span class="line">                <span class="k">elif</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">isRightChild</span><span class="p">():</span>
</span><span class="line">                    <span class="n">currentNode</span><span class="o">.</span><span class="n">rightChild</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">parent</span>
</span><span class="line">                    <span class="n">currentNode</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">rightChild</span> <span class="o">=</span> <span class="n">currentNode</span><span class="o">.</span><span class="n">rightChild</span>
</span><span class="line">                <span class="k">else</span><span class="p">:</span>
</span><span class="line">                    <span class="n">currentNode</span><span class="o">.</span><span class="n">replaceNodeData</span><span class="p">(</span><span class="n">currentNode</span><span class="o">.</span><span class="n">rightChild</span><span class="o">.</span><span class="n">key</span><span class="p">,</span>
</span><span class="line">                                                <span class="n">currentNode</span><span class="o">.</span><span class="n">rightChild</span><span class="o">.</span><span class="n">payload</span><span class="p">,</span>
</span><span class="line">                                                <span class="n">currentNode</span><span class="o">.</span><span class="n">rightChild</span><span class="o">.</span><span class="n">leftChild</span><span class="p">,</span>
</span><span class="line">                                                <span class="n">currentNode</span><span class="o">.</span><span class="n">rightChild</span><span class="o">.</span><span class="n">rightChild</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">mytree</span> <span class="o">=</span> <span class="n">BinarySearchTree</span><span class="p">()</span>
</span><span class="line"><span class="n">mytree</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="s">&quot;red&quot;</span>
</span><span class="line"><span class="n">mytree</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="s">&quot;blue&quot;</span>
</span><span class="line"><span class="n">mytree</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="s">&quot;yellow&quot;</span>
</span><span class="line"><span class="n">mytree</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="s">&quot;at&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">mytree</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">mytree</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-datastructures/">http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-datastructures/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Algorithms - Sort]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/07/python-algorithms-sort/"/>
    <updated>2014-05-07T22:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/07/python-algorithms-sort</id>
    <content type="html"><![CDATA[<p>参考内容：</p>

<p>1.<a href="http://interactivepython.org/courselib/static/pythonds/index.html">Problem Solving with Python</a>
Chapter5: Search and Sorting <a href="http://interactivepython.org/courselib/static/pythonds/SortSearch/sorting.html">online_link</a></p>

<p>2.<a href="http://en.wikipedia.org/wiki/Introduction_to_Algorithms">算法导论</a></p>

<h4 id="section">排序总结</h4>

<p>1.冒泡排序(bubble sort)：每个回合都从第一个元素开始和它后面的元素比较，如果比它后面的元素更大的话就交换，一直重复，直到这个元素到了它能到达的位置。注意检测是否已经完成了排序，如果已完成就可以退出了。时间复杂度$O(n^2)$</p>

<p><strong>Python支持对两个数字同时进行交换！<code>a,b = b,a</code>就可以交换a和b的值了。</strong></p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/bubblesort.png" alt="image" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">short_bubble_sort</span><span class="p">(</span><span class="n">a_list</span><span class="p">):</span>
</span><span class="line">    <span class="n">exchanges</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">    <span class="n">pass_num</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">while</span> <span class="n">pass_num</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">exchanges</span><span class="p">:</span>
</span><span class="line">        <span class="n">exchanges</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class="line">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">pass_num</span><span class="p">):</span>
</span><span class="line">            <span class="k">if</span> <span class="n">a_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">a_list</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]:</span>
</span><span class="line">                <span class="n">exchanges</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">                <span class="c"># temp = a_list[i]</span>
</span><span class="line">                <span class="c"># a_list[i] = a_list[i + 1]</span>
</span><span class="line">                <span class="c"># a_list[i + 1] = temp</span>
</span><span class="line">                <span class="n">a_list</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">a_list</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">a_list</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="n">a_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">        <span class="n">pass_num</span> <span class="o">=</span> <span class="n">pass_num</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="line">    <span class="n">a_list</span><span class="o">=</span><span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">110</span><span class="p">,</span> <span class="mi">100</span><span class="p">]</span>
</span><span class="line">    <span class="n">short_bubble_sort</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.选择排序(selection sort)：每个回合都选择出剩下的元素中最大的那个，选择的方法是首先默认第一元素是最大的，如果后面的元素比它大的话，那就更新剩下的最大的元素值，找到剩下元素中最大的之后将它放入到合适的位置就行了。时间复杂度$O(n^2)$</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/selectionsort.png" alt="image" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">selection_sort</span><span class="p">(</span><span class="n">a_list</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">fill_slot</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class="line">        <span class="n">pos_of_max</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">        <span class="k">for</span> <span class="n">location</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">fill_slot</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
</span><span class="line">            <span class="k">if</span> <span class="n">a_list</span><span class="p">[</span><span class="n">location</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">a_list</span><span class="p">[</span><span class="n">pos_of_max</span><span class="p">]:</span>
</span><span class="line">                <span class="n">pos_of_max</span> <span class="o">=</span> <span class="n">location</span>
</span><span class="line">        <span class="c"># temp = a_list[fill_slot]</span>
</span><span class="line">        <span class="c"># a_list[fill_slot] = a_list[pos_of_max]</span>
</span><span class="line">        <span class="c"># a_list[pos_of_max] = temp</span>
</span><span class="line">        <span class="n">a_list</span><span class="p">[</span><span class="n">fill_slot</span><span class="p">],</span><span class="n">a_list</span><span class="p">[</span><span class="n">pos_of_max</span><span class="p">]</span><span class="o">=</span><span class="n">a_list</span><span class="p">[</span><span class="n">pos_of_max</span><span class="p">],</span><span class="n">a_list</span><span class="p">[</span><span class="n">fill_slot</span><span class="p">]</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">a_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">54</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">20</span><span class="p">]</span>
</span><span class="line"><span class="n">selection_sort</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.插入排序(insertion sort)：每次假设前面的元素都是已经排好序了的，然后将当前位置的元素插入到原来的序列中，为了尽快地查找合适的插入位置，可以使用二分查找。时间复杂度$O(n^2)$，别误以为二分查找可以降低它的复杂度，因为插入排序还需要移动元素的操作！</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/insertionsort.png" alt="image" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">insertion_sort</span><span class="p">(</span><span class="n">a_list</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">index</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_list</span><span class="p">)):</span>
</span><span class="line">        <span class="n">current_value</span> <span class="o">=</span> <span class="n">a_list</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class="line">        <span class="n">position</span> <span class="o">=</span> <span class="n">index</span>
</span><span class="line">        <span class="k">while</span> <span class="n">position</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">a_list</span><span class="p">[</span><span class="n">position</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">current_value</span><span class="p">:</span>
</span><span class="line">            <span class="n">a_list</span><span class="p">[</span><span class="n">position</span><span class="p">]</span> <span class="o">=</span> <span class="n">a_list</span><span class="p">[</span><span class="n">position</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
</span><span class="line">            <span class="n">position</span> <span class="o">=</span> <span class="n">position</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">        <span class="n">a_list</span><span class="p">[</span><span class="n">position</span><span class="p">]</span> <span class="o">=</span> <span class="n">current_value</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">insertion_sort_binarysearch</span><span class="p">(</span><span class="n">a_list</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">index</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_list</span><span class="p">)):</span>
</span><span class="line">        <span class="n">current_value</span> <span class="o">=</span> <span class="n">a_list</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class="line">        <span class="n">position</span> <span class="o">=</span> <span class="n">index</span>
</span><span class="line">        <span class="n">low</span><span class="o">=</span><span class="mi">0</span>
</span><span class="line">        <span class="n">high</span><span class="o">=</span><span class="n">index</span><span class="o">-</span><span class="mi">1</span>
</span><span class="line">        <span class="k">while</span> <span class="n">low</span><span class="o">&lt;=</span><span class="n">high</span><span class="p">:</span>
</span><span class="line">            <span class="n">mid</span><span class="o">=</span><span class="p">(</span><span class="n">low</span><span class="o">+</span><span class="n">high</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span>
</span><span class="line">            <span class="k">if</span> <span class="n">a_list</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span><span class="o">&gt;</span><span class="n">current_value</span><span class="p">:</span>
</span><span class="line">                <span class="n">high</span><span class="o">=</span><span class="n">mid</span><span class="o">-</span><span class="mi">1</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">low</span><span class="o">=</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">        <span class="k">while</span> <span class="n">position</span> <span class="o">&gt;</span> <span class="n">low</span><span class="p">:</span>
</span><span class="line">            <span class="n">a_list</span><span class="p">[</span><span class="n">position</span><span class="p">]</span> <span class="o">=</span> <span class="n">a_list</span><span class="p">[</span><span class="n">position</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
</span><span class="line">        <span class="n">a_list</span><span class="p">[</span><span class="n">position</span><span class="p">]</span> <span class="o">=</span> <span class="n">current_value</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">a_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">54</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">20</span><span class="p">]</span>
</span><span class="line"><span class="n">insertion_sort</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span><span class="line"><span class="n">insertion_sort_binarysearch</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4.合并排序(merge sort)：典型的是二路合并排序，将原始数据集分成两部分(不一定能够均分)，分别对它们进行排序，然后将排序后的子数据集进行合并，这是典型的分治法策略。时间复杂度$O(nlogn)$</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/mergesort.png" alt="image" /></p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/mergesort2.png" alt="image" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">merge_sort</span><span class="p">(</span><span class="n">a_list</span><span class="p">):</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Splitting &quot;</span><span class="p">,</span> <span class="n">a_list</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">        <span class="n">mid</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
</span><span class="line">        <span class="n">left_half</span> <span class="o">=</span> <span class="n">a_list</span><span class="p">[:</span><span class="n">mid</span><span class="p">]</span>
</span><span class="line">        <span class="n">right_half</span> <span class="o">=</span> <span class="n">a_list</span><span class="p">[</span><span class="n">mid</span><span class="p">:]</span>
</span><span class="line">        <span class="n">merge_sort</span><span class="p">(</span><span class="n">left_half</span><span class="p">)</span>
</span><span class="line">        <span class="n">merge_sort</span><span class="p">(</span><span class="n">right_half</span><span class="p">)</span>
</span><span class="line">        <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class="line">        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">left_half</span><span class="p">)</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">right_half</span><span class="p">):</span>
</span><span class="line">            <span class="k">if</span> <span class="n">left_half</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">right_half</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
</span><span class="line">                <span class="n">a_list</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">left_half</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">                <span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">a_list</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">right_half</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">                <span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">            <span class="n">k</span><span class="o">=</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">left_half</span><span class="p">):</span>
</span><span class="line">            <span class="n">a_list</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">left_half</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">            <span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">            <span class="n">k</span><span class="o">=</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">        <span class="k">while</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">right_half</span><span class="p">):</span>
</span><span class="line">            <span class="n">a_list</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">right_half</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">            <span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">            <span class="n">k</span><span class="o">=</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Merging &quot;</span><span class="p">,</span> <span class="n">a_list</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">a_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">54</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">20</span><span class="p">]</span>
</span><span class="line"><span class="n">merge_sort</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>算法导论2-4题利用合并排序可以在$O(nlogn)$的最坏情况下得到包含n个元素的数组的逆序对的数目。[下面使用的是C++来实现的，合并排序的代码格式类似算法导论]</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">calculateInversions</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">p</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">);</span>
</span><span class="line"><span class="kt">int</span> <span class="n">mergeInversions</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">p</span><span class="p">,</span> <span class="kt">int</span> <span class="n">q</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">1</span><span class="p">};</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">calculateInversions</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;count inversions : &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">count</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">calculateInversions</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">p</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="kt">int</span> <span class="n">count</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class="line">	<span class="k">if</span><span class="p">(</span><span class="n">p</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="kt">int</span> <span class="n">q</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line">        <span class="n">count</span> <span class="o">+=</span> <span class="n">calculateInversions</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">);</span>
</span><span class="line">        <span class="n">count</span> <span class="o">+=</span> <span class="n">calculateInversions</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class="line">        <span class="n">count</span> <span class="o">+=</span> <span class="n">mergeInversions</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">return</span> <span class="n">count</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">mergeInversions</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">p</span><span class="p">,</span> <span class="kt">int</span> <span class="n">q</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">){</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">count</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">n1</span><span class="o">=</span><span class="n">q</span><span class="o">-</span><span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">n2</span><span class="o">=</span><span class="n">r</span><span class="o">-</span><span class="n">q</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">left</span><span class="p">[</span><span class="n">n1</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="n">right</span><span class="p">[</span><span class="n">n2</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">left</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">arr</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="n">i</span><span class="p">];</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">n2</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">right</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">arr</span><span class="p">[</span><span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="o">+</span><span class="n">j</span><span class="p">];</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">left</span><span class="p">[</span><span class="n">n1</span><span class="p">]</span><span class="o">=</span><span class="n">INT32_MAX</span><span class="p">;</span>
</span><span class="line">    <span class="n">right</span><span class="p">[</span><span class="n">n2</span><span class="p">]</span><span class="o">=</span><span class="n">INT32_MAX</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="n">p</span><span class="p">;</span> <span class="n">k</span><span class="o">&lt;=</span><span class="n">r</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">left</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;=</span><span class="n">right</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line">            <span class="n">arr</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">=</span><span class="n">left</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class="line">            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class="line">            <span class="n">arr</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">=</span><span class="n">right</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class="line">            <span class="n">count</span> <span class="o">+=</span> <span class="n">n1</span><span class="o">-</span><span class="n">i</span><span class="p">;</span>
</span><span class="line">            <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>5.快速排序(quick sort)：</p>

<p>想法一：如下图所示，它选择第一个元素作为主元，它同样可以按照下面提到的算法导论中将数组分成了4个不同的部分，但是这里其实有更好的解释方法。<strong>首先，它每次都是选择第一个元素都为主元，这个回合就是要确定主元的位置；然后，有两个指针，一个leftmark指向主元的后面一个位置，另一个rightmark指向要排序的数组最后一个元素；接着，两个指针分别向中间移动，leftmark遇到比主元大的元素停止，rightmark遇到比主元小的元素停止，如果此时leftmark&lt;rightmark，也就是说中间还有未处理(未确定与主元大小关系)的元素，那么就交换leftmark和rightmark位置上的元素，然后重复刚才的移动操作，直到rightmark&lt;leftmark；最后，停止移动时候rightmark就是主元要放置的位置，因为它停在一个比主元小的元素的位置上，之后交换主元和rightmark指向的元素即可。完了之后，递归地对主元左右两边的数组进行排序即可。</strong></p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/quicksort.png" alt="image" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">quick_sort</span><span class="p">(</span><span class="n">a_list</span><span class="p">):</span>
</span><span class="line">    <span class="n">quick_sort_helper</span><span class="p">(</span><span class="n">a_list</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">quick_sort_helper</span><span class="p">(</span><span class="n">a_list</span><span class="p">,</span> <span class="n">first</span><span class="p">,</span> <span class="n">last</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">first</span> <span class="o">&lt;</span> <span class="n">last</span><span class="p">:</span>
</span><span class="line">        <span class="n">split_point</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="n">a_list</span><span class="p">,</span> <span class="n">first</span><span class="p">,</span> <span class="n">last</span><span class="p">)</span>
</span><span class="line">        <span class="n">quick_sort_helper</span><span class="p">(</span><span class="n">a_list</span><span class="p">,</span> <span class="n">first</span><span class="p">,</span> <span class="n">split_point</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">        <span class="n">quick_sort_helper</span><span class="p">(</span><span class="n">a_list</span><span class="p">,</span> <span class="n">split_point</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">last</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">partition</span><span class="p">(</span><span class="n">a_list</span><span class="p">,</span> <span class="n">first</span><span class="p">,</span> <span class="n">last</span><span class="p">):</span>
</span><span class="line">    <span class="n">pivot_value</span> <span class="o">=</span> <span class="n">a_list</span><span class="p">[</span><span class="n">first</span><span class="p">]</span>
</span><span class="line">    <span class="n">left_mark</span> <span class="o">=</span> <span class="n">first</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">    <span class="n">right_mark</span> <span class="o">=</span> <span class="n">last</span>
</span><span class="line">    <span class="n">done</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class="line">    <span class="k">while</span> <span class="ow">not</span> <span class="n">done</span><span class="p">:</span>
</span><span class="line">        <span class="k">while</span> <span class="n">left_mark</span> <span class="o">&lt;=</span> <span class="n">right_mark</span> <span class="ow">and</span> <span class="n">a_list</span><span class="p">[</span><span class="n">left_mark</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">pivot_value</span><span class="p">:</span>
</span><span class="line">            <span class="n">left_mark</span> <span class="o">=</span> <span class="n">left_mark</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">        <span class="k">while</span> <span class="n">a_list</span><span class="p">[</span><span class="n">right_mark</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">pivot_value</span> <span class="ow">and</span> <span class="n">right_mark</span> <span class="o">&gt;=</span> <span class="n">left_mark</span><span class="p">:</span>
</span><span class="line">            <span class="n">right_mark</span> <span class="o">=</span> <span class="n">right_mark</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">        <span class="k">if</span> <span class="n">right_mark</span> <span class="o">&lt;</span> <span class="n">left_mark</span><span class="p">:</span>
</span><span class="line">            <span class="n">done</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="n">temp</span> <span class="o">=</span> <span class="n">a_list</span><span class="p">[</span><span class="n">left_mark</span><span class="p">]</span>
</span><span class="line">            <span class="n">a_list</span><span class="p">[</span><span class="n">left_mark</span><span class="p">]</span> <span class="o">=</span> <span class="n">a_list</span><span class="p">[</span><span class="n">right_mark</span><span class="p">]</span>
</span><span class="line">            <span class="n">a_list</span><span class="p">[</span><span class="n">right_mark</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span>
</span><span class="line">    <span class="n">temp</span> <span class="o">=</span> <span class="n">a_list</span><span class="p">[</span><span class="n">first</span><span class="p">]</span>
</span><span class="line">    <span class="n">a_list</span><span class="p">[</span><span class="n">first</span><span class="p">]</span> <span class="o">=</span> <span class="n">a_list</span><span class="p">[</span><span class="n">right_mark</span><span class="p">]</span>
</span><span class="line">    <span class="n">a_list</span><span class="p">[</span><span class="n">right_mark</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span>
</span><span class="line">    <span class="k">return</span> <span class="n">right_mark</span>
</span><span class="line">
</span><span class="line"><span class="n">a_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">54</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">20</span><span class="p">]</span>
</span><span class="line"><span class="n">quick_sort</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>想法二：如下图所示，它选择最后的那个元素作为主元，它的思路是将数组划分成4部分：</p>

<p>第一部分：$p \le k \le i, A[k] \le pivot$</p>

<p>第二部分：$i+1 \le k \le j-1, A[k] \gt pivot$</p>

<p>第三部分：$j \le k \le r-1, A[k]$可以取任何值(因为它们还没有进行处理)。</p>

<p>第四部分：$p \le k \le i, A[k] = pivot$</p>

<p><strong>首先，让i指向要排序的数组的第一个元素的前面，p和j都指向第一个元素；然后，一直移动j直到主元前一个位置，一旦发现一个大于主元的元素就让i指向它的下一个位置，然后交换i和j对应位置上的元素。这样一定是可行的，因为i一直都是指向已发现的小于主元的元素中的最后一个，从i+1开始就大于主元了(或者还未确定/未处理)，而j一直都是指向大于主元的元素中最后一个的后面一个位置，所以i+1和j位置上的元素交换就可以使得j发现的这个小于主元的元素移动到第一部分，而i+1位置上大于主元的元素移动到j的位置上，即第二部分的最后一个位置上。</strong></p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/quicksort_cn.png" alt="image" /></p>

<p>根据算法导论中的伪代码的C++版本实现</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">// partition, locate the pivot value in properate position</span>
</span><span class="line"><span class="kt">int</span> <span class="n">partition</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">low</span><span class="p">,</span> <span class="kt">int</span> <span class="n">high</span><span class="p">){</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">key</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">high</span><span class="p">];</span><span class="c1">//pivot</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">low</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">temp</span><span class="p">;</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">low</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">high</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&lt;</span><span class="n">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">            <span class="n">temp</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class="line">            <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class="line">            <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">temp</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">temp</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">high</span><span class="p">];</span>
</span><span class="line">    <span class="n">a</span><span class="p">[</span><span class="n">high</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class="line">    <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span><span class="c1">//i+1 is the split point</span>
</span><span class="line">    <span class="k">return</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// quick sort</span>
</span><span class="line"><span class="kt">void</span> <span class="n">quicksort</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">low</span><span class="p">,</span> <span class="kt">int</span> <span class="n">high</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">low</span><span class="p">,</span><span class="n">high</span><span class="p">);</span>
</span><span class="line">        <span class="n">quicksort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">        <span class="n">quicksort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">high</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// print array</span>
</span><span class="line"><span class="kt">void</span> <span class="n">print</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span><span class="kt">int</span> <span class="n">len</span><span class="p">){</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; &quot;</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">a</span><span class="p">[]</span><span class="o">=</span><span class="p">{</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">33</span><span class="p">,</span><span class="mi">28</span><span class="p">,</span><span class="mi">19</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">};</span>
</span><span class="line">    <span class="n">quicksort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class="line">    <span class="n">print</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">11</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>由于快排每次都能够确定一个元素在数组中最终的位置，所以可以用快排来解决很多变种问题，例如在线性时间内求中位数问题。</p>

<p>6.希尔排序：类似合并排序和插入排序的结合体，二路合并排序将原来的数组分成左右两部分，希尔排序则将数组按照一定的间隔分成几部分，每部分采用插入排序来排序，有意思的是这样做了之后，元素很多情况下就差不多在它应该呆的位置，所以效率不一定比插入排序差。时间复杂度为$[O(n),O(n^2)]$。</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/shellsort.png" alt="image" /></p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/shellsort2.png" alt="image" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">shell_sort</span><span class="p">(</span><span class="n">a_list</span><span class="p">):</span>
</span><span class="line">    <span class="c">#how many sublists, also how many elements in a sublist</span>
</span><span class="line">    <span class="n">sublist_count</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
</span><span class="line">    <span class="k">while</span> <span class="n">sublist_count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">        <span class="k">for</span> <span class="n">start_position</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sublist_count</span><span class="p">):</span>
</span><span class="line">            <span class="n">gap_insertion_sort</span><span class="p">(</span><span class="n">a_list</span><span class="p">,</span> <span class="n">start_position</span><span class="p">,</span> <span class="n">sublist_count</span><span class="p">)</span>
</span><span class="line">        <span class="k">print</span><span class="p">(</span><span class="s">&quot;After increments of size&quot;</span><span class="p">,</span> <span class="n">sublist_count</span><span class="p">,</span> <span class="s">&quot;The list is&quot;</span><span class="p">,</span> <span class="n">a_list</span><span class="p">)</span>
</span><span class="line">        <span class="n">sublist_count</span> <span class="o">=</span> <span class="n">sublist_count</span> <span class="o">//</span> <span class="mi">2</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">gap_insertion_sort</span><span class="p">(</span><span class="n">a_list</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">gap</span><span class="p">):</span>
</span><span class="line">    <span class="c">#start+gap is the second element in this sublist</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">gap</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_list</span><span class="p">),</span> <span class="n">gap</span><span class="p">):</span>
</span><span class="line">        <span class="n">current_value</span> <span class="o">=</span> <span class="n">a_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">        <span class="n">position</span> <span class="o">=</span> <span class="n">i</span>
</span><span class="line">        <span class="k">while</span> <span class="n">position</span> <span class="o">&gt;=</span> <span class="n">gap</span> <span class="ow">and</span> <span class="n">a_list</span><span class="p">[</span><span class="n">position</span> <span class="o">-</span> <span class="n">gap</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">current_value</span><span class="p">:</span>
</span><span class="line">            <span class="n">a_list</span><span class="p">[</span><span class="n">position</span><span class="p">]</span> <span class="o">=</span> <span class="n">a_list</span><span class="p">[</span><span class="n">position</span> <span class="o">-</span> <span class="n">gap</span><span class="p">]</span> <span class="c">#move backward</span>
</span><span class="line">            <span class="n">position</span> <span class="o">=</span> <span class="n">position</span> <span class="o">-</span> <span class="n">gap</span>
</span><span class="line">            <span class="n">a_list</span><span class="p">[</span><span class="n">position</span><span class="p">]</span> <span class="o">=</span> <span class="n">current_value</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">a_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">54</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">88</span><span class="p">]</span>
</span><span class="line"><span class="n">shell_sort</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/07/python-algorithms-sort/">http://hujiaweibujidao.github.io/blog/2014/05/07/python-algorithms-sort/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Algorithms - Search]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/07/python-algorithms-search/"/>
    <updated>2014-05-07T16:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/07/python-algorithms-search</id>
    <content type="html"><![CDATA[<p>参考内容：</p>

<p>1.<a href="http://interactivepython.org/courselib/static/pythonds/index.html">Problem Solving with Python</a>
Chapter5: Search and Sorting <a href="http://interactivepython.org/courselib/static/pythonds/SortSearch/searching.html#searching">online_link</a></p>

<p>2.<a href="http://en.wikipedia.org/wiki/Introduction_to_Algorithms">算法导论</a></p>

<h4 id="section">搜索总结</h4>

<p>(1)顺序查找：O(n)</p>

<p>(2)二分查找：O(lgn)</p>

<p>(3)Hash查找：O(1)</p>

<p>概念：hash，hash table，hash function <a href="http://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8#.E5.A4.84.E7.90.86.E7.A2.B0.E6.92.9E">哈希表_on_wiki</a></p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/hashbasics.png" alt="image" />  </p>

<p>常用的哈希函数：</p>

<p>1.reminder method：取余数（size=11）</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/reminder.png" alt="image" /></p>

<p>2.folding method</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/folding.png" alt="image" /></p>

<p>3.mid-square method</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/mid-square.png" alt="image" /></p>

<p>4.对于由字符的元素可以尝试使用<code>ord</code>函数来将字符串转换成一个有序的数值序列。</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/stringord1.png" alt="image" /></p>

<p>但是，对于通过回文构词法构成的字符串它们得到的值总是一样，为了解决这个问题，可以根据字符的位置添加一个权重。</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/stringord2.png" alt="image" /></p>

<p>From wiki</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/hashfun.png" alt="image" />   </p>

<p>使用哈希查找，难免遇到冲突，该如何解决冲突(Collision Resolution)呢？</p>

<p>常用的解决冲突的办法：</p>

<p>1.open address(开放寻址)：线性探测(linear probing)下一个位置，缺点是容易造成聚集现象(cluster)，解决聚集现象的办法是跳跃式地查找下一个空槽。数值的顺序：(54, 26, 93, 17, 77, 31, 44, 55, 20).</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/linearprob.png" alt="image" /></p>

<p>2.quadratic probing(平方探测)：一开始的hash值为h，如果不是空槽，那就尝试h+1，还不是空槽就尝试h+4，依次继续尝试h+9，h+16等等。</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/quadraticprob.png" alt="image" /></p>

<p>3.chain：利用链表链接起来</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/chain.png" alt="image" /></p>

<p>From wiki</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/hashcollision.png" alt="image" />   </p>

<p>分析hash查找的性能：一般使用平均查找长度来衡量，和装载因子有关</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/hashanalysis.png" alt="image" /></p>

<p>From wiki</p>

<p><img src="http://hujiaweibujidao.github.io/images/201405/hashefficiency.png" alt="image" />   </p>

<p>下面的代码包含了顺序查找，二分查找，哈希查找(size=11, plus 1, reminder method)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">sequential_search</span><span class="p">(</span><span class="n">a_list</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class="line">    <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="n">found</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class="line">    <span class="k">while</span> <span class="n">pos</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">found</span><span class="p">:</span>
</span><span class="line">        <span class="k">if</span> <span class="n">a_list</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="o">==</span> <span class="n">item</span><span class="p">:</span>
</span><span class="line">            <span class="n">found</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="n">pos</span> <span class="o">=</span> <span class="n">pos</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">    <span class="k">return</span> <span class="n">found</span>
</span><span class="line">
</span><span class="line"><span class="n">test_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">sequential_search</span><span class="p">(</span><span class="n">test_list</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">sequential_search</span><span class="p">(</span><span class="n">test_list</span><span class="p">,</span> <span class="mi">13</span><span class="p">))</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">binary_search</span><span class="p">(</span><span class="n">a_list</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class="line">    <span class="n">first</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="n">last</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">    <span class="n">found</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class="line">    <span class="k">while</span> <span class="n">first</span> <span class="o">&lt;=</span> <span class="n">last</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">found</span><span class="p">:</span>
</span><span class="line">        <span class="n">midpoint</span> <span class="o">=</span> <span class="p">(</span><span class="n">first</span> <span class="o">+</span> <span class="n">last</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
</span><span class="line">        <span class="k">if</span> <span class="n">a_list</span><span class="p">[</span><span class="n">midpoint</span><span class="p">]</span> <span class="o">==</span> <span class="n">item</span><span class="p">:</span>
</span><span class="line">            <span class="n">found</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="n">item</span> <span class="o">&lt;</span> <span class="n">a_list</span><span class="p">[</span><span class="n">midpoint</span><span class="p">]:</span>
</span><span class="line">                <span class="n">last</span> <span class="o">=</span> <span class="n">midpoint</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">first</span> <span class="o">=</span> <span class="n">midpoint</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">return</span> <span class="n">found</span>
</span><span class="line">
</span><span class="line"><span class="n">test_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">42</span><span class="p">,]</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">binary_search</span><span class="p">(</span><span class="n">test_list</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">binary_search</span><span class="p">(</span><span class="n">test_list</span><span class="p">,</span> <span class="mi">13</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">HashTable</span><span class="p">:</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">size</span> <span class="o">=</span> <span class="mi">11</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">slots</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span>
</span><span class="line">
</span><span class="line">    <span class="c">#put data in slot</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">put_data_in_slot</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">data</span><span class="p">,</span><span class="n">slot</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">slots</span><span class="p">[</span><span class="n">slot</span><span class="p">]</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span> <span class="c"># &#39;==None&#39; ? or  &#39;is None&#39; ?</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">slots</span><span class="p">[</span><span class="n">slot</span><span class="p">]</span> <span class="o">=</span> <span class="n">key</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">slot</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span>
</span><span class="line">            <span class="k">return</span> <span class="bp">True</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">slots</span><span class="p">[</span><span class="n">slot</span><span class="p">]</span> <span class="o">==</span> <span class="n">key</span><span class="p">:</span> <span class="c"># not None</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">slot</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span> <span class="c">#replace</span>
</span><span class="line">                <span class="k">return</span> <span class="bp">True</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="k">return</span> <span class="bp">False</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">put</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
</span><span class="line">        <span class="n">slot</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">hash_function</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span><span class="p">);</span>
</span><span class="line">        <span class="n">result</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">put_data_in_slot</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">data</span><span class="p">,</span><span class="n">slot</span><span class="p">);</span>
</span><span class="line">        <span class="k">while</span> <span class="ow">not</span> <span class="n">result</span><span class="p">:</span>
</span><span class="line">            <span class="n">slot</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">rehash</span><span class="p">(</span><span class="n">slot</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">size</span><span class="p">);</span>
</span><span class="line">            <span class="n">result</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">put_data_in_slot</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">data</span><span class="p">,</span><span class="n">slot</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="c">#reminder method</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">hash_function</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="n">key</span> <span class="o">%</span> <span class="n">size</span>
</span><span class="line">
</span><span class="line">    <span class="c">#plus 1</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">rehash</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">old_hash</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="p">(</span><span class="n">old_hash</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">size</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span><span class="line">        <span class="n">start_slot</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">hash_function</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">slots</span><span class="p">))</span>
</span><span class="line">        <span class="n">data</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">        <span class="n">stop</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class="line">        <span class="n">found</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class="line">        <span class="n">position</span> <span class="o">=</span> <span class="n">start_slot</span>
</span><span class="line">        <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">slots</span><span class="p">[</span><span class="n">position</span><span class="p">]</span> <span class="o">!=</span> <span class="bp">None</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">found</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">stop</span><span class="p">:</span>
</span><span class="line">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">slots</span><span class="p">[</span><span class="n">position</span><span class="p">]</span> <span class="o">==</span> <span class="n">key</span><span class="p">:</span>
</span><span class="line">                <span class="n">found</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">                <span class="n">data</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">position</span><span class="p">]</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">position</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">rehash</span><span class="p">(</span><span class="n">position</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">slots</span><span class="p">))</span>
</span><span class="line">                <span class="k">if</span> <span class="n">position</span> <span class="o">==</span> <span class="n">start_slot</span><span class="p">:</span>
</span><span class="line">                    <span class="n">stop</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">        <span class="k">return</span> <span class="n">data</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__setitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="line">    <span class="n">table</span><span class="o">=</span><span class="n">HashTable</span><span class="p">();</span>
</span><span class="line">    <span class="n">table</span><span class="p">[</span><span class="mi">54</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;cat&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="n">table</span><span class="p">[</span><span class="mi">26</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;dog&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="n">table</span><span class="p">[</span><span class="mi">93</span><span class="p">]</span><span class="o">=</span><span class="s">&#39;lion&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="n">table</span><span class="p">[</span><span class="mi">17</span><span class="p">]</span><span class="o">=</span><span class="s">&quot;tiger&quot;</span><span class="p">;</span>
</span><span class="line">    <span class="n">table</span><span class="p">[</span><span class="mi">77</span><span class="p">]</span><span class="o">=</span><span class="s">&quot;bird&quot;</span><span class="p">;</span>
</span><span class="line">    <span class="n">table</span><span class="p">[</span><span class="mi">44</span><span class="p">]</span><span class="o">=</span><span class="s">&quot;goat&quot;</span><span class="p">;</span>
</span><span class="line">    <span class="n">table</span><span class="p">[</span><span class="mi">55</span><span class="p">]</span><span class="o">=</span><span class="s">&quot;pig&quot;</span><span class="p">;</span>
</span><span class="line">    <span class="n">table</span><span class="p">[</span><span class="mi">20</span><span class="p">]</span><span class="o">=</span><span class="s">&quot;chicken&quot;</span><span class="p">;</span>
</span><span class="line">    <span class="k">print</span> <span class="n">table</span><span class="o">.</span><span class="n">slots</span><span class="p">;</span>
</span><span class="line">    <span class="k">print</span> <span class="n">table</span><span class="o">.</span><span class="n">data</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c"># [77, 44, 55, None, 26, 93, 17, None, None, 20, 54]</span>
</span><span class="line"><span class="c"># [&#39;bird&#39;, &#39;goat&#39;, &#39;pig&#39;, None, &#39;dog&#39;, &#39;lion&#39;, &#39;tiger&#39;, None, None, &#39;chicken&#39;, &#39;cat&#39;]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/07/python-algorithms-search/">http://hujiaweibujidao.github.io/blog/2014/05/07/python-algorithms-search/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wouldn't it be nice]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/30/wouldnt-it-be-nice/"/>
    <updated>2014-04-30T00:07:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/30/wouldnt-it-be-nice</id>
    <content type="html"><![CDATA[<p>beautilful music -&gt; Wouldn’t it be nice -&gt; love it!</p>

<audio width="300" height="32" style="margin: auto; top: 0; right: 0; bottom: 0; left: 0;" controls="controls" autoplay="autoplay" name="media" src="http://hujiaweibujidao.github.io/music/Wouldnt-It-Be-Nice.mp3">
</audio>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/30/wouldnt-it-be-nice/">http://hujiaweibujidao.github.io/blog/2014/04/30/wouldnt-it-be-nice/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LAS 4-Similarity Matrix]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-4/"/>
    <updated>2014-04-29T14:03:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-4</id>
    <content type="html"><![CDATA[<p><strong><center>线性代数那些事 Things of Linear Algebra</center></strong>
<strong><center>逸夫图书馆, 2014/4/27</center></strong></p>

<h3 id="centercenter"><center>相似矩阵</center></h3>

<p>什么是相似矩阵？</p>

<p><a href="http://zh.wikipedia.org/wiki/%E7%9B%B8%E4%BC%BC%E7%9F%A9%E9%99%A3">wiki</a>在线性代数中，相似矩阵是指存在相似关系的矩阵。相似关系是两个矩阵之间的一种等价关系。两个n×n矩阵A与B为相似矩阵当且仅当存在一个n×n的可逆矩阵P，使得下面的式子成立，P被称为矩阵A与B之间的相似变换矩阵。</p>

<p>$ P^{-1} A P = B $ 或  $ A P =P B$</p>

<p>相似矩阵保留了矩阵的许多性质，因此许多对矩阵性质的研究可以通过研究更简单的相似矩阵而得到解决。</p>

<p>判断两个矩阵是否相似的辅助方法： 1.判断行列式是否相等； 2.判断迹是否相等；以上条件可以作为判断矩阵是否相似的必要条件，而非充分条件。</p>

<p>那，到底相似矩阵是什么？</p>

<p>同样还是先借用下<a href="(http://spaces.ac.cn/index.php/archives/1777/)">小苏的解释</a>供大家理解下，简而言之就是，<strong>相似矩阵其实是在不同的坐标系中对同一个线性变换的不同的表达而已</strong>！</p>

<blockquote>
  <p>“矩阵是线性空间中的线性变换的一个描述。在一个线性空间中，只要我们选定一组基，那么对于任何一个线性变换，都能够用一个确定的矩阵来加以描述。”
同样的，对于一个线性变换，只要你选定一组基，那么就可以找到一个矩阵来描述这个线性变换。换一组基，就得到一个不同的矩阵。所有这些矩阵都是这同一个线性变换的描述，但又都不是线性变换本身。所有这些同一个线性变换的描述的矩阵互为相似矩阵。</p>
</blockquote>

<p><img src="http://hujiaweibujidao.github.io/images/math/xiangsijuzhen.png" alt="image" /></p>

<p>相似矩阵的性质，关键在于理解<strong>在给定了矩阵A后，只要能找到一个与之相似而又足够“简单”的“规范形式”B，那么对A的研究就可以转化为对更简单的矩阵B的研究。比如说A被称为可对角化的，如果它与一个对角矩阵相似。</strong>这是相似矩阵最重要的作用，因为相似矩阵和原矩阵有很多相似的地方(不变的量很多)，所以我们可以用简单的相似矩阵来研究很复杂的原矩阵。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/xiangsijuzhen3.png" alt="image" /></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-4/">http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-4/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LAS 3-EigenVectors and Eigenvalues]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-3/"/>
    <updated>2014-04-29T14:03:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-3</id>
    <content type="html"><![CDATA[<p><strong><center>线性代数那些事 Things of Linear Algebra</center></strong>
<strong><center>逸夫图书馆, 2014/4/27</center></strong></p>

<h3 id="centercenter"><center>特征值和特征向量</center></h3>

<p>好，我们知道了矩阵就是线性变换，那么矩阵的特征值和特征向量是什么？</p>

<p><a href="http://zh.wikipedia.org/wiki/%E7%89%B9%E5%BE%81%E5%90%91%E9%87%8F">wiki</a><strong>在线性代数中，对于一个给定的线性变换，它的特征向量（本征向量或称正规正交向量）v经过这个线性变换之后，得到的新向量仍然与原来的v 保持在同一条直线上，但其长度也许会改变。一个特征向量的长度在该线性变换下缩放的比例称为其特征值（本征值）。如果特征值为正，则表示v 在经过线性变换的作用后方向也不变；如果特征值为负，说明方向会反转；如果特征值为0，则是表示缩回零点。但无论怎样，仍在同一条直线上。</strong></p>

<p>简而言之就是说，<strong>对于一个确定的矩阵，如果它的特征向量存在的话，那么就有，当这个矩阵(即这个线性变换)作用在这些特征向量上的时候，得到的向量和原来的特征向量在同一条直线上，只是长度发生了变化，长度的变化量的比例为该特征向量对应的特征值。从这里可以看出，这些特征向量是对这个矩阵的很好的描述！</strong></p>

<p>用《蒙娜丽莎》来理解下：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/monalisa.png" alt="image" /></p>

<p>wiki上对特征向量的定义，首先要明确的是<strong>这个线性变换(也就是这个矩阵)是向量空间E到自身的一个线性变换，它可以是旋转、反射、拉伸、压缩，或者这些变换的组合等等，本来呢，一个向量经过线性变换可以得到任何向量，但是，如果这个向量是这个线性变换的特征向量的话，经过线性变换得到的向量那就一定是和特征向量在同一条直线上！特征向量可能会有多个，特征值最大的特征向量称为主特征。所有具有相同的特征值$\lambda$的特征向量和零向量一起，组成了一个向量空间，称为线性变换的一个特征空间。</strong></p>

<p><img src="http://hujiaweibujidao.github.io/images/math/eigenvectors.png" alt="image" /></p>

<p>在一定条件下（如其矩阵形式为实对称矩阵的线性变换），一个变换可以由其特征值和特征向量完全表述。<strong>一个特征空间是具有相同特征值的特征向量与一个同维数的零向量的集合</strong>，可以证明该集合是一个线性子空间。</p>

<p>一般来说，2×2的非奇异矩阵如果有两个相异的特征值，就有两个线性无关的特征向量。<strong>在这种情况下，对于特征向量，线性变换仅仅改变它们的长度，而不改变它们的方向（除了反转以外），而对于其它向量，长度和方向都可能被矩阵所改变。</strong>如果特征值的模大于1，特征向量的长度将被拉伸，而如果特征值的模小于1，特征向量的长度就将被压缩。如果特征值小于0，特征向量将会被翻转。</p>

<p>重复了这么多次，我想你也已经认可了什么是特征向量了，下面看看例子。</p>

<p>先看个恒等变换和对角矩阵，注意其中对特征向量和特征空间的分析。
<img src="http://hujiaweibujidao.github.io/images/math/eigenvectors1.png" alt="image" /></p>

<p>再看个实际的例子，错切变换，这里利用了矩阵行列式的知识来求解特征值。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/eigenvectors2.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/eigenvectors3.png" alt="image" /></p>

<p>特征值的代数重数和几何重数(后者我没有看懂，若读者明白，请留言告知，谢谢！)</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/eigenvectors4.png" alt="image" /></p>

<p>特征值的计算，简单的矩阵可以使用解特征多项式的方法，但是一般情况下都是采用数值计算的方法，其中基于迭代技术的幂法可以用来计算矩阵的主特征值，反幂法类似，不过计算的是模最小的特征值，实际中常用的是QR分解。
<img src="http://hujiaweibujidao.github.io/images/math/eigenvectors5.png" alt="image" /></p>

<p>到此，我觉得特征向量应该是清晰了，关于特征值和奇异值分解以及代码实现请参考我写的另一份总结<a href="http://hujiaweibujidao.github.io/blog/2014/04/23/numerical-methods-using-matlab/">《Numerical Methods Using Matlab》</a>第三章 矩阵特征值和奇异值分解，其他的利用了特征值分解的算法，例如PCA等等，以后我会进一步分析。</p>

<p>矩阵特征值的应用特别广，例如因子分析，特征脸，PageRank等等算法都是基于特征值分解，若有时间和精力，我后续会一一介绍。</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-3/">http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-3/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LAS 2-Matrix]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-2/"/>
    <updated>2014-04-29T14:03:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-2</id>
    <content type="html"><![CDATA[<p><strong><center>线性代数那些事 Things of Linear Algebra</center></strong>
<strong><center>逸夫图书馆, 2014/4/28</center></strong></p>

<h3 id="centercenter"><center>矩阵</center></h3>

<p>1.什么是矩阵？</p>

<p>这个问题很多人进行过探讨，在网上也比较火，比如<a href="http://blog.csdn.net/myan/article/details/647511">孟岩的三篇《理解矩阵》</a>，知乎上<a href="http://www.zhihu.com/question/21082351">如何直观理解矩阵和线代</a>，还有其他人对矩阵的理解，例如<a href="http://spaces.ac.cn/index.php/archives/1765/">新理解矩阵1</a>和<a href="http://spaces.ac.cn/index.php/archives/1768/">新理解矩阵2</a>等等。</p>

<p>那，到底什么是矩阵呢？</p>

<p><strong>总结起来，我觉得，矩阵就是线性变换，作用在一个点上就是将这个点移动到该空间的另一个点，作用在向量上就是对这个向量进行放缩或者旋转或者反射等一系列的线性变换，作用在矩阵上那就是对矩阵中的每一个列向量进行线性变换之后然后进行叠加结果(这就是为什么矩阵的乘法有些奇妙的原因)。因为运动是相对的，你可以理解为坐标系没有变，被作用对象发生了变化，也可以理解为被作用对象没有变，变的是坐标系(也就是空间的基)。</strong></p>

<blockquote>
  <p>这里借用下小苏的图和解释。
矩阵<script type="math/tex">% &lt;![CDATA[
A=\left[ \begin{array}{cc} a11 & a12 \\ a21 & a22 \end{array} \right] %]]&gt;</script>
事实上是由两个向量$[a11,a21]^T$和$[a12,a22]^T$（这里的向量都是列向量）组成，它描述了一个平面（仿射）坐标系。换句话说，这两个向量其实是这个坐标系的两个基，而运算$y=Ax$则是告诉我们，在$A$这个坐标系下的$x$向量，在$I$坐标系下是怎样的。这里的$I$坐标系就是我们最常用的直角坐标系，也就是说，任何向量（包括矩阵里边的向量），只要它前面没有矩阵作用于它，那么它都是在直角坐标系下度量出来的。下图所用的矩阵<script type="math/tex">% &lt;![CDATA[
A=\left[ \begin{array}{cc} 3 & 2 \\ 1 & 3 \end{array} \right] %]]&gt;</script>
构成了一个仿射坐标系，在这个坐标系下，有一个向量$x=[2,2]^T$，它在直角坐标系下测得的坐标为$[10,8]^T$，现在我们不难发现，直接用矩阵乘法来计算，有
$Ax=[3∗2+2∗2,1∗2+3∗2]^T=[10,8]^T$
小苏对此展开讨论了<a href="http://spaces.ac.cn/index.php/archives/1768/">它和矩阵乘法之间的联系</a></p>
</blockquote>

<p><img src="http://hujiaweibujidao.github.io/images/math/xianxinbianhua.png" alt="image" /></p>

<p><a href="http://zh.wikipedia.org/wiki/%E7%9F%A9%E9%98%B5">wiki</a>上关于矩阵和线性变换关系的解释，其中提到了从n维空间到m维空间的任何线性变换都对应于一个矩阵，其中也提到了相似矩阵其实是相同的线性变换在不同的坐标基下的不同表示而已。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/xianxingbianhuan.png" alt="image" /></p>

<p>2.线性变换</p>

<p>好吧，矩阵是线性变换，那什么是线性变换呢？</p>

<p>wiki中对线性变换的解释，这些变换其实主要包括缩放、旋转、反射等。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/xianxinbianhua2.png" alt="image" /></p>

<p>(1)反射变换</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

A=\left[ \begin{array}{cc} -1 & 0 \\ 0 & 1 \end{array} \right] \quad
\rightarrow \left\{ \begin{array}{cc} x'=-x \\ y'=y \end{array} \right.
 %]]&gt;</script>

<p>水平反射，x变成对应的相反数，y不变。</p>

<p>什么是反射？<a href="http://zh.wikipedia.org/wiki/%E5%8F%8D%E5%B0%84_(%E6%95%B0%E5%AD%A6)">wiki</a>上的解释是：<strong>反射是把一个物体变换成它的镜像的映射。要反射一个平面图形，需要“镜子”是一条直线（反射轴），对于三维空间中的反射就要使用平面作为镜子。</strong></p>

<p><strong>最常用的反射变换就是<a href="http://zh.wikipedia.org/wiki/%E8%B1%AA%E6%96%AF%E9%9C%8D%E5%B0%94%E5%BE%B7%E5%8F%98%E6%8D%A2">Householder变换</a>了，这一变换将一个向量变换为由一个超平面反射的镜像，是一种线性变换。Householder变换可以将向量的某些元素置零，同时保持该向量的范数不变。Householder变换在矩阵的QR分解中非常重要！</strong>关于Householder的内部原理以及代码实现请参考我写的另一份总结<a href="http://hujiaweibujidao.github.io/blog/2014/04/23/numerical-methods-using-matlab/">《Numerical Methods Using Matlab》</a>第三章 矩阵特征值和奇异值分解</p>

<p>下图为Householder变换的图示，向量x在矩阵H的作用下得到的向量Hx和原向量x刚好是镜像反射关系。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/HouseholderReflection.png" alt="image" /></p>

<p>(2)放缩变换</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

A=\left[ \begin{array}{cc} \frac{3}{2} & 0 \\ 0 & \frac{3}{2} \end{array} \right] \quad
\rightarrow \left\{ \begin{array}{c} x'=\frac{3}{2}x \\ y'=\frac{3}{2}y \end{array} \right.
 %]]&gt;</script>

<p>放缩反射，x和y都变成原来的$\frac{3}{2}$倍。</p>

<p>(3)旋转变换</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

A=\left[ \begin{array}{cc} \cos(\frac{\pi}{6}) & -\sin(\frac{\pi}{6}) \\ \sin(\frac{\pi}{6}) & \cos(\frac{\pi}{6}) \end{array} \right] \quad
\rightarrow \left\{ \begin{array}{c} x'=\frac{\sqrt{3}}{2}x-\frac{1}{2}y \\ y'=\frac{1}{2}x+\frac{\sqrt{3}}{2}y \end{array} \right.
 %]]&gt;</script>

<p>旋转反射，<a href="http://hujiaweibujidao.github.io/images/math/xuanzhuanbianhuan1.png">一般性的证明请看这张图</a>，<a href="http://zh.wikipedia.org/wiki/%E6%97%8B%E8%BD%AC">wiki</a>中对二维空间旋转的解释。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/xuanzhuanbianhuan2.png" alt="image" /></p>

<p><strong>旋转矩阵是在乘以一个向量的时候有改变向量的方向但不改变大小的效果的矩阵。旋转矩阵不包括点反演，它可以把右手坐标系改变成左手坐标系或反之。所有旋转加上反演形成了正交矩阵的集合。旋转可分为主动旋转与被动旋转。主动旋转是指将向量逆时针围绕旋转轴所做出的旋转。被动旋转是对坐标轴本身进行的逆时针旋转，它相当于主动旋转的逆操作。</strong></p>

<p>旋转矩阵的性质：
<strong>一个矩阵是旋转矩阵，当且仅当它是正交矩阵并且它的行列式是单位一。正交矩阵的行列式是 ±1；如果行列式是 −1，则它包含了一个反射而不是真旋转矩阵。</strong></p>

<p><strong>旋转矩阵是正交矩阵，如果它的列向量形成 ${R}^{n}$ 的一个正交基，就是说在任何两个列向量之间的标量积是零(正交性)而每个列向量的大小是单位一(单位向量)。</strong></p>

<p><img src="http://hujiaweibujidao.github.io/images/math/xuanzhuanjuzhen.png" alt="image" /></p>

<p>最常用的旋转矩阵就是<a href="http://zh.wikipedia.org/wiki/%E5%90%89%E6%96%87%E6%96%AF%E6%97%8B%E8%BD%AC">Givens旋转</a>。<strong>Givens 旋转在数值线性代数中主要的用途是在向量或矩阵中介入零。例如，这种效果可用于计算矩阵的 QR分解。超过Householder变换的一个好处是它们可以轻易的并行化，另一个好处是对于非常稀疏的矩阵计算量更小。</strong></p>

<p>Given旋转矩阵的表达：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/givens.png" alt="image" /></p>

<p>Given旋转矩阵的稳定计算：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/givens2.png" alt="image" /></p>

<p>3.逆矩阵和伴随矩阵</p>

<p>理解了矩阵就是线性变换之后，那么就很容易明白逆矩阵就是将被作用对象从变换后的位置变换回来！</p>

<p>那，伴随矩阵又是什么呢？</p>

<p><a href="http://zh.wikipedia.org/wiki/%E4%BC%B4%E9%9A%8F%E7%9F%A9%E9%98%B5">wiki</a>在线性代数中，一个方形矩阵的伴随矩阵A<em>是一个类似于逆矩阵$A^{-1}$的概念。如果矩阵可逆，那么它的逆矩阵和它的伴随矩阵之间只差一个系数($A^{-1}=\frac{A^{</em>}}{det(A)}$)。也就是说，<strong>伴随矩阵其实是变换回来之后还进行了一次放缩，放缩的大小与矩阵的行列式值有关</strong>。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/bansuijuzhen.png" alt="image" /></p>

<p>举例说明伴随矩阵的计算，伴随矩阵其实就是原矩阵的代数余子式矩阵的转置！</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/bansuijuzhen2.png" alt="image" /></p>

<p>伴随矩阵的性质</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/bansuijuzhen3.png" alt="image" /></p>

<p>还需要注意的是，<strong>逆矩阵是对于方阵来说的，只有方阵还有逆矩阵的概念，那要不是方阵呢？那么就是广义的逆矩阵</strong>！广义逆矩阵在最小二乘法中有重要的应用。关于逆矩阵的求解以及代码实现请参考我写的另一份总结<a href="http://hujiaweibujidao.github.io/blog/2014/04/23/numerical-methods-using-matlab/">《Numerical Methods Using Matlab》</a>第一章 线性方程组求解，最小二乘问题请参考第四章 曲线拟合和多项式插值。</p>

<p>4.秩</p>

<p>什么是矩阵的秩？</p>

<p><a href="http://zh.wikipedia.org/wiki/%E7%A7%A9_(%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0)">wiki中的解释</a>在线性代数中，一个矩阵A的列秩是A的线性独立的纵列的极大数目。类似地，行秩是A的线性独立的横行的极大数目。矩阵的列秩和行秩总是相等的，因此它们可以简单地称作矩阵A的秩。通常表示为r(A)，rk(A)或rank A。m × n矩阵的秩最大为m和n中的较小者，表示为 min(m,n)。有尽可能大的秩的矩阵被称为有满秩；类似的，否则矩阵是秩不足（或称为“欠秩”）的。</p>

<p><strong>矩阵的行秩与列秩相等，是线性代数基本定理的重要组成部分. 其基本证明思路是，矩阵可以看作线性映射的变换矩阵，列秩为像空间的维度，行秩为非零原像空间的维度，因此列秩与行秩相等，即像空间的维度与非零原像空间的维度相等（这里的非零原像空间是指约去了零空间后的商空间：原像空间）。这从矩阵的奇异值分解就可以看出来。</strong><a href="http://zh.wikipedia.org/wiki/%E7%A7%A9_(%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0)">证明可以参见wiki</a></p>

<p>黄老师的总结中还给出了<strong>初等变换不改变矩阵的行秩和列秩</strong>的证明，此外还有，以下四个表述是等价的：</p>

<p>• A 为满秩矩阵. 
• A 为可逆矩阵. 
• A 为非奇异矩阵.
• |A| $\ne$ 0.</p>

<p>说了这么多，那，到底矩阵的秩对于矩阵表示的这个线性变换来说意味着什么？</p>

<p>矩阵的一个重要用途是解线性方程组。线性方程组中未知量的系数可以排成一个矩阵，加上常数项，则称为增广矩阵。另一个重要用途是表示线性变换，即是诸如f(x)  = 4x之类的线性函数的推广。设定基底后，某个向量v可以表示为m×1的矩阵,而线性变换f可以表示为行数为m的矩阵A，使得经过变换后得到的向量f(v)可以表示成Av的形式。矩阵的特征值和特征向量可以揭示线性变换的深层特性。</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-2/">http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-2/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LAS 1-Determinant]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-1/"/>
    <updated>2014-04-29T14:03:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-1</id>
    <content type="html"><![CDATA[<p><strong><center>线性代数那些事 Things of Linear Algebra</center></strong>
<strong><center>逸夫图书馆, 2014/4/27</center></strong></p>

<h4 id="center1center"><center>1.行列式</center></h4>

<p><strong>什么是行列式？</strong></p>

<p>这个问题一点都不简单！</p>

<p>推荐阅读的博文<a href="http://spaces.ac.cn/index.php/archives/2208/">新理解矩阵5</a>以及<a href="http://www.matrix67.com/blog/archives/4294">我们需要怎样的数学教育？</a>，后者在网上比较火，简单的语言道出行列式以及矩阵的“天机”。</p>

<blockquote>
  <p>直到今天看到<a href="http://mathoverflow.net/questions/7584/what-are-the-most-misleading-alternate-definitions-in-taught-mathematics">这个网页</a>，才看见有人一语道破线性代数的真谛（这也是我终于决定写成此文的直接原因）。我终于找到了我那一个学期企图寻找的东西。就好像把 $x$ 变成 $2 x$ 一样，我们经常需要把 $(x, y)$ 变成 $(2 x + y, x – 3 y)$ 之类的东西，这就叫做线性变换。于是才想到定义矩阵乘法，用于表示一切线性变换。几何上看，把平面上的每个点 $(x, y)$ 都变到 $(2 x + y, x – 3 y)$ 的位置上去，效果就相当于对这个平面进行了一个“线性的拉扯”。
矩阵的乘法，其实就是多个线性变换叠加的效果，它显然满足结合律，但不满足交换律。主对角线全是 1 的矩阵所对应的线性变换其实就是不变的意思，因此它叫做单位矩阵。矩阵 A 乘以矩阵 B 得单位矩阵，就是做完线性变换 A 后再做一次线性变换 B 就又变回去了的意思，难怪我们说矩阵 B 是矩阵 A的逆矩阵。课本上对行列式的定义千奇百怪，又是什么递归，又是什么逆序对，还编写口诀帮助大家记忆。其实，<strong>行列式的真正定义就一句话：每个单位正方形在线性变换之后的面积</strong>。因此，单位矩阵的行列式当然就为 1，某行全为 0 的行列式显然为 0 （因为某一维度会被无视掉，线性变换会把整个平面压扁）， $|A·B|$ 显然等于 $|A|·|B|$ 。行列式为 0 ，对应的矩阵当然不可逆，因为这样的线性变换已经把平面压成一条线了，什么都不能把它变回去了。当然，更高阶的矩阵就对应了更高维的空间。一瞬间，所有东西都解释清楚了。</p>
</blockquote>

<!--![image][14]-->

<p>我认为，上面的表达不完全正确，比如其核心[行列式的真正定义就一句话：每个单位正方形在线性变换之后的面积]，但是，它真正让我们意识到要好好思考，到底，什么是行列式？</p>

<p><strong><a href="http://zh.wikipedia.org/wiki/%E8%A1%8C%E5%88%97%E5%BC%8F">Wiki</a>的解释：行列式其实是一个函数，一个将方阵转换成一个标量的函数！[就是说，行列式本质上就相当于一个函数]</strong></p>

<p><strong>行列式可以看做是有向面积或体积的概念在一般的欧几里得空间中的推广。或者说，在 n 维欧几里得空间中，行列式描述的是一个线性变换对“体积”所造成的影响。</strong></p>

<p>首先要注意的是如果是指矩阵的行列式，那么矩阵中只有方阵才有行列式！对方阵求行列式得到一个值，这个值就是指这个$n \times n$方阵(因为矩阵都可以看做是一个线性变换，所以就是指一个线性变换)对n维空间中的“体积”所造成的影响。在二维空间中，这个“体积”实际上是平行四边形的面积，在三维空间中，“体积”就是指平行六面体的体积。更高维以此类推。</p>

<p>先看下行列式在二维和三维空间的几何意义(wiki解释得非常详细！)</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/hanglieshi1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/hanglieshi2.png" alt="image" /></p>

<p>另一个解释(在矩阵条目中的解释)，<strong>一个方阵的行列式等于0当且仅当该方阵不可逆。系数是实数的时候，二维（三维）方阵A的行列式的绝对值表示单位面积（体积）的图形经过A对应的线性变换后得到的图形的面积（体积），而它的正负则代表了对应的线性变换是否改变空间的定向：行列式为正说明它保持空间定向，行列式为负则说明它逆转空间定向。</strong></p>

<p><img src="http://hujiaweibujidao.github.io/images/math/hanglieshi13.png" alt="image" /></p>

<p>下面看下什么是用行列式怎么理解线性变换，<strong>线性变换就是把一个向量线性地变为另一个向量</strong>，<strong>行列式表示的是线性变换前后平行六面体的体积的变化系数</strong>。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/hanglieshi3.png" alt="image" /></p>

<p>面积或体积的定义是恒正的，而行列式是有正有负的，因此需要引入有向面积和有向体积的概念。如果行列式表示的是线性变换对体积的影响，那么行列式的正负就表示了空间的定向。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/hanglieshi4.png" alt="image" /></p>

<p><strong>由二维及三维的例子，可以看到一般的行列式应该具有怎样的性质。在n维欧几里得空间中，作为“平行多面体”的“体积”的概念的推广，行列式继承了“体积”函数的性质。首先，行列式需要是线性的，这可以由面积的性质类比得到。这里的线性是对于每一个向量来说的，因为当一个向量变为原来的a倍时，“平行多面体”的“体积”也变为原来的a倍。其次，当一个向量在其它向量组成的“超平面”上时，n维“平行多面体”的“体积”是零（可以想像三维空间的例子）[在向量组中就是指它们线性相关了]。也就是说，当向量线性相关时，行列式为零。</strong></p>

<p><img src="http://hujiaweibujidao.github.io/images/math/hanglieshi5.png" alt="image" /></p>

<p>行列式的展开，代数余子式，拉普拉斯公式用于计算矩阵的行列式值</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/hanglieshi6.png" alt="image" /></p>

<p>行列式的性质：
<strong>若两个矩阵相似，那么它们的行列式相同。这是因为两个相似的矩阵之间只相差一个基底变换，而行列式描述的是矩阵对应的线性映射对体积的影响，而不是体积，所以基底变换并不会影响行列式的值。</strong></p>

<p><strong>行列式是所有特征值（按代数重数计）的乘积。这可由矩阵必和其若尔当标准型相似推导出。特殊地，三角矩阵的行列式等于其对角线上所有元素的乘积</strong></p>

<p><img src="http://hujiaweibujidao.github.io/images/math/hanglieshi8.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/hanglieshi9.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/hanglieshi10.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/hanglieshi11.png" alt="image" /></p>

<p>行列式与线性方程组，矩阵以及多项式还有多重积分之间的关系。</p>

<p>当线性方程组对应的行列式不为零时，由克莱姆法则，可以直接以行列式的形式写出方程组的解。但用克莱姆法则求解计算量巨大，因此并没有实际应用价值，一般用于理论上的推导。</p>

<p>多项式$p(x) = det(xI - A)$称为方块矩阵A的特征值多项式。这是一个由行列式定义的多项式，它的解是矩阵所有的特征值。</p>

<p>行列式与多重积分的关系主要就是<a href="http://zh.wikipedia.org/wiki/%E9%9B%85%E5%8F%AF%E6%AF%94%E7%9F%A9%E9%98%B5">雅可比行列式 on wiki</a>了。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/hanglieshi12.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/hanglieshi7.png" alt="image" /></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-1/">http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-1/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linear Algebra Summary]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary/"/>
    <updated>2014-04-29T14:03:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary</id>
    <content type="html"><![CDATA[<p><strong><center>线性代数那些事 Things of Linear Algebra</center></strong>
<strong><center>逸夫图书馆, 2014/4/27</center></strong></p>

<h4 id="center0center"><center>0.碎碎念</center></h4>

<p>到了研究阶段才意识到本科的数学原来作用这么大，不论是在数据挖掘，还是机器学习，亦或是模式识别，数学都是基础中的基础。于是乎，我在逸夫图书馆泡了几天看了些微积分、线代和数理统计的书籍，写下三份总结，记录下重要的知识，以备后忘。本人才疏学浅，若有错误之处还请指出，让我“增长”，若有不足也请指出，使我“完备”，谢谢！:-)</p>

<p><strong>[注：这些总结不会详细地讲解所有概念，只是挑选一些我个人感觉比较有用的知识点进行总结，很多时候可能只是列举知识点，并无解释，忘记了的可以自行Wiki或者翻书，另外，为了节省写作时间，对于一些定理我并没有给出详细的表达，忽略了些前提条件，请不要较真，我希望的是给自己一个感性的理解就行，具体理性的分析需要的时候再查，还有就是我还剪切粘贴了很多图片，再有就是，本文采用的是’非线性方式’进行总结的…首篇意识流作品…嗯，就是这样…强迫症者慎入…]</strong></p>

<p>PS：本总结根据下面提到的武汉大学黄正华老师写的线性代数复习总结的顺序来的，因为黄老师的总结已经写得很好了，我只会提到一些我在其他地方看到或者听到的比较有用的心得分享。</p>

<p>参考书籍：</p>

<p>1.[线性代数 Using Matlab]</p>

<p>它山之石：</p>

<p>1.<a href="http://aff.whu.edu.cn/huangzh/">武汉大学 黄正华老师</a>写的线性代数复习总结<a href="http://hujiaweibujidao.github.io/files/linear_algebra_huangzhenghua.pdf">book</a></p>

<p>全部内容：</p>

<p>1.<a href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-1/">行列式！</a></p>

<p>2.<a href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-2/">矩阵！</a></p>

<p>3.<a href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-3/">特征值和特征向量！</a></p>

<p>4.<a href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-4/">相似矩阵！</a></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary/">http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CS 10-Differential Equations]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/28/calculus-summary-chapter-10/"/>
    <updated>2014-04-28T14:29:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/28/calculus-summary-chapter-10</id>
    <content type="html"><![CDATA[<p><strong><center>微积分总结 Summary of Calculus</center></strong>
<strong><center>逸夫图书馆, 2014/4/26</center></strong></p>

<h3 id="center-center"><center>第十部分 微分方程</center></h3>

<h4 id="section">第一节 微分方程的基本概念</h4>
<p>引例，微分方程的基本概念</p>

<p>在许多问题中，我们不总是能够得到函数关系式，而是得到函数和它的导数之间的关系式，这样的关系式就是微分方程。微分方程中出现的未知函数的最高阶导数的阶数叫做微分方程的阶。</p>

<p>只要是能够满足微分方程的函数都是它的解，如果解中包含了任意常数，并且任意常数的个数与阶数相同，那么这个解又叫做微分方程的通解。</p>

<p>通常我们会有一些初始条件。确定了通解中的任意常数的话，那么就得到了微分方程的特解。</p>

<p>求微分方程<script type="math/tex">y'=f(x,y)</script>满足初始条件<script type="math/tex">y\|_{x=x_{0}}=y_{0}</script>的特解的问题，叫做一阶微分方程的初值问题。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/chuzhi.png" alt="image" /></p>

<h4 id="section-1">第二节 一阶微分方程</h4>
<p>可分离变量方程，齐次方程，一阶线性微分方程，伯努利方程</p>

<p>可分离变量方程：利用一阶微分方程的形式，巧妙地分离变量，一边是y的函数，另一边是x的函数，然后左右两边积分即可得到一个关于x和y的隐函数，这个隐函数即为微分方程的解。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/fenlibianliang1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/fenlibianliang2.png" alt="image" /></p>

<p>齐次方程：将原微分方程进行调整，左边为一阶导数，右边为关于<script type="math/tex">\frac{y}{x}</script>的函数，然后可以利用可分离变量得到微分方程的解。有些非齐次的微分方程可以化为齐次方程。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/qici1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/qici2.png" alt="image" /></p>

<p>一阶线性微分方程：对于未知函数和导数都是一次的微分方程。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/xianxing1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/xianxing2.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/xianxing3.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/xianxing4.png" alt="image" /></p>

<p>伯努利方程：含二阶导数</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/bonuli1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/bonuli2.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/bonuli3.png" alt="image" /></p>

<h4 id="section-2">第三节 可降阶的高阶微分方程</h4>
<p>y(n)=f(x)型的微分方程，yn=f(x，y’)型的微分方程，yn=f(Y，y’)型的微分方程</p>

<p>略过。</p>

<h4 id="section-3">第四节 二阶常系数微分方程</h4>
<p>通解的结构，二阶常系数齐次线性微分方程，二阶常系数非齐次线性微分方程</p>

<p>略过。</p>

<h4 id="section-4">第五节 微分方程的应用实例</h4>
<p>物体冷却过程的数学模型，动力学问题，人口模型</p>

<p>略过。</p>

<center>Congratuation! Thank you!</center>
<center>恭喜你，看完啦！</center>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/28/calculus-summary-chapter-10/">http://hujiaweibujidao.github.io/blog/2014/04/28/calculus-summary-chapter-10/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CS 9-Multiple Integration]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-9/"/>
    <updated>2014-04-27T14:29:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-9</id>
    <content type="html"><![CDATA[<p><strong><center>微积分总结 Summary of Calculus</center></strong>
<strong><center>逸夫图书馆, 2014/4/26</center></strong></p>

<h3 id="center-center"><center>第九部分 重积分</center></h3>

<h4 id="section">第一节 二重积分的概念与性质</h4>
<p>二重积分的概念，二重积分的性质</p>

<p>将一元函数积分进行扩展，如果是对闭区域D进行积分的话就叫做二重积分，很重要的一类二重积分问题是求曲顶柱体的体积，利用前面的定积分的思想来看，二重积分是取很小的积分面积元素，以它们为底，以函数值为高，然后求对应的曲顶柱体的体积。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/erchongjifen.png" alt="image" /></p>

<h4 id="section-1">第二节 二重积分的计算方法</h4>
<p>直角坐标下二重积分的计算，利用极坐标计算二重积分</p>

<p>直角坐标下的二重积分的计算可以看做是做两次单独的定积分。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/erchongjifen2.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/erchongjifen3.png" alt="image" /></p>

<p>有些情况下实际计算时需要根据区域D的情况考虑它属于X型还是Y型，还是需要分段进行考虑。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/erchongjifen4.png" alt="image" /></p>

<h4 id="section-2">第三节 三重积分</h4>
<p>三重积分的概念，三重积分的计算</p>

<p>三重积分可以看做是求密度不均匀的物体的体积，它取的是很小很小的体积元素。它的计算使用先一后二或者先二后一的方式来计算，此处略过。</p>

<h4 id="section-3">第四节 重积分的应用</h4>
<p>曲面的面积，质心</p>

<p>略过。</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-9/">http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-9/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CS 8-Multivariable Differential Calculus]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-8/"/>
    <updated>2014-04-27T14:29:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-8</id>
    <content type="html"><![CDATA[<p><strong><center>微积分总结 Summary of Calculus</center></strong>
<strong><center>逸夫图书馆, 2014/4/26</center></strong></p>

<h3 id="center-center"><center>第八部分 多元函数微分法及其应用</center></h3>

<h4 id="section">第一节 多元函数的基本概念</h4>
<p>平面点集、n维空间，多元函数的概念，二元函数的极限，二元函数的连续</p>

<p>将前面的一元函数的知识扩展下就知道了。</p>

<p>二元函数的极限称为二重极限，二重极限的存在是指<script type="math/tex">P(x,y)</script>以任何方式趋近<script type="math/tex">P_{0}(x_{0},y_{0})</script>(有别于在一元函数中只有从左边或者从右边趋近两种方式)，如果不同方式趋近时的极限值不同的话，说明二重极限不存在！</p>

<h4 id="section-1">第二节 偏导数</h4>
<p>偏导数的定义及其计算方法，二元函数偏导数的几何意义，高阶偏导数</p>

<p>在多元微分学中，自变量多了，所以导数变成偏导数了。对于二元函数偏导数的几何意义如下，也是斜率，但是要看如何过该点确定曲面的切线以及切线是对哪个轴的斜率！</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/piandaoshu.png" alt="image" /></p>

<p>高阶偏导数和前面的高阶导数类似，但是因为自变量多了，也就多了个混合偏导数，对于连续函数<script type="math/tex">z=f(x,y)</script>，在其连续区域内，两个二阶混合偏导数相等！</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/gaojipiandaoshu.png" alt="image" /></p>

<h4 id="section-2">第三节 全微分</h4>
<p>全微分的定义，可微、偏导数及连续之间的关系，全微分在近似计算中的应用</p>

<p>在多元微分学中对于某一个变量的微分叫做偏微分，对全部变量的微分就扩展成了全微分的概念，同样，多元函数微分学中微分的意义也是希望使用自变量的线性函数来近似代替函数的全增量<script type="math/tex">\vartriangle z</script>。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/quanweifen.png" alt="image" /></p>

<p>全微分同样可以用于近似计算。</p>

<h4 id="section-3">第四节 多元复合函数和隐函数的求导法则</h4>
<p>多元复合函数的求导法则，隐函数求导法则</p>

<p>多元复合函数的求导可以使用“链式法则”，即<strong>“分段相乘，分叉相加，单路全导，叉路偏导”</strong>！</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/chainrule.png" alt="image" /></p>

<p>对应上面两种情况下的“链式图”如下，第一种情况，z到x和y是分叉，分叉相加，z到x到t是分段，分段相乘，x到t是单路，单路全导；第二种情况，z到u和v是分叉，分叉相加，z到u到x是分段，分段相乘，u到t是叉路，叉路偏导！</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/chainrulefig.png" alt="image" /></p>

<p>隐函数求导是很重要的一部分，因为在实际应用中，很多时候得到的都是一个隐函数，并没有具体的函数表达式，对于它的求导有下面三个存在定理。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/yinfun1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/yinfun2.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/yinfun3.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/yinfun4.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/yinfun5.png" alt="image" /></p>

<p>最后的雅可比式比较重要，在数值分析中有相应的应用，理解它和行列式之间的关系，详情可看<a href="http://zh.wikipedia.org/wiki/%E8%A1%8C%E5%88%97%E5%BC%8F">行列式 on wiki</a>。<a href="http://zh.wikipedia.org/wiki/%E9%9B%85%E5%8F%AF%E6%AF%94%E7%9F%A9%E9%98%B5">雅可比矩阵 on wiki</a></p>

<h4 id="section-4">第五节 偏导数的几何应用</h4>
<p>空间曲线的切线与法平面，曲面切平面与法线</p>

<p>空间曲线的切线需要得到该点的各个方向的偏导数，法平面是过该点并垂直于切线的平面。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/spaceline_qiexian.png" alt="image" /></p>

<p>曲面的切平面与法线略过。</p>

<h4 id="section-5">第六节 多元函数的极值及其最值</h4>
<p>极值的定义，极值存在的条件，最大值与最小值，拉格朗日乘数法</p>

<p>条件极值问题转化成无条件极值问题，使用拉格朗日乘数法，这是一个非常重要的解决条件极值问题的方法，在机器学习的很多算法中使用这种方法，比如Fisher判别等等。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/lagerang1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/lagerang2.png" alt="image" /></p>

<h4 id="section-6">补充节 方向导数和梯度</h4>

<p>方向导数：很多时候我们想知道函数沿着某个方向的变化率，这个方向不一定是坐标轴方向。
<img src="http://hujiaweibujidao.github.io/images/math/fangxiangdaoshu1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/fangxiangdaoshu2.png" alt="image" /></p>

<p>梯度：梯度就是一个向量，表示曲线上某点沿着曲线的某个方向发生移动的向量。梯度的应用自然是梯度下降法，该方法可以让我们的优化问题的极值函数尽快地趋近问题的最优解。</p>

<p>这里还有等值线和等值面的概念，对于二元函数<script type="math/tex">f(x,y)</script>可以得到其对应的等值线<script type="math/tex">f(x,y)=c</script>，函数在某一点的梯度方向就是等值线在该点的法线方向。</p>

<p>还要理解梯度和方向导数之间的关系，如果梯度的方向与方向导数取得最大值的方向相同的话，那么该方向就是函数变化最快的方向。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/tidu1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/tidu2.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/tidu3.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/tidu4.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/tidu5.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/tidu6.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/tidu7.png" alt="image" /></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-8/">http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-8/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CS 7-Vector Algebra]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-7/"/>
    <updated>2014-04-27T14:29:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-7</id>
    <content type="html"><![CDATA[<p><strong><center>微积分总结 Summary of Calculus</center></strong>
<strong><center>逸夫图书馆, 2014/4/26</center></strong></p>

<h3 id="center-center"><center>第七部分 向量代数与空间解析几何</center></h3>
<p>本部分是多元微分学的基础，而且涉及到了很多的空间知识，图形比较多，所以这部分的图片比较多，如若不清晰请Wiki或者翻书查看。</p>

<h4 id="section">第一节 空间直角坐标系</h4>
<p>空间点的直角坐标，空间两点的距离</p>

<h4 id="section-1">第二节 向量代数</h4>
<p>向量的概念，向量的线性运算，向量的坐标，向量的模、方向角、投影，向量的数量积与向量积</p>

<p>方向角和方向余弦的概念：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/fangxiangjiao1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/fangxiangjiao2.png" alt="image" /></p>

<p>投影的概念，投影是一个数值，当投影是指是一个向量<script type="math/tex">\overrightarrow{r}</script>在另一个向量<script type="math/tex">\overrightarrow{u}</script>上的投影时，投影就是投影到目标向量上得到的向量的模与目标向量的单位向量的模的比值。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/touying1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/touying2.png" alt="image" /></p>

<p>向量的数量积的概念，即<script type="math/tex">ab=\|a\|\|b\|\cos \theta</script>，在物理中就是指力F做的功W。数量积又叫内积，是很重要的概念，在线代中同样有矩阵内积的概念，在数据挖掘中有一种很常用的度量相似度的方式，即余弦相似度，一般用于文本类似的数据求相似度。向量的向量积是<script type="math/tex">ab=\|a\|\|b\|\sin\theta</script>。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/shuliangji1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/shuliangji2.png" alt="image" /></p>

<h4 id="section-2">第三节 平面及其方程</h4>
<p>平面的点法式方程，平面的一般方程，两平面的夹角</p>

<p>已知一个平面内的一点和这个平面的法向量便可以确定一个平面了；其实，任何一个三元一次方程<script type="math/tex">Ax+By+Cz+D=0</script>都可以确定一个平面，其法向量就是(A,B,C)。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/space1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/space2.png" alt="image" /></p>

<p>两个平面的夹角可用两个平面的法向量之间的夹角来得到。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/spaceangle.png" alt="image" />
       　</p>

<h4 id="section-3">第四节 空间直线及其方程</h4>
<p>空间直线的一般方程，空间直线的对称式方程与参数方程，两直线的夹角，直线与平面的夹角</p>

<p>两个平面的交线就可以确定一条空间直线；已知直线上一点和直线的方向向量也可以确定一条直线。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/line1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/line2.png" alt="image" /></p>

<p>两条直线之间的夹角可用两条直线的方向向量之间的夹角来得到</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/lineangle.png" alt="image" /></p>

<p>直线与平面之间的夹角可用直线的方向向量和平面的法向量之间的夹角来得到。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/linespaceangle.png" alt="image" /></p>

<h4 id="section-4">第五节 曲面及其方程</h4>
<p>曲面方程的概念，旋转曲面，柱面，二次曲面</p>

<p>曲面方程</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/qumian.png" alt="image" /></p>

<p>旋转曲面：平面内一条曲线绕着平面上的一条直线旋转一周得到的曲面叫做旋转曲面。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/xuanzhuanqumian.png" alt="image" /></p>

<p>柱面：一条直线绕着一条定曲线平行移动得到的轨迹称为柱面。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/zhumian.png" alt="image" /></p>

<p>二次曲面<a href="http://zh.wikipedia.org/wiki/%E4%BA%8C%E6%AC%A1%E6%9B%B2%E9%9D%A2">on wiki</a>，与平面解析几何中定义二次曲线类似，三元二次方程<script type="math/tex">F(x,y,z)=0</script>所表示的曲面称为二次曲面，而平面是一次曲面。Wikipedia上显示了各种二次曲面的方程和二次曲面的图形。</p>

<h4 id="section-5">第六节 空间曲线及其方程</h4>
<p>空间曲线的一般方程，空间曲线的参数方程，空间曲线在坐标面上的投影</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/spaceline1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/spaceline2.png" alt="image" /></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-7/">http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-7/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CS 6-Infinite Series]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-6/"/>
    <updated>2014-04-27T14:29:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-6</id>
    <content type="html"><![CDATA[<p><strong><center>微积分总结 Summary of Calculus</center></strong>
<strong><center>逸夫图书馆, 2014/4/26</center></strong></p>

<h3 id="center-center"><center>第六部分 无穷级数</center></h3>

<h4 id="section">第一节 常数项级数的概念与基本性质</h4>
<p>常数项级数的概念，常数项级数的基本性质</p>

<p>无穷级数的思想来源于近似计算圆面积这个问题，考虑用内接正方形来近似计算。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/infty_round.png" alt="image" /></p>

<p>数列{<script type="math/tex">u_{n}</script>}的元素之和得到的表达式<script type="math/tex">u_{1}+u_{2}+\cdots+u_{n}+\cdots</script>就叫做(常数项)(无穷)级数，其前n项之和又可以组成一个新的数列{<script type="math/tex">s_{n}</script>}，即<script type="math/tex">s_{n}=\Sigma_{i=1}^{n}u_{i}</script>，一般项<script type="math/tex">s_{n}</script>称为部分和。</p>

<p>如果部分和数列{<script type="math/tex">s_{n}</script>}有极限，那么这个无穷级数<script type="math/tex">u_{n}=\Sigma_{i=1}^{n}u_{i}</script>就是收敛的，极限s就叫做这个无穷级数的和。</p>

<p>级数收敛的必要条件是它的一般项<script type="math/tex">u_{n}</script>趋近于0，但不是充分条件！比如，调和级数<script type="math/tex">1+\frac{1}{2}+\frac{1}{3}+\frac{1}{4}+\cdots+\frac{1}{n}+\cdots</script>的一般项<script type="math/tex">u_{n}=\frac{1}{n}</script>也是趋近于0的，但是调和级数是发散的，采用反证法即可证明得到，证明如下，<script type="math/tex">s_{2n}-s{n}>\frac{1}{2}</script>并不趋近于0，所以不收敛。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/tiaohe_series.png" alt="image" /></p>

<h4 id="section-1">第二节 常数项级数敛散性的判别方法</h4>
<p>正项级数及其敛散性的判别方法，交错级数及其敛散性的判别方法，绝对收敛与条件收敛</p>

<p>正项级数<script type="math/tex">u_{n}=\Sigma_{i=1}^{n}u_{i}</script>收敛的充分必要条件是它的部分和数列{<script type="math/tex">s_{n}</script>}有界。</p>

<p>比值审敛法，对于正项级数<script type="math/tex">u_{n}=\Sigma_{i=1}^{n}u_{i}</script>，若<script type="math/tex">\lim_{n\to \infty}\frac{u_{n+1}}{u_{n}}=\beta</script>，当<script type="math/tex">\beta>1</script>时级数发散，当<script type="math/tex">% &lt;![CDATA[
\beta<1 %]]&gt;</script>时级数收敛，当<script type="math/tex">\beta=1</script>时级数可能发散可能收敛。</p>

<p>还有其他的一些判断级数收敛的方法，略过。</p>

<h4 id="section-2">第三节 幂级数</h4>
<p>函数项级数的基本概念，幂级数及其敛散性，幂级数的运算，函数展开成幂级数，幂级数在近似计算中的应用</p>

<p>函数项级数就是定义在某个区间上的函数族之和，表达式类似<script type="math/tex">u_{1}(x)+u_{2}(x)+u_{3}(x)+\cdots+u_{n}(x)+\cdots</script>，对于某个确定的值<script type="math/tex">x=x_{0}</script>，函数项级数<script type="math/tex">u_{1}(x_{0})+u_{2}(x_{0})+u_{3}(x_{0})+\cdots+u_{n}(x_{0})+\cdots</script>就变成常数项级数，如果该常数项级数收敛的话，那么点<script type="math/tex">x_{0}</script>就是函数项级数在定义区间上的一个收敛点，所有收敛点就组成了收敛域。</p>

<p>幂级数就是最常用的一类函数项级数，它的形式如下：</p>

<script type="math/tex; mode=display">\Sigma_{n=0}^{\infty}a_{n}x^{n}=a_{0}x^{0}+a_{1}x^{1}+\cdots+a_{n}x^{n}+\cdots</script>

<p>一种判断幂级数收敛的办法是阿贝尔定理，如果级数<script type="math/tex">\Sigma_{n=0}^{\infty}a_{n}x^{n}</script>当<script type="math/tex">x=x_{0}(x_{0} \ne 0)</script>时收敛，那么对于开区间<script type="math/tex">(-\|x_{0}\|,\|x_{0}\|)</script>内的任何x都有幂级数收敛，反之，如果当<script type="math/tex">x=x_{0}(x_{0} \ne 0)</script>时发散，那么对于闭区间<script type="math/tex">[-\|x_{0}\|,\|x_{0}\|]</script>外的任何x都有幂级数发散。其实就是对于幂级数的收敛半径R内部任意x都收敛，外部都发散！</p>

<p>许多应用中，我们都希望知道如何将一个给定的函数f(x)展开成幂级数的形式，这样相当于对函数进行近似了，可以大大简化计算量，于是便有了泰勒级数！</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/tylor_serials.png" alt="image" /></p>

<p>特别地，当<script type="math/tex">x_{0}=0</script>时泰勒级数又叫麦克劳林级数，展开式称为麦克劳林展开式</p>

<script type="math/tex; mode=display">f(x)=\Sigma_{n=0}^{n}\frac{1}{n!}f^{n}(0)x^{n}</script>

<p>将函数展开成幂级数的步骤：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/miseries1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/miseries2.png" alt="image" /></p>

<p>例如，对于函数<script type="math/tex">e^{x}</script>幂级数展开</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/ex.png" alt="image" /></p>

<p>常用的幂级数：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/common_series.png" alt="image" /></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-6/">http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-6/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CS 5-Definite Integral]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-5/"/>
    <updated>2014-04-27T14:29:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-5</id>
    <content type="html"><![CDATA[<p><strong><center>微积分总结 Summary of Calculus</center></strong>
<strong><center>逸夫图书馆, 2014/4/26</center></strong></p>

<h3 id="center-center"><center>第五部分 定积分及其应用</center></h3>

<h4 id="section">第一节 定积分的概念</h4>
<p>引例，定积分的概念，定积分的几何意义，定积分的基本性质</p>

<p>为什么会有定积分？定积分最开始是为了解决平面内不规则图形的面积或者不规则物体的体积而提出的实际问题。但是，这个问题直到17世纪牛顿和莱布尼茨发现了微分和积分之间的内在联系之后，提出了计算定积分的基本方法。需要注意的是，定积分并不是直接就建立在不定积分之上的，不是有了不定积分才有了定积分，两者是不同的概念，但是又有内在联系！这个联系就是牛顿-莱布尼茨公式！</p>

<p>不定积分是微分的逆运算，它是函数f(x)的原函数，是由无穷多个函数组成的函数族；而定积分是一个确定的数值，是一种特殊的和的极限(定积分常常使用<strong>分割-近似代替-求和-取极限</strong>的方式来解释)，该数值与积分变量使用的字母无关，即<script type="math/tex">\int_{a}^{b} f(x)dx = \int_{a}^{b} f(t)dt </script>。</p>

<p>如果函数f(x)在区间(a,b)上连续或者在[a,b]上有界且只有有限个间断点，则函数f(x)在[a,b]上可积。</p>

<p>定积分的几何意义自然就是曲线与坐标轴和代表积分区间的直线围成的曲边梯形的面积。这个面积可正可负，定积分是这些面积的代数和(即有加有减)，如下便有<script type="math/tex">\int_{a}^{b}=S1-S2+S3</script>。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/dingjifen.png" alt="image" /></p>

<p>定积分的性质：<script type="math/tex">\int_{a}^{b}f(x)dx=-\int_{b}^{a}f(x)dx, ( a>b )</script></p>

<p>定积分中值定理：函数f(x)在区间[a,b]上连续，则在[a,b]上至少有一点满则<script type="math/tex">\int_{a}^{b}f(x)dx=f(\varepsilon)(b-a), a \le \varepsilon \le b</script>，这个中值定理(又叫中值公式)和微分中的拉格朗日中值定理的结构很相似，但是几何意义完全不同了，<strong>拉格朗日中值定理指的是微分也就是斜率相等，而定积分中值定理的几何意义指的其实就是面积相等！</strong>如果用物体运动来解释的话，那就是<script type="math/tex">f(\varepsilon)</script>其实就是物体在a到b的时间段内的平均速度，平均速度乘以运动时间就是总位移了。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/jifen_midvalue.png" alt="image" /></p>

<h4 id="section-1">第二节 微积分的基本定理</h4>
<p>变速直线运动中位置函数与速度函数之间的联系，积分上限函数及其导数，牛顿一莱布尼兹公式</p>

<p>如果我们用物体的运动来解释定积分的话，那么定积分<script type="math/tex">\int_{a}^{b}vdt</script>表示的就是物体从时刻a到时刻b内运动的位移。</p>

<p>积分上限函数，这个函数很重要，而且来源有些巧妙，正是这个函数引出了后面的牛顿-莱布尼茨公式。</p>

<p>假设x是区间[a,b]上的任意一点，那么对于区间[a,x]上的定积分<script type="math/tex">\int_{a}^{x}f(x)dx</script>，因为定积分与积分变量的字母无关，即<script type="math/tex">\int_{a}^{x}f(x)dx=\int_{a}^{x}f(t)dt</script>，如果积分上限x在区间[a,b]上任意变动的话，那么对于任意一个x，定积分都有一个值对应，所以它在区间[a,b]上定义了一个函数！假设这个函数记为<script type="math/tex">\Phi(x)=\int_{a}^{x}f(t)dt, (a \le x \le b)</script>，该函数不仅是连续的，而且可导，导数就是f(x)。由此联想下原函数的定义，我们发现一个结论，<strong>一个连续函数f(x)的原函数是存在的，而且这个原函数之一就是它对应的积分上限函数</strong>！这就表明了积分学中的定积分和原函数之间的联系！</p>

<p>在上面的基础之上，便有了牛顿-莱布尼茨公式！它就更加巧妙地找到了定积分的计算和原函数之间的联系，即<script type="math/tex">\int_{a}^{b}f(x)dx=F(b)-F(a)</script>，<strong>这个公式的意义就是一个连续函数在区间[a,b]上的定积分等于它的任一原函数在该区间上的增量！</strong></p>

<h4 id="section-2">第三节 定积分的换元法和分部积分法</h4>
<p>定积分的换元法，定积分的分部积分法</p>

<p>求定积分方法其实和求不定积分的方法差不多，找到了原函数然后使用牛顿-莱布尼茨公式即可。</p>

<h4 id="section-3">第四节 反常积分</h4>
<p>无穷限的反常积分，无界函数的反常积分</p>

<p>反常积分有两类：
一类是指函数是无穷限的，也就是积分区间是从[<script type="math/tex">-\infty</script>,b]或者从[a,<script type="math/tex">+\infty</script>]或者从[<script type="math/tex">-\infty</script>,<script type="math/tex">+\infty</script>]，即区间包含了无穷，这一类要考虑函数f(x)在无穷限时极限是否存在，如果存在则根据牛顿-莱布尼茨公式即可求解，如果不存在那么反常积分发散；
一类是指函数是无界的，也就是函数f(x)在a的领域内是无界的，也就是趋近<script type="math/tex">\pm\infty</script>，此时a称为瑕点(无界间断点)，如果极限<script type="math/tex">\lim_{t \to a^{+}}\int_{t}^{b}f(x)dx,(t>a)</script>存在则根据牛顿-莱布尼茨公式即可求解，否则它就是发散的。</p>

<h4 id="section-4">第五节 定积分的应用</h4>
<p>定积分的元素法，定积分的几何应用，定积分的物理应用</p>

<p>定积分的应用自然是和定积分概念引入时一样，主要是为了计算面积和体积。元素法是定积分计算的老办法，也就是四部曲(<strong>分割-近似代替-求和-取极限</strong>)。</p>

<p>面积的计算包括直角坐标和极坐标下两种情况，定积分还可以用来计算旋转体的体积</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/dingjifen_area.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/xuanzhuanti.png" alt="image" /></p>

<p>定积分还可以用来求平面曲线的弧长，例子略过。</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-5/">http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-5/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CS 4-Indefinite Integral]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-4/"/>
    <updated>2014-04-27T14:29:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-4</id>
    <content type="html"><![CDATA[<p><strong><center>微积分总结 Summary of Calculus</center></strong>
<strong><center>逸夫图书馆, 2014/4/26</center></strong></p>

<h3 id="center-center"><center>第四部分 不定积分</center></h3>

<h4 id="section">第一节 不定积分的概念与性质</h4>
<p>原函数与不定积分的概念，基本积分表，不定积分的性质</p>

<p>连续函数一定有原函数，而且原函数肯定是无穷多个的，它们组成了一个原函数族，这就是不定积分的概念，函数f(x)的不定积分<script type="math/tex">\int f(x)dx</script>在几何上就表示<script type="math/tex">f(x)</script>积分曲线族。</p>

<p>积分基本上就是微分的逆运算，所以积分表只要参照常用函数的微分表即可。</p>

<h4 id="section-1">第二节 换元积分法</h4>
<p>第一类换元积分法（凑微分法），第二类积分换元法，分部积分法</p>

<p>很多时候被积函数不都是常见的初等函数，遇到复杂的情况我们需要使用其他的方法来计算积分。假设我们要求不定积分<script type="math/tex">\int g(x)dx</script></p>

<p>(1)如果我们有一个函数关系<script type="math/tex">u=h(x), g=f(u)</script>，也就是说，被积函数g(x)是关于u的函数，而u又是关于x的函数，为什么要这么复杂呢？因为g(x)直接积分比较难，但是可以将它看成<script type="math/tex">g(x)=f(u)\cdot u'=f[h(x)] \cdot h'(x)</script>，那么就有</p>

<script type="math/tex; mode=display">\int g(x)dx= \int f[h(x)] \cdot h'(x)dx= \int f[h(x)]d(h(x))= [\int f(u)du]_{u=h(x)}=F(u)+C</script>

<p>这样我们就将对g(x)求积分变成了对<script type="math/tex">u=h(x)</script>求积分，这就是第一类换元积分法。例如，求<script type="math/tex">\int \frac{1}{1+2x}dx</script>，令<script type="math/tex">u=1+2x</script>即可。</p>

<p>(2)如果我们有一个函数关系<script type="math/tex">x=h(t)</script>，也就是说，第一类换元积分是找一个函数<script type="math/tex">u=h(x)</script>，利用du和dx的关系将dx替换掉，而第二类是直接找到x关于t的函数，这样<script type="math/tex">dx=h'(t)dt</script>就可以将dx替换掉了，那么<script type="math/tex">\int g(x)dx = [\int g[h(t)]h'(t)dt]_{t=h^{-1}(x)} </script>，这种换元积分法就是第二类换元积分法。例如，求<script type="math/tex">\int \frac{xdx}{\sqrt{x-3}}</script>，令<script type="math/tex">t=\sqrt{x-3}</script>，即<script type="math/tex">x=t^{2}+3</script>即可。</p>

<p>分部积分法，如果函数u=u(x)和函数v=v(x)具有连续导数，则有<script type="math/tex">\int uv'dx = uv - \int u'vdx</script>，通常还简写为<script type="math/tex">\int udv = uv - \int vdu</script>，这种方法自然常用求两个函数乘积的积分，例如，求<script type="math/tex">\int xcosxdx</script>。</p>

<h4 id="section-2">第四节 有理函数的积分</h4>
<p>有理函数的积分，可化为有理函数的积分举例</p>

<p>有理函数是指两个多项式的商，即形如<script type="math/tex">\frac {P(x)}{Q(x)}= \frac {a_{0}x^{n}+a_{1}x^{n-1}+a_{2}x^{n-2}+\dots+a_{n}}{b_{0}x^{m}+b_{1}x^{m-1}+b_{2}x^{m-2}+\dots+b_{m}}</script>，若有<script type="math/tex">m>n</script>则为真分式，否则为假分式。利用多项式的除法，总可以将一个假分式分解成一个多项式和一个真分式的和的形式。任何一个有理真分式都可以分解为以下四类最简分式之和：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\frac{A}{x-a}, \frac{A}{(x-a)^n}, \frac{Ax+B}{x^2+px+q}, \frac{Ax+B}{(x^2+px+q)^n} \quad (n \ge 2, p^2-4q < 0) %]]&gt;</script>

<p>若有理真分式的分母中含有因式<script type="math/tex">(x-a)^n</script>，那么分式中含有：</p>

<script type="math/tex; mode=display">\frac{A1}{x-a}+\frac{A2}{(x-a)^2}+\dots+\frac{An}{(x-a)^n}</script>

<p>若有理真分式的分母中含有因式<script type="math/tex">(x+px+q)^n</script>，那么分式中含有：</p>

<script type="math/tex; mode=display">\frac{A1}{x+px+q}+\frac{A2}{(x+px+q)^2}+\dots+\frac{An}{(x+px+q)^n}</script>

<p>对于系数，可以在确定了最简分式的组合之后利用待定系数就可求出来。</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-4/">http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-4/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CS 3-Differential Mean Value Theorems]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-3/"/>
    <updated>2014-04-27T14:29:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-3</id>
    <content type="html"><![CDATA[<p><strong><center>微积分总结 Summary of Calculus</center></strong>
<strong><center>逸夫图书馆, 2014/4/26</center></strong></p>

<h3 id="center--center"><center>第三部分 微分中值定理与导数的应用 </center></h3>

<h4 id="section">第一节 微分中值定理</h4>
<p>罗尔中值定理，拉格朗日中值定理，泰勒中值定理，柯西中值定理</p>

<p>罗尔中值定理就是说对于在区间<script type="math/tex">(a,b)</script>上的连续可导函数f(x)，若左右端点的函数值相等，那么区间内至少有一个点满足它的导数为0，即<script type="math/tex">f'(\varepsilon)=0, \varepsilon \in (a,b)</script>；</p>

<p>拉格朗日中值定理就是说对于在区间<script type="math/tex">(a,b)</script>上的连续可导函数f(x)，区间内至少有一个点满足<script type="math/tex">f'(\varepsilon)=\frac{f(a)-f(b)}{a-b}, \varepsilon \in (a,b)</script>，该定理就没有罗尔中值定理的条件那么严格了，所以后者是前者的一个特殊情况。拉格朗日中值定理的几何意义如下，曲线在C点处的切线平行于弦AB；</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/langrant.png" alt="image" /></p>

<p>柯西中值定理就扩展到区间<script type="math/tex">(a,b)</script>上的两个连续可导函数f(x)和F(x)，区间内至少有一个点满足<script type="math/tex">\frac{f'(\varepsilon)}{F'(\varepsilon)}=\frac{f(a)-f(b)}{F(a)-F(b)}, \varepsilon \in (a,b)</script>。</p>

<p>当<script type="math/tex">F(x)=x</script>时，<script type="math/tex">F(a)=a,F(b)=b</script>，即有<script type="math/tex">f(a)-f(b)=f'(\varepsilon)(a-b), \varepsilon \in (a,b)</script>，这个式子是不是就是拉格朗日中值定理的内容？</p>

<p>泰勒中值定理略过，和后面泰勒展开式差不多。</p>

<h4 id="section-1">第二节 洛必达法则</h4>
<p>0/0型未定式，∞/∞型未定式，其他类型未定式</p>

<p>洛必达法则很重要，因为很多时候我们总是会遇到各种不同特殊形式的未定式，它们的极限可以试试使用洛必达法则来求。</p>

<p>条件略过，简言之就是<script type="math/tex">\lim_{x \to x_{0}} \frac{f(x)}{g(x)}=\lim_{x \to x_{0}} \frac{f'(x)}{g'(x)}</script>，也就是说我们可以先对分子分母求导然后求极限。</p>

<h4 id="section-2">第三节 函数单调增减性及曲线的凸凹性</h4>
<p>函数的单调性，曲线的凹凸性及拐点</p>

<p>驻点：函数f(x)一阶导数为0的点，根据它的正负可以判断函数的单调性，大于0为单调递增；
拐点：函数f(x)二阶导数为0的点，根据它的正负可以判断函数的凹凸性，大于0为凹的；</p>

<h4 id="section-3">第四节 函数的极值与最大值、最小值</h4>
<p>极值的定义，极值存在的条件，最大值、最小值</p>

<p>极值存在的条件就是判断该点和该点两边的一阶导数的正负情况。</p>

<h4 id="section-4">第五节 函数图形的描绘</h4>
<p>要根据函数的极值和最值以及渐近线来近似绘图</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/fun_figure.png" alt="image" /></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-3/">http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-3/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CS 2-Derivative and Differential]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-2/"/>
    <updated>2014-04-27T14:29:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-2</id>
    <content type="html"><![CDATA[<p><strong><center>微积分总结 Summary of Calculus</center></strong>
<strong><center>逸夫图书馆, 2014/4/26</center></strong></p>

<h3 id="center-center"><center>第二部分 导数与微分</center></h3>

<h4 id="section">第一节 导数概念</h4>
<p>引例，导数的定义，导数的几何意义，可导与连续的关系</p>

<p>导数的几何意义就是曲线在某点的切线的斜率，反应了变化的快慢，理解这个很重要，后面的偏导数的理解也类似。如果用物体的运动来解释的话，导数就是物体在那个时刻的加速度了。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/deviration_meaning.png" alt="image" /></p>

<h4 id="section-1">第二节 函数的求导法则</h4>
<p>函数的和、差、积、商的求导法则，反函数的求导法则，复合函数的求导法则，基本求导法则与导数公式</p>

<p>关于反函数的求导法则：<script type="math/tex">\frac{dy}{dx}=\frac{1}{\frac{dx}{dy}}</script></p>

<p>关于复合函数的求导法则：<script type="math/tex">\frac{dy}{dx}=\frac{dy}{du} \cdot \frac{du}{dx}</script></p>

<p>关于基本初等函数求导法则</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/deviration.png" alt="image" /></p>

<h4 id="section-2">第三节 高阶导数</h4>

<p>二阶及二阶以上的导数称为高阶导数</p>

<h4 id="section-3">第四节 隐函数及其参数方程所确定的函数的导数</h4>
<p>隐函数的导数，由参数方程所确定的函数的导数</p>

<p>如果方程<script type="math/tex">F(x,y)=0</script>确定了<script type="math/tex">y</script>是<script type="math/tex">x</script>的函数，那么这样的函数就叫做隐函数。
一般它的求导分为两种方法：
(1)如果能够解出<script type="math/tex">y=f(x)</script>关系式的话(即隐函数显化)，就先解出然后求导；
(2)如果不能解出，那么就利用复合函数求导方式进行求导，例如两边同时对x求导，遇到复杂的还可以两边先取对数然后求导。</p>

<h4 id="section-4">第五节 函数的微分</h4>
<p>微分的定义，微分的几何意义，基本微分公式与微分法则，微分形式的不变性，微分的应用</p>

<p>先看看微分是怎么引入的？</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/weifen.png" alt="image" /></p>

<p>简言之，在实际应用中，常常需要知道当自变量x有细微变化的时候，函数y的变化量<script type="math/tex">\vartriangle y</script>是多少？为了方便计算，我们需要将增量表达式线性化处理，从而计算出<script type="math/tex">\vartriangle y</script>的近似值。如上面所示，我们只需要用<script type="math/tex">A \vartriangle x</script>来近似代替<script type="math/tex">\vartriangle y</script>。</p>

<p>微分的几何意义，这其实是数学中常用的非线性函数的局部线性化，这里是利用曲线的切线段(MP)来近似代替曲线段(MN)。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/weifen_meaning.png" alt="image" /></p>

<p>微分最大的应用就是求近似值，利用<script type="math/tex">\vartriangle y \approx dy = f'(x) \vartriangle x</script>。例如，求<script type="math/tex">\sqrt[3]{1.02}</script>的近似值，取函数<script type="math/tex">f(x)=\sqrt[3]{x}, x_{0}=1, \vartriangle x=0.02</script>即可。</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-2/">http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-2/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CS 1-Functions and Limits]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-1/"/>
    <updated>2014-04-27T14:29:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-1</id>
    <content type="html"><![CDATA[<p><strong><center>微积分总结 Summary of Calculus</center></strong>
<strong><center>逸夫图书馆, 2014/4/26</center></strong></p>

<h3 id="center--center"><center>第一部分 函数与极限 </center></h3>

<h4 id="section">第一节 函数</h4>
<p>集合、区间与邻域，函数的概念与性质，反函数与复合函数，初等函数</p>

<p>关于初等函数 <a href="http://zh.wikipedia.org/wiki/%E5%88%9D%E7%AD%89%E5%87%BD%E6%95%B0">wiki</a>，初等函数在其定义域内都是连续的。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/elementalfuns.png" alt="image" /></p>

<p>关于指数函数：
对于相等间隔的自变量x的取值，指数函数对应值的比例为常数。由指数运算法则可知，对任意的x，只要给定<script type="math/tex">x_{0}>0</script>，则<script type="math/tex">a^{x+x_{0}}/a^{x}=a^{x_{0}}</script>恒成立。此性质可以作为判断两个变量之间的关系是否为指数函数关系的主要依据。此外，这个性质导出了数理统计中的指数分布，在数理统计中我们会看到。</p>

<h4 id="section-1">第二节 函数的极限</h4>
<p>数列极限及性质，函数极限及性质，无穷小与无穷大，极限运算法则，极限存在准则和两个重要极限，无穷小的比较</p>

<p>关于收敛数列(极限存在)有两个性质：唯一性和有界性</p>

<p>关于函数极限，注意，<script type="math/tex">x \to x_{0}</script>的极限是否存在与函数在<script type="math/tex">x_{0}</script>是否有定义无关。<a href="http://hujiaweibujidao.github.io/images/math/fun_limit.png">函数极限的定义</a></p>

<p>函数极限的几何意义是，当x在领域<script type="math/tex">(x_{0}-\delta,x_{0}+\delta)</script>内时，函数值y落在下图中<script type="math/tex">(A-\varepsilon,A+\varepsilon)</script>内。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/funlimit_meaning.png" alt="image" /></p>

<p>关于无穷小和无穷大：无穷小并不是指负无穷，而是函数在<script type="math/tex">x \to x_{0}</script>时的极限为0，无穷小与有解变量的乘积还是无穷小，但是这个性质放在无穷大上面就不成立了！例如，<script type="math/tex">\lim_{x \to +\infty} \frac{sinx}{x} = 0</script>是无穷小，但是<script type="math/tex">\lim_{x \to +\infty} xcosx</script>不是无穷小，它不符合无穷小的定义，<a href="http://www.guokr.com/post/469944/">关于这个问题的讨论</a>，上面仅代表我的理解，不知对否，若有错误请指出。</p>

<p>两个重要的极限：<script type="math/tex">\lim_{x \to 0} \frac{sinx}{x} = 1</script> 和 <script type="math/tex">\lim_{x \to +\infty} (1+\frac{1}{x})^{x} = e</script></p>

<p>关于极限<script type="math/tex">\lim_{x \to 0} \frac{sinx}{x} = 1</script>可用下图来解释，圆的边长是1，<script type="math/tex">BC=sinx, AD=tanx, \hat{AB}=x</script>，在角度很小很小，即<script type="math/tex">x \to 0</script>时，三者近似相等。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/sinxoverx.png" alt="image" /></p>

<p>关于极限<script type="math/tex">\lim_{x \to \infty} (1+\frac{1}{x})^{x} = e</script> (注意，不论是<script type="math/tex">\lim_{x \to +\infty}</script>还是<script type="math/tex">\lim_{x \to -\infty}</script>都成立)它道出了自然对数<script type="math/tex">e</script>到底是什么！当然还有其他的方式表示出<script type="math/tex">e</script>，比如按照级数展开的方式，我认为<script type="math/tex">e</script>是数学界最美丽的符号！<script type="math/tex">e \approx 2.71828</script></p>

<p>这两个重要极限一般用于求复杂的函数的极限值。</p>

<h4 id="section-2">第三节 函数的连续性与间断点</h4>
<p>函数的连续性，函数的间断点</p>

<p>函数的间断点分为两类：
第一类是函数在<script type="math/tex">x=x_{0}</script>处间断，但是左右极限都存在，如果左右极限相等的话该间断点称为可去间断点，如果不相等称为跳跃间断点；
其他情况下的间断点都属于第二类间断点。</p>

<h4 id="section-3">第四节 初等函数的连续性</h4>
<p>连续函数四则运算的连续性，反函数与复合函数的连续性，初等函数的连续性</p>

<p>只要记住初等函数在它们的定义域内是连续就行了。</p>

<h4 id="section-4">第五节 闭区间上连续函数的性质</h4>
<p>最大值和最小值定理，介值定理与零点定理</p>

<p>最大值和最小值定理就是说在闭区间上的连续函数f(x)一定是有上下界的；</p>

<p>介值定理就是说在闭区间上的连续函数f(x)，如果左右端点的取值不同，例如<script type="math/tex">f(a)=A,f(b)=B</script>，那么区间中肯定有一点的函数值能够取到<script type="math/tex">[A,B]</script>之间的任何一个值；</p>

<p>零点定理就是说在闭区间上的连续函数f(x)，如果左右端点的取值异号，例如<script type="math/tex">% &lt;![CDATA[
f(a)=A>0,f(b)=B<0 %]]&gt;</script>，那么区间中肯定有一点的函数值为0！</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-1/">http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-1/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Calculus Summary]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/24/calculus-summary/"/>
    <updated>2014-04-24T08:40:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/24/calculus-summary</id>
    <content type="html"><![CDATA[<p><strong><center>微积分总结 Summary of Calculus</center></strong>
<strong><center>逸夫图书馆, 2014/4/26</center></strong></p>

<h3 id="center-center"><center>第零部分 碎碎念</center></h3>

<p>到了研究生阶段才意识到本科的数学原来作用这么大，不论是在数据挖掘，还是机器学习，亦或是模式识别，数学都是基础中的基础。于是乎，我在逸夫图书馆泡了几天看了些微积分、线代和数理统计的书籍，写下三份总结，记录下重要的知识，以备后忘。本人才疏学浅，若有错误之处还请指出，让我“增长”，若有不足也请指出，使我“完备”，谢谢！:-)</p>

<p><strong>[注：这些总结不会详细地讲解所有概念，只是挑选一些我个人感觉比较有用的知识点进行总结，很多时候可能只是列举知识点，并无解释，忘记了的可以自行Wiki或者翻书，另外，为了节省写作时间，对于多重积分的计算和应用以及二阶的微分方程的求解我略过了，这部分暂时对我作用不大。另外，对于一些定理我并没有给出详细的表达，忽略了些前提条件，请不要较真，我希望的是给自己一个感性的理解就行，具体理性的分析需要的时候再查，还有就是我还剪切粘贴了很多图片…嗯，就是这样…强迫症者慎入…]</strong></p>

<p>PS：本总结的大纲是按照参考书籍<a href="http://product.dangdang.com/23311529.html">高等数学 中国环境出版社</a>的目录结构来整理的，章节顺序有调整，我将无穷级数提前了，原书将这部分放在最后一章节，私以为不妥，每个小节标题下面一行的内容都是原书中的各个细分的小节内容。所有截图都来自参考书籍<a href="http://book.douban.com/subject/2112359/">同济大学 高等数学 高等教育出版社</a>。</p>

<p>参考书籍：</p>

<p>1.<a href="http://book.douban.com/subject/2112359/">同济大学 高等数学 高等教育出版社</a></p>

<p>2.<a href="http://product.dangdang.com/23311529.html">高等数学 中国环境出版社</a></p>

<p>它山之石：</p>

<p>1.<a href="http://aff.whu.edu.cn/huangzh/">武汉大学 黄正华老师</a>写的微积分复习总结 <a href="http://hujiaweibujidao.github.io/files/calculus1_huangzhenghua.pdf">上</a>和<a href="http://hujiaweibujidao.github.io/files/calculus2_huangzhenghua.pdf">下</a></p>

<p>本总结共十个部分，内容较多，分页查看，谢谢！</p>

<p><a href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-1/">第一部分 函数与极限 </a></p>

<p><a href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-2/">第二部分 导数与微分</a></p>

<p><a href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-3/">第三部分 微分中值定理与导数的应用 </a></p>

<p><a href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-4/">第四部分 不定积分</a></p>

<p><a href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-5/">第五部分 定积分及其应用</a></p>

<p><a href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-6/">第六部分 无穷级数</a></p>

<p><a href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-7/">第七部分 向量代数与空间解析几何</a></p>

<p><a href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-8/">第八部分 多元函数微分法及其应用</a></p>

<p><a href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-9/">第九部分 重积分</a></p>

<p><a href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-10/">第十部分 微分方程</a></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/24/calculus-summary/">http://hujiaweibujidao.github.io/blog/2014/04/24/calculus-summary/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
</feed>
