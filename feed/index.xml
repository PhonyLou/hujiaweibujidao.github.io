<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hujiawei Bujidao]]></title>
  <link href="http://hujiaweibujidao.github.io/feed" rel="self"/>
  <link href="http://hujiaweibujidao.github.io/"/>
  <updated>2014-04-28T19:17:56+08:00</updated>
  <id>http://hujiaweibujidao.github.io/</id>
  <author>
    <name><![CDATA[hujiawei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LAS 4-Similarity Matrix]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-4/"/>
    <updated>2014-04-29T14:03:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-4</id>
    <content type="html"><![CDATA[<p><strong><center>线性代数那些事 Things of Linear Algebra</center></strong>
<strong><center>逸夫图书馆, 2014/4/27</center></strong></p>

<h3 id="centercenter"><center>相似矩阵</center></h3>

<p>什么是相似矩阵？</p>

<p><a href="http://zh.wikipedia.org/wiki/%E7%9B%B8%E4%BC%BC%E7%9F%A9%E9%99%A3">wiki</a>在线性代数中，相似矩阵是指存在相似关系的矩阵。相似关系是两个矩阵之间的一种等价关系。两个n×n矩阵A与B为相似矩阵当且仅当存在一个n×n的可逆矩阵P，使得下面的式子成立，P被称为矩阵A与B之间的相似变换矩阵。</p>

<p>$ P^{-1} A P = B $ 或  $ A P =P B$</p>

<p>相似矩阵保留了矩阵的许多性质，因此许多对矩阵性质的研究可以通过研究更简单的相似矩阵而得到解决。</p>

<p>判断两个矩阵是否相似的辅助方法： 1.判断行列式是否相等； 2.判断迹是否相等；以上条件可以作为判断矩阵是否相似的必要条件，而非充分条件。</p>

<p>那，到底相似矩阵是什么？</p>

<p>同样还是先借用下<a href="(http://spaces.ac.cn/index.php/archives/1777/)">小苏的解释</a>供大家理解下，简而言之就是，<strong>相似矩阵其实是在不同的坐标系中对同一个线性变换的不同的表达而已</strong>！</p>

<blockquote>
  <p>“矩阵是线性空间中的线性变换的一个描述。在一个线性空间中，只要我们选定一组基，那么对于任何一个线性变换，都能够用一个确定的矩阵来加以描述。”
同样的，对于一个线性变换，只要你选定一组基，那么就可以找到一个矩阵来描述这个线性变换。换一组基，就得到一个不同的矩阵。所有这些矩阵都是这同一个线性变换的描述，但又都不是线性变换本身。所有这些同一个线性变换的描述的矩阵互为相似矩阵。</p>
</blockquote>

<p><img src="http://hujiaweibujidao.github.io/images/math/xiangsijuzhen.png" alt="image" /></p>

<p>相似矩阵的性质，关键在于理解<strong>在给定了矩阵A后，只要能找到一个与之相似而又足够“简单”的“规范形式”B，那么对A的研究就可以转化为对更简单的矩阵B的研究。比如说A被称为可对角化的，如果它与一个对角矩阵相似。</strong>这是相似矩阵最重要的作用，因为相似矩阵和原矩阵有很多相似的地方(不变的量很多)，所以我们可以用简单的相似矩阵来研究很复杂的原矩阵。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/xiangsijuzhen3.png" alt="image" /></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-4/">http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-4/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! ^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LAS 3-EigenVectors and Eigenvalues]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-3/"/>
    <updated>2014-04-29T14:03:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-3</id>
    <content type="html"><![CDATA[<p><strong><center>线性代数那些事 Things of Linear Algebra</center></strong>
<strong><center>逸夫图书馆, 2014/4/27</center></strong></p>

<h3 id="centercenter"><center>特征值和特征向量</center></h3>

<p>好，我们知道了矩阵就是线性变换，那么矩阵的特征值和特征向量是什么？</p>

<p><a href="http://zh.wikipedia.org/wiki/%E7%89%B9%E5%BE%81%E5%90%91%E9%87%8F">wiki</a><strong>在线性代数中，对于一个给定的线性变换，它的特征向量（本征向量或称正规正交向量）v经过这个线性变换之后，得到的新向量仍然与原来的v 保持在同一条直线上，但其长度也许会改变。一个特征向量的长度在该线性变换下缩放的比例称为其特征值（本征值）。如果特征值为正，则表示v 在经过线性变换的作用后方向也不变；如果特征值为负，说明方向会反转；如果特征值为0，则是表示缩回零点。但无论怎样，仍在同一条直线上。</strong></p>

<p>简而言之就是说，<strong>对于一个确定的矩阵，如果它的特征向量存在的话，那么就有，当这个矩阵(即这个线性变换)作用在这些特征向量上的时候，得到的向量和原来的特征向量在同一条直线上，只是长度发生了变化，长度的变化量的比例为该特征向量对应的特征值。从这里可以看出，这些特征向量是对这个矩阵的很好的描述！</strong></p>

<p>用《蒙娜丽莎》来理解下：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/monalisa.png" alt="image" /></p>

<p>wiki上对特征向量的定义，首先要明确的是<strong>这个线性变换(也就是这个矩阵)是向量空间E到自身的一个线性变换，它可以是旋转、反射、拉伸、压缩，或者这些变换的组合等等，本来呢，一个向量经过线性变换可以得到任何向量，但是，如果这个向量是这个线性变换的特征向量的话，经过线性变换得到的向量那就一定是和特征向量在同一条直线上！特征向量可能会有多个，特征值最大的特征向量称为主特征。所有具有相同的特征值$\lambda$的特征向量和零向量一起，组成了一个向量空间，称为线性变换的一个特征空间。</strong></p>

<p><img src="http://hujiaweibujidao.github.io/images/math/eigenvectors.png" alt="image" /></p>

<p>在一定条件下（如其矩阵形式为实对称矩阵的线性变换），一个变换可以由其特征值和特征向量完全表述。<strong>一个特征空间是具有相同特征值的特征向量与一个同维数的零向量的集合</strong>，可以证明该集合是一个线性子空间。</p>

<p>一般来说，2×2的非奇异矩阵如果有两个相异的特征值，就有两个线性无关的特征向量。<strong>在这种情况下，对于特征向量，线性变换仅仅改变它们的长度，而不改变它们的方向（除了反转以外），而对于其它向量，长度和方向都可能被矩阵所改变。</strong>如果特征值的模大于1，特征向量的长度将被拉伸，而如果特征值的模小于1，特征向量的长度就将被压缩。如果特征值小于0，特征向量将会被翻转。</p>

<p>重复了这么多次，我想你也已经认可了什么是特征向量了，下面看看例子。</p>

<p>先看个恒等变换和对角矩阵，注意其中对特征向量和特征空间的分析。
<img src="http://hujiaweibujidao.github.io/images/math/eigenvectors1.png" alt="image" /></p>

<p>再看个实际的例子，错切变换，这里利用了矩阵行列式的知识来求解特征值。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/eigenvectors2.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/eigenvectors3.png" alt="image" /></p>

<p>特征值的代数重数和几何重数(后者我没有看懂，若读者明白，请留言告知，谢谢！)</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/eigenvectors4.png" alt="image" /></p>

<p>特征值的计算，简单的矩阵可以使用解特征多项式的方法，但是一般情况下都是采用数值计算的方法，其中基于迭代技术的幂法可以用来计算矩阵的主特征值，反幂法类似，不过计算的是模最小的特征值，实际中常用的是QR分解。
<img src="http://hujiaweibujidao.github.io/images/math/eigenvectors5.png" alt="image" /></p>

<p>到此，我觉得特征向量应该是清晰了，关于特征值和奇异值分解以及代码实现请参考我写的另一份总结<a href="http://hujiaweibujidao.github.io/blog/2014/04/23/numerical-methods-using-matlab/">《Numerical Methods Using Matlab》</a>第三章 矩阵特征值和奇异值分解，其他的利用了特征值分解的算法，例如PCA等等，以后我会进一步分析。</p>

<p>矩阵特征值的应用特别广，例如因子分析，特征脸，PageRank等等算法都是基于特征值分解，若有时间和精力，我后续会一一介绍。</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-3/">http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-3/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! ^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LAS 2-Matrix]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-2/"/>
    <updated>2014-04-29T14:03:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-2</id>
    <content type="html"><![CDATA[<p><strong><center>线性代数那些事 Things of Linear Algebra</center></strong>
<strong><center>逸夫图书馆, 2014/4/27</center></strong></p>

<h3 id="centercenter"><center>矩阵</center></h3>

<p>1.什么是矩阵？</p>

<p>这个问题很多人进行过探讨，在网上也比较火，比如<a href="http://blog.csdn.net/myan/article/details/647511">孟岩的三篇《理解矩阵》</a>，知乎上<a href="http://www.zhihu.com/question/21082351">如何直观理解矩阵和线代</a>，还有其他人对矩阵的理解，例如<a href="http://spaces.ac.cn/index.php/archives/1765/">新理解矩阵1</a>和<a href="http://spaces.ac.cn/index.php/archives/1768/">新理解矩阵2</a>等等。</p>

<p>那，到底什么是矩阵呢？</p>

<p><strong>总结起来，我觉得，矩阵就是线性变换，作用在一个点上就是将这个点移动到该空间的另一个点，作用在向量上就是对这个向量进行放缩或者旋转或者反射等一系列的线性变换，作用在矩阵上那就是对矩阵中的每一个列向量进行线性变换之后然后进行叠加结果(这就是为什么矩阵的乘法有些奇妙的原因)。因为运动是相对的，你可以理解为坐标系没有变，被作用对象发生了变化，也可以理解为被作用对象没有变，变的是坐标系(也就是空间的基)。</strong></p>

<blockquote>
  <p>这里借用下小苏的图和解释。
矩阵<script type="math/tex">% &lt;![CDATA[
A=\left[ \begin{array}{cc} a11 & a12 \\ a21 & a22 \end{array} \right] %]]&gt;</script>
事实上是由两个向量$[a11,a21]^T$和$[a12,a22]^T$（这里的向量都是列向量）组成，它描述了一个平面（仿射）坐标系。换句话说，这两个向量其实是这个坐标系的两个基，而运算$y=Ax$则是告诉我们，在$A$这个坐标系下的$x$向量，在$I$坐标系下是怎样的。这里的$I$坐标系就是我们最常用的直角坐标系，也就是说，任何向量（包括矩阵里边的向量），只要它前面没有矩阵作用于它，那么它都是在直角坐标系下度量出来的。下图所用的矩阵<script type="math/tex">% &lt;![CDATA[
A=\left[ \begin{array}{cc} 3 & 2 \\ 1 & 3 \end{array} \right] %]]&gt;</script>
构成了一个仿射坐标系，在这个坐标系下，有一个向量$x=[2,2]^T$，它在直角坐标系下测得的坐标为$[10,8]^T$，现在我们不难发现，直接用矩阵乘法来计算，有
$Ax=[3∗2+2∗2,1∗2+3∗2]^T=[10,8]^T$
小苏对此展开讨论了<a href="http://spaces.ac.cn/index.php/archives/1768/">它和矩阵乘法之间的联系</a></p>
</blockquote>

<p><img src="http://hujiaweibujidao.github.io/images/math/xianxinbianhua.png" alt="image" /></p>

<p><a href="http://zh.wikipedia.org/wiki/%E7%9F%A9%E9%98%B5">wiki</a>上关于矩阵和线性变换关系的解释，其中提到了从n维空间到m维空间的任何线性变换都对应于一个矩阵，其中也提到了相似矩阵其实是相同的线性变换在不同的坐标基下的不同表示而已。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/xianxingbianhuan.png" alt="image" /></p>

<p>2.线性变换</p>

<p>好吧，那什么是线性变换呢？</p>

<p>wiki中对线性变换的解释，这些变换其实主要包括缩放、旋转、反射等。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/xianxinbianhua2.png" alt="image" /></p>

<p>(1)反射变换</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

A=\left[ \begin{array}{cc} -1 & 0 \\ 0 & 1 \end{array} \right] \quad
\rightarrow \left\{ \begin{array}{cc} x'=-x \\ y'=y \end{array} \right.
 %]]&gt;</script>

<p>水平反射，x变成对应的相反数，y不变。</p>

<p>什么是反射？<a href="http://zh.wikipedia.org/wiki/%E5%8F%8D%E5%B0%84_(%E6%95%B0%E5%AD%A6)">wiki</a>上的解释是：<strong>反射是把一个物体变换成它的镜像的映射。要反射一个平面图形，需要“镜子”是一条直线（反射轴），对于三维空间中的反射就要使用平面作为镜子。</strong></p>

<p><strong>最常用的反射变换就是<a href="http://zh.wikipedia.org/wiki/%E8%B1%AA%E6%96%AF%E9%9C%8D%E5%B0%94%E5%BE%B7%E5%8F%98%E6%8D%A2">Householder变换</a>了，这一变换将一个向量变换为由一个超平面反射的镜像，是一种线性变换。豪斯霍尔德变换可以将向量的某些元素置零，同时保持该向量的范数不变。Householder变换在矩阵的QR分解中非常重要！</strong>关于Householder的内部原理以及代码实现请参考我写的另一份总结<a href="http://hujiaweibujidao.github.io/blog/2014/04/23/numerical-methods-using-matlab/">《Numerical Methods Using Matlab》</a>第三章 矩阵特征值和奇异值分解</p>

<p>下图为Householder变换的图示：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/HouseholderReflection.png" alt="image" /></p>

<p>(2)放缩变换</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

A=\left[ \begin{array}{cc} \frac{3}{2} & 0 \\ 0 & \frac{3}{2} \end{array} \right] \quad
\rightarrow \left\{ \begin{array}{c} x'=\frac{3}{2}x \\ y'=\frac{3}{2}y \end{array} \right.
 %]]&gt;</script>

<p>放缩反射，x和y都变成原来的$\frac{3}{2}$倍。</p>

<p>(3)旋转变换</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

A=\left[ \begin{array}{cc} \cos(\frac{\pi}{6}) & -\sin(\frac{\pi}{6}) \\ \sin(\frac{\pi}{6}) & \cos(\frac{\pi}{6}) \end{array} \right] \quad
\rightarrow \left\{ \begin{array}{c} x'=\frac{\sqrt{3}}{2}x-\frac{1}{2}y \\ y'=\frac{1}{2}x+\frac{\sqrt{3}}{2}y \end{array} \right.
 %]]&gt;</script>

<p>旋转反射，<a href="http://hujiaweibujidao.github.io/images/math/xuanzhuanbianhuan1.png">一般性的证明请看这张图</a>，<a href="http://zh.wikipedia.org/wiki/%E6%97%8B%E8%BD%AC">wiki</a>中对二维空间旋转的解释。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/xuanzhuanbianhuan2.png" alt="image" /></p>

<p><strong>旋转矩阵是在乘以一个向量的时候有改变向量的方向但不改变大小的效果的矩阵。旋转矩阵不包括点反演，它可以把右手坐标系改变成左手坐标系或反之。所有旋转加上反演形成了正交矩阵的集合。旋转可分为主动旋转与被动旋转。主动旋转是指将向量逆时针围绕旋转轴所做出的旋转。被动旋转是对坐标轴本身进行的逆时针旋转，它相当于主动旋转的逆操作。</strong></p>

<p>旋转矩阵的性质：
<strong>一个矩阵是旋转矩阵，当且仅当它是正交矩阵并且它的行列式是单位一。正交矩阵的行列式是 ±1；如果行列式是 −1，则它包含了一个反射而不是真旋转矩阵。</strong></p>

<p><strong>旋转矩阵是正交矩阵，如果它的列向量形成 ${R}^{n}$ 的一个正交基，就是说在任何两个列向量之间的标量积是零(正交性)而每个列向量的大小是单位一(单位向量)。</strong></p>

<p><img src="http://hujiaweibujidao.github.io/images/math/xuanzhuanjuzhen.png" alt="image" /></p>

<p>旋转矩阵中有一类非常实用的，那就是<a href="http://zh.wikipedia.org/wiki/%E5%90%89%E6%96%87%E6%96%AF%E6%97%8B%E8%BD%AC">Givens旋转</a>。<strong>Givens 旋转在数值线性代数中主要的用途是在向量或矩阵中介入零。例如，这种效果可用于计算矩阵的 QR分解。超过Householder变换的一个好处是它们可以轻易的并行化，另一个好处是对于非常稀疏的矩阵计算量更小。</strong></p>

<p>Given旋转矩阵的表达：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/givens.png" alt="image" /></p>

<p>Given旋转矩阵的稳定计算：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/givens2.png" alt="image" /></p>

<p>3.逆矩阵和伴随矩阵</p>

<p>理解了矩阵就是线性变换之后，那么就很容易明白逆矩阵就是将被作用对象从变换后的位置变换回来！</p>

<p>那，伴随矩阵又是什么呢？</p>

<p><a href="http://zh.wikipedia.org/wiki/%E4%BC%B4%E9%9A%8F%E7%9F%A9%E9%98%B5">wiki</a>在线性代数中，一个方形矩阵的伴随矩阵$A^{<em>}$是一个类似于逆矩阵$A^{-1}$的概念。如果矩阵可逆，那么它的逆矩阵和它的伴随矩阵之间只差一个系数($A^{-1}=\frac{A^{</em>}}{det(A)}$)。也就是说，<strong>伴随矩阵其实是变换回来之后还进行了一次放缩，放缩的大小与矩阵的行列式值有关</strong>。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/bansuijuzhen.png" alt="image" /></p>

<p>举例说明伴随矩阵的计算，伴随矩阵其实就是原矩阵的代数余子式矩阵的转置！</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/bansuijuzhen2.png" alt="image" /></p>

<p>伴随矩阵的性质</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/bansuijuzhen3.png" alt="image" /></p>

<p>还需要注意的是，<strong>逆矩阵是对于方阵来说的，只有方阵还有逆矩阵的概念，那要不是方阵呢？那么就是广义的逆矩阵</strong>！广义逆矩阵在最小二乘法中有重要的应用。关于逆矩阵的求解以及代码实现请参考我写的另一份总结<a href="http://hujiaweibujidao.github.io/blog/2014/04/23/numerical-methods-using-matlab/">《Numerical Methods Using Matlab》</a>第一章 线性方程组求解，最小二乘问题请参考第四章 曲线拟合和多项式插值。</p>

<p>矩阵的一个重要用途是解线性方程组。线性方程组中未知量的系数可以排成一个矩阵，加上常数项，则称为增广矩阵。另一个重要用途是表示线性变换，即是诸如f(x)  = 4x之类的线性函数的推广。设定基底后，某个向量v可以表示为m×1的矩阵,而线性变换f可以表示为行数为m的矩阵A，使得经过变换后得到的向量f(v)可以表示成Av的形式。矩阵的特征值和特征向量可以揭示线性变换的深层特性。</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-2/">http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-2/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! ^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LAS 1-Determinant]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-1/"/>
    <updated>2014-04-29T14:03:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-1</id>
    <content type="html"><![CDATA[<p><strong><center>线性代数那些事 Things of Linear Algebra</center></strong>
<strong><center>逸夫图书馆, 2014/4/27</center></strong></p>

<h4 id="center1center"><center>1.行列式</center></h4>

<p><strong>什么是行列式？</strong></p>

<p>这个问题一点都不简单！</p>

<p>推荐阅读的博文<a href="http://spaces.ac.cn/index.php/archives/2208/">新理解矩阵5</a>以及<a href="http://www.matrix67.com/blog/archives/4294">我们需要怎样的数学教育？</a>，后者在网上比较火，简单的语言道出行列式以及矩阵的“天机”。</p>

<blockquote>
  <p>直到今天看到<a href="http://mathoverflow.net/questions/7584/what-are-the-most-misleading-alternate-definitions-in-taught-mathematics">这个网页</a>，才看见有人一语道破线性代数的真谛（这也是我终于决定写成此文的直接原因）。我终于找到了我那一个学期企图寻找的东西。就好像把 $x$ 变成 $2 x$ 一样，我们经常需要把 $(x, y)$ 变成 $(2 x + y, x – 3 y)$ 之类的东西，这就叫做线性变换。于是才想到定义矩阵乘法，用于表示一切线性变换。几何上看，把平面上的每个点 $(x, y)$ 都变到 $(2 x + y, x – 3 y)$ 的位置上去，效果就相当于对这个平面进行了一个“线性的拉扯”。
矩阵的乘法，其实就是多个线性变换叠加的效果，它显然满足结合律，但不满足交换律。主对角线全是 1 的矩阵所对应的线性变换其实就是不变的意思，因此它叫做单位矩阵。矩阵 A 乘以矩阵 B 得单位矩阵，就是做完线性变换 A 后再做一次线性变换 B 就又变回去了的意思，难怪我们说矩阵 B 是矩阵 A的逆矩阵。课本上对行列式的定义千奇百怪，又是什么递归，又是什么逆序对，还编写口诀帮助大家记忆。其实，<strong>行列式的真正定义就一句话：每个单位正方形在线性变换之后的面积</strong>。因此，单位矩阵的行列式当然就为 1，某行全为 0 的行列式显然为 0 （因为某一维度会被无视掉，线性变换会把整个平面压扁）， $|A·B|$ 显然等于 $|A|·|B|$ 。行列式为 0 ，对应的矩阵当然不可逆，因为这样的线性变换已经把平面压成一条线了，什么都不能把它变回去了。当然，更高阶的矩阵就对应了更高维的空间。一瞬间，所有东西都解释清楚了。</p>
</blockquote>

<!--![image][14]-->

<p>我认为，上面的表达不完全正确，比如其核心[行列式的真正定义就一句话：每个单位正方形在线性变换之后的面积]，但是，它真正让我们意识到要好好思考，到底，什么是行列式？</p>

<p><strong><a href="http://zh.wikipedia.org/wiki/%E8%A1%8C%E5%88%97%E5%BC%8F">Wiki</a>的解释：行列式其实是一个函数，一个将方阵转换成一个标量的函数！[就是说，行列式本质上就相当于一个函数]</strong></p>

<p><strong>行列式可以看做是有向面积或体积的概念在一般的欧几里得空间中的推广。或者说，在 n 维欧几里得空间中，行列式描述的是一个线性变换对“体积”所造成的影响。</strong></p>

<p>首先要注意的是如果是指矩阵的行列式，那么矩阵中只有方阵才有行列式！对方阵求行列式得到一个值，这个值就是指这个$n \times n$方阵(因为矩阵都可以看做是一个线性变换，所以就是指一个线性变换)对n维空间中的“体积”所造成的影响。在二维空间中，这个“体积”实际上是平行四边形的面积，在三维空间中，“体积”就是指平行六面体的体积。更高维以此类推。</p>

<p>先看下行列式在二维和三维空间的几何意义(wiki解释得非常详细！)</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/hanglieshi1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/hanglieshi2.png" alt="image" /></p>

<p>另一个解释(在矩阵条目中的解释)，<strong>一个方阵的行列式等于0当且仅当该方阵不可逆。系数是实数的时候，二维（三维）方阵A的行列式的绝对值表示单位面积（体积）的图形经过A对应的线性变换后得到的图形的面积（体积），而它的正负则代表了对应的线性变换是否改变空间的定向：行列式为正说明它保持空间定向，行列式为负则说明它逆转空间定向。</strong></p>

<p><img src="http://hujiaweibujidao.github.io/images/math/hanglieshi13.png" alt="image" /></p>

<p>下面看下什么是用行列式怎么理解线性变换，<strong>线性变换就是把一个向量线性地变为另一个向量</strong>，<strong>行列式表示的是线性变换前后平行六面体的体积的变化系数</strong>。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/hanglieshi3.png" alt="image" /></p>

<p>面积或体积的定义是恒正的，而行列式是有正有负的，因此需要引入有向面积和有向体积的概念。如果行列式表示的是线性变换对体积的影响，那么行列式的正负就表示了空间的定向。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/hanglieshi4.png" alt="image" /></p>

<p><strong>由二维及三维的例子，可以看到一般的行列式应该具有怎样的性质。在n维欧几里得空间中，作为“平行多面体”的“体积”的概念的推广，行列式继承了“体积”函数的性质。首先，行列式需要是线性的，这可以由面积的性质类比得到。这里的线性是对于每一个向量来说的，因为当一个向量变为原来的a倍时，“平行多面体”的“体积”也变为原来的a倍。其次，当一个向量在其它向量组成的“超平面”上时，n维“平行多面体”的“体积”是零（可以想像三维空间的例子）[在向量组中就是指它们线性相关了]。也就是说，当向量线性相关时，行列式为零。</strong></p>

<p><img src="http://hujiaweibujidao.github.io/images/math/hanglieshi5.png" alt="image" /></p>

<p>行列式的展开，代数余子式，拉普拉斯公式用于计算矩阵的行列式值</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/hanglieshi6.png" alt="image" /></p>

<p>行列式的性质：
<strong>若两个矩阵相似，那么它们的行列式相同。这是因为两个相似的矩阵之间只相差一个基底变换，而行列式描述的是矩阵对应的线性映射对体积的影响，而不是体积，所以基底变换并不会影响行列式的值。</strong></p>

<p><strong>行列式是所有特征值（按代数重数计）的乘积。这可由矩阵必和其若尔当标准型相似推导出。特殊地，三角矩阵的行列式等于其对角线上所有元素的乘积</strong></p>

<p><img src="http://hujiaweibujidao.github.io/images/math/hanglieshi8.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/hanglieshi9.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/hanglieshi10.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/hanglieshi11.png" alt="image" /></p>

<p>行列式与线性方程组，矩阵以及多项式还有多重积分之间的关系。</p>

<p>当线性方程组对应的行列式不为零时，由克莱姆法则，可以直接以行列式的形式写出方程组的解。但用克莱姆法则求解计算量巨大，因此并没有实际应用价值，一般用于理论上的推导。</p>

<p>多项式$p(x) = det(xI - A)$称为方块矩阵A的特征值多项式。这是一个由行列式定义的多项式，它的解是矩阵所有的特征值。</p>

<p>行列式与多重积分的关系主要就是<a href="http://zh.wikipedia.org/wiki/%E9%9B%85%E5%8F%AF%E6%AF%94%E7%9F%A9%E9%98%B5">雅可比行列式 on wiki</a>了。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/hanglieshi12.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/hanglieshi7.png" alt="image" /></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-1/">http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-1/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! ^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linear Algebra Summary]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary/"/>
    <updated>2014-04-29T14:03:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary</id>
    <content type="html"><![CDATA[<p><strong><center>线性代数那些事 Things of Linear Algebra</center></strong>
<strong><center>逸夫图书馆, 2014/4/27</center></strong></p>

<h4 id="center0center"><center>0.碎碎念</center></h4>

<p>到了研究阶段才意识到本科的数学原来作用这么大，不论是在数据挖掘，还是机器学习，亦或是模式识别，数学都是基础中的基础。于是乎，我在逸夫图书馆泡了几天看了些微积分、线代和数理统计的书籍，写下三份总结，记录下重要的知识，以备后忘。本人才疏学浅，若有错误之处还请指出，让我“增长”，若有不足也请指出，使我“完备”，谢谢！:-)</p>

<p><strong>[注：这些总结不会详细地讲解所有概念，只是挑选一些我个人感觉比较有用的知识点进行总结，很多时候可能只是列举知识点，并无解释，忘记了的可以自行Wiki或者翻书，另外，为了节省写作时间，对于一些定理我并没有给出详细的表达，忽略了些前提条件，请不要较真，我希望的是给自己一个感性的理解就行，具体理性的分析需要的时候再查，还有就是我还剪切粘贴了很多图片，再有就是，本文采用的是’非线性方式’进行总结的…首篇意识流作品…嗯，就是这样…强迫症者慎入…]</strong></p>

<p>PS：本总结根据下面提到的武汉大学黄正华老师写的线性代数复习总结的顺序来的，因为黄老师的总结已经写得很好了，我只会提到一些我在其他地方看到或者听到的比较有用的心得分享。</p>

<p>参考书籍：</p>

<p>1.[线性代数 Using Matlab]</p>

<p>它山之石：</p>

<p>1.<a href="http://aff.whu.edu.cn/huangzh/">武汉大学 黄正华老师</a>写的线性代数复习总结<a href="http://hujiaweibujidao.github.io/files/linear_algebra_huangzhenghua.pdf">book</a></p>

<p>全部内容：</p>

<p>1.<a href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-1/">行列式！</a></p>

<p>2.<a href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-2/">矩阵！</a></p>

<p>3.<a href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-3/">特征值和特征向量！</a></p>

<p>4.<a href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-4/">相似矩阵！</a></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary/">http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! ^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CS 10-Differential Equations]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/28/calculus-summary-chapter-10/"/>
    <updated>2014-04-28T14:29:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/28/calculus-summary-chapter-10</id>
    <content type="html"><![CDATA[<h3 id="center-center"><center>第十部分 微分方程</center></h3>

<h4 id="section">第一节 微分方程的基本概念</h4>
<p>引例，微分方程的基本概念</p>

<p>在许多问题中，我们不总是能够得到函数关系式，而是得到函数和它的导数之间的关系式，这样的关系式就是微分方程。微分方程中出现的未知函数的最高阶导数的阶数叫做微分方程的阶。</p>

<p>只要是能够满足微分方程的函数都是它的解，如果解中包含了任意常数，并且任意常数的个数与阶数相同，那么这个解又叫做微分方程的通解。</p>

<p>通常我们会有一些初始条件。确定了通解中的任意常数的话，那么就得到了微分方程的特解。</p>

<p>求微分方程<script type="math/tex">y'=f(x,y)</script>满足初始条件<script type="math/tex">y\|_{x=x_{0}}=y_{0}</script>的特解的问题，叫做一阶微分方程的初值问题。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/chuzhi.png" alt="image" /></p>

<h4 id="section-1">第二节 一阶微分方程</h4>
<p>可分离变量方程，齐次方程，一阶线性微分方程，伯努利方程</p>

<p>可分离变量方程：利用一阶微分方程的形式，巧妙地分离变量，一边是y的函数，另一边是x的函数，然后左右两边积分即可得到一个关于x和y的隐函数，这个隐函数即为微分方程的解。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/fenlibianliang1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/fenlibianliang2.png" alt="image" /></p>

<p>齐次方程：将原微分方程进行调整，左边为一阶导数，右边为关于<script type="math/tex">\frac{y}{x}</script>的函数，然后可以利用可分离变量得到微分方程的解。有些非齐次的微分方程可以化为齐次方程。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/qici1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/qici2.png" alt="image" /></p>

<p>一阶线性微分方程：对于未知函数和导数都是一次的微分方程。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/xianxing1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/xianxing2.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/xianxing3.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/xianxing4.png" alt="image" /></p>

<p>伯努利方程：含二阶导数</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/bonuli1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/bonuli2.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/bonuli3.png" alt="image" /></p>

<h4 id="section-2">第三节 可降阶的高阶微分方程</h4>
<p>y(n)=f(x)型的微分方程，yn=f(x，y’)型的微分方程，yn=f(Y，y’)型的微分方程</p>

<p>略过。</p>

<h4 id="section-3">第四节 二阶常系数微分方程</h4>
<p>通解的结构，二阶常系数齐次线性微分方程，二阶常系数非齐次线性微分方程</p>

<p>略过。</p>

<h4 id="section-4">第五节 微分方程的应用实例</h4>
<p>物体冷却过程的数学模型，动力学问题，人口模型</p>

<p>略过。</p>

<center>Congratuation! Thank you!</center>
<center>恭喜你，看完啦！</center>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/28/calculus-summary-chapter-10/">http://hujiaweibujidao.github.io/blog/2014/04/28/calculus-summary-chapter-10/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! ^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Calculus Summary All Chapters]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/28/calculus-summary-all/"/>
    <updated>2014-04-28T08:40:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/28/calculus-summary-all</id>
    <content type="html"><![CDATA[<p><strong><center>微积分总结 Summary of Calculus</center></strong>
<strong><center>逸夫图书馆, 2014/4/26</center></strong></p>

<h3 id="center-center"><center>第零部分 碎碎念</center></h3>

<p>到了研究生阶段才意识到本科的数学原来作用这么大，不论是在数据挖掘，还是机器学习，亦或是模式识别，数学都是基础中的基础。于是乎，我在逸夫图书馆泡了几天看了些微积分、线代和数理统计的书籍，写下三份总结，记录下重要的知识，以备后忘。本人才疏学浅，若有错误之处还请指出，让我“增长”，若有不足也请指出，使我“完备”，谢谢！:-)</p>

<p><strong>[注：这些总结不会详细地讲解所有概念，只是挑选一些我个人感觉比较有用的知识点进行总结，很多时候可能只是列举知识点，并无解释，忘记了的可以自行Wiki或者翻书，另外，为了节省写作时间，对于多重积分的计算和应用以及二阶的微分方程的求解我略过了，这部分暂时对我作用不大。另外，对于一些定理我并没有给出详细的表达，忽略了些前提条件，请不要较真，我希望的是给自己一个感性的理解就行，具体理性的分析需要的时候再查，还有就是我还剪切粘贴了很多图片…嗯，就是这样…强迫症者慎入…]</strong></p>

<p>PS：本总结的大纲是按照参考书籍<a href="http://product.dangdang.com/23311529.html">高等数学 中国环境出版社</a>的目录结构来整理的，章节顺序有调整，我将无穷级数提前了，原书将这部分放在最后一章节，私以为不妥，每个小节标题下面一行的内容都是原书中的各个细分的小节内容。所有截图都来自参考书籍<a href="http://book.douban.com/subject/2112359/">同济大学 高等数学 高等教育出版社</a>。</p>

<p>参考书籍：</p>

<p>1.<a href="http://book.douban.com/subject/2112359/">同济大学 高等数学 高等教育出版社</a></p>

<p>2.<a href="http://product.dangdang.com/23311529.html">高等数学 中国环境出版社</a></p>

<p>它山之石：</p>

<p>1.<a href="http://aff.whu.edu.cn/huangzh/">武汉大学 黄正华老师</a>写的微积分复习总结 <a href="http://hujiaweibujidao.github.io/files/calculus1_huangzhenghua.pdf">上</a>和<a href="http://hujiaweibujidao.github.io/files/calculus2_huangzhenghua.pdf">下</a></p>

<h3 id="center--center"><center>第一部分 函数与极限 </center></h3>

<h4 id="section">第一节 函数</h4>
<p>集合、区间与邻域，函数的概念与性质，反函数与复合函数，初等函数</p>

<p>关于初等函数 <a href="http://zh.wikipedia.org/wiki/%E5%88%9D%E7%AD%89%E5%87%BD%E6%95%B0">wiki</a>，初等函数在其定义域内都是连续的。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/elementalfuns.png" alt="image" /></p>

<p>关于指数函数：
对于相等间隔的自变量x的取值，指数函数对应值的比例为常数。由指数运算法则可知，对任意的x，只要给定$x_{0}&gt;0$，则<script type="math/tex">a^{x+x_{0}}/a^{x}=a^{x_{0}}</script>恒成立。此性质可以作为判断两个变量之间的关系是否为指数函数关系的主要依据。此外，这个性质导出了数理统计中的指数分布，在数理统计中我们会看到。</p>

<h4 id="section-1">第二节 函数的极限</h4>
<p>数列极限及性质，函数极限及性质，无穷小与无穷大，极限运算法则，极限存在准则和两个重要极限，无穷小的比较</p>

<p>关于收敛数列(极限存在)有两个性质：唯一性和有界性</p>

<p>关于函数极限，注意，<script type="math/tex">x \to x_{0}</script>的极限是否存在与函数在<script type="math/tex">x_{0}</script>是否有定义无关。<a href="http://hujiaweibujidao.github.io/images/math/fun_limit.png">函数极限的定义</a></p>

<p>函数极限的几何意义是，当x在领域<script type="math/tex">(x_{0}-\delta,x_{0}+\delta)</script>内时，函数值y落在下图中<script type="math/tex">(A-\varepsilon,A+\varepsilon)</script>内。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/funlimit_meaning.png" alt="image" /></p>

<p>关于无穷小和无穷大：无穷小并不是指负无穷，而是函数在<script type="math/tex">x \to x_{0}</script>时的极限为0，无穷小与有解变量的乘积还是无穷小，但是这个性质放在无穷大上面就不成立了！例如，<script type="math/tex">\lim_{x \to +\infty} \frac{sinx}{x} = 0</script>是无穷小，但是<script type="math/tex">\lim_{x \to +\infty} xcosx</script>不是无穷小，它不符合无穷小的定义，<a href="http://www.guokr.com/post/469944/">关于这个问题的讨论</a>，上面仅代表我的理解，不知对否，若有错误请指出。</p>

<p>两个重要的极限：<script type="math/tex">\lim_{x \to 0} \frac{sinx}{x} = 1</script> 和 <script type="math/tex">\lim_{x \to +\infty} (1+\frac{1}{x})^{x} = e</script></p>

<p>关于极限<script type="math/tex">\lim_{x \to 0} \frac{sinx}{x} = 1</script>可用下图来解释，圆的边长是1，<script type="math/tex">BC=sinx, AD=tanx, \hat{AB}=x</script>，在角度很小很小，即<script type="math/tex">x \to 0</script>时，三者近似相等。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/sinxoverx.png" alt="image" /></p>

<p>关于极限<script type="math/tex">\lim_{x \to \infty} (1+\frac{1}{x})^{x} = e</script> (注意，不论是<script type="math/tex">\lim_{x \to +\infty}</script>还是<script type="math/tex">\lim_{x \to -\infty}</script>都成立)它道出了自然对数<script type="math/tex">e</script>到底是什么！当然还有其他的方式表示出<script type="math/tex">e</script>，比如按照级数展开的方式，我认为<script type="math/tex">e</script>是数学界最美丽的符号！<script type="math/tex">e \approx 2.71828</script></p>

<p>这两个重要极限一般用于求复杂的函数的极限值。</p>

<h4 id="section-2">第三节 函数的连续性与间断点</h4>
<p>函数的连续性，函数的间断点</p>

<p>函数的间断点分为两类：
第一类是函数在<script type="math/tex">x=x_{0}</script>处间断，但是左右极限都存在，如果左右极限相等的话该间断点称为可去间断点，如果不相等称为跳跃间断点；
其他情况下的间断点都属于第二类间断点。</p>

<h4 id="section-3">第四节 初等函数的连续性</h4>
<p>连续函数四则运算的连续性，反函数与复合函数的连续性，初等函数的连续性</p>

<p>只要记住初等函数在它们的定义域内是连续就行了。</p>

<h4 id="section-4">第五节 闭区间上连续函数的性质</h4>
<p>最大值和最小值定理，介值定理与零点定理</p>

<p>最大值和最小值定理就是说在闭区间上的连续函数f(x)一定是有上下界的；</p>

<p>介值定理就是说在闭区间上的连续函数f(x)，如果左右端点的取值不同，例如<script type="math/tex">f(a)=A,f(b)=B</script>，那么区间中肯定有一点的函数值能够取到<script type="math/tex">[A,B]</script>之间的任何一个值；</p>

<p>零点定理就是说在闭区间上的连续函数f(x)，如果左右端点的取值异号，例如<script type="math/tex">% &lt;![CDATA[
f(a)=A>0,f(b)=B<0 %]]&gt;</script>，那么区间中肯定有一点的函数值为0！</p>

<h3 id="center-center-1"><center>第二部分 导数与微分</center></h3>

<h4 id="section-5">第一节 导数概念</h4>
<p>引例，导数的定义，导数的几何意义，可导与连续的关系</p>

<p>导数的几何意义就是曲线在某点的切线的斜率，反应了变化的快慢，理解这个很重要，后面的偏导数的理解也类似。如果用物体的运动来解释的话，导数就是物体在那个时刻的加速度了。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/deviration_meaning.png" alt="image" /></p>

<h4 id="section-6">第二节 函数的求导法则</h4>
<p>函数的和、差、积、商的求导法则，反函数的求导法则，复合函数的求导法则，基本求导法则与导数公式</p>

<p>关于反函数的求导法则：<script type="math/tex">\frac{dy}{dx}=\frac{1}{\frac{dx}{dy}}</script></p>

<p>关于复合函数的求导法则：<script type="math/tex">\frac{dy}{dx}=\frac{dy}{du} \cdot \frac{du}{dx}</script></p>

<p>关于基本初等函数求导法则</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/deviration.png" alt="image" /></p>

<h4 id="section-7">第三节 高阶导数</h4>

<p>二阶及二阶以上的导数称为高阶导数</p>

<h4 id="section-8">第四节 隐函数及其参数方程所确定的函数的导数</h4>
<p>隐函数的导数，由参数方程所确定的函数的导数</p>

<p>如果方程<script type="math/tex">F(x,y)=0</script>确定了<script type="math/tex">y</script>是<script type="math/tex">x</script>的函数，那么这样的函数就叫做隐函数。
一般它的求导分为两种方法：
(1)如果能够解出<script type="math/tex">y=f(x)</script>关系式的话(即隐函数显化)，就先解出然后求导；
(2)如果不能解出，那么就利用复合函数求导方式进行求导，例如两边同时对x求导，遇到复杂的还可以两边先取对数然后求导。</p>

<h4 id="section-9">第五节 函数的微分</h4>
<p>微分的定义，微分的几何意义，基本微分公式与微分法则，微分形式的不变性，微分的应用</p>

<p>先看看微分是怎么引入的？</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/weifen.png" alt="image" /></p>

<p>简言之，在实际应用中，常常需要知道当自变量x有细微变化的时候，函数y的变化量<script type="math/tex">\vartriangle y</script>是多少？为了方便计算，我们需要将增量表达式线性化处理，从而计算出<script type="math/tex">\vartriangle y</script>的近似值。如上面所示，我们只需要用<script type="math/tex">A \vartriangle x</script>来近似代替<script type="math/tex">\vartriangle y</script>。</p>

<p>微分的几何意义，这其实是数学中常用的非线性函数的局部线性化，这里是利用曲线的切线段(MP)来近似代替曲线段(MN)。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/weifen_meaning.png" alt="image" /></p>

<p>微分最大的应用就是求近似值，利用<script type="math/tex">\vartriangle y \approx dy = f'(x) \vartriangle x</script>。例如，求<script type="math/tex">\sqrt[3]{1.02}</script>的近似值，取函数<script type="math/tex">f(x)=\sqrt[3]{x}, x_{0}=1, \vartriangle x=0.02</script>即可。</p>

<h3 id="center--center-1"><center>第三部分 微分中值定理与导数的应用 </center></h3>

<h4 id="section-10">第一节 微分中值定理</h4>
<p>罗尔中值定理，拉格朗日中值定理，泰勒中值定理，柯西中值定理</p>

<p>罗尔中值定理就是说对于在区间<script type="math/tex">(a,b)</script>上的连续可导函数f(x)，若左右端点的函数值相等，那么区间内至少有一个点满足它的导数为0，即<script type="math/tex">f'(\varepsilon)=0, \varepsilon \in (a,b)</script>；</p>

<p>拉格朗日中值定理就是说对于在区间<script type="math/tex">(a,b)</script>上的连续可导函数f(x)，区间内至少有一个点满足<script type="math/tex">f'(\varepsilon)=\frac{f(a)-f(b)}{a-b}, \varepsilon \in (a,b)</script>，该定理就没有罗尔中值定理的条件那么严格了，所以后者是前者的一个特殊情况。拉格朗日中值定理的几何意义如下，曲线在C点处的切线平行于弦AB；</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/langrant.png" alt="image" /></p>

<p>柯西中值定理就扩展到区间<script type="math/tex">(a,b)</script>上的两个连续可导函数f(x)和F(x)，区间内至少有一个点满足<script type="math/tex">\frac{f'(\varepsilon)}{F'(\varepsilon)}=\frac{f(a)-f(b)}{F(a)-F(b)}, \varepsilon \in (a,b)</script>。</p>

<p>当<script type="math/tex">F(x)=x</script>时，<script type="math/tex">F(a)=a,F(b)=b</script>，即有<script type="math/tex">f(a)-f(b)=f'(\varepsilon)(a-b), \varepsilon \in (a,b)</script>，这个式子是不是就是拉格朗日中值定理的内容？</p>

<p>泰勒中值定理略过，和后面泰勒展开式差不多。</p>

<h4 id="section-11">第二节 洛必达法则</h4>
<p>0/0型未定式，∞/∞型未定式，其他类型未定式</p>

<p>洛必达法则很重要，因为很多时候我们总是会遇到各种不同特殊形式的未定式，它们的极限可以试试使用洛必达法则来求。</p>

<p>条件略过，简言之就是<script type="math/tex">\lim_{x \to x_{0}} \frac{f(x)}{g(x)}=\lim_{x \to x_{0}} \frac{f'(x)}{g'(x)}</script>，也就是说我们可以先对分子分母求导然后求极限。</p>

<h4 id="section-12">第三节 函数单调增减性及曲线的凸凹性</h4>
<p>函数的单调性，曲线的凹凸性及拐点</p>

<p>驻点：函数f(x)一阶导数为0的点，根据它的正负可以判断函数的单调性，大于0为单调递增；
拐点：函数f(x)二阶导数为0的点，根据它的正负可以判断函数的凹凸性，大于0为凹的；</p>

<h4 id="section-13">第四节 函数的极值与最大值、最小值</h4>
<p>极值的定义，极值存在的条件，最大值、最小值</p>

<p>极值存在的条件就是判断该点和该点两边的一阶导数的正负情况。</p>

<h4 id="section-14">第五节 函数图形的描绘</h4>
<p>要根据函数的极值和最值以及渐近线来近似绘图</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/fun_figure.png" alt="image" /></p>

<h3 id="center-center-2"><center>第四部分 不定积分</center></h3>

<h4 id="section-15">第一节 不定积分的概念与性质</h4>
<p>原函数与不定积分的概念，基本积分表，不定积分的性质</p>

<p>连续函数一定有原函数，而且原函数肯定是无穷多个的，它们组成了一个原函数族，这就是不定积分的概念，函数f(x)的不定积分<script type="math/tex">\int f(x)dx</script>在几何上就表示<script type="math/tex">f(x)</script>积分曲线族。</p>

<p>积分基本上就是微分的逆运算，所以积分表只要参照常用函数的微分表即可。</p>

<h4 id="section-16">第二节 换元积分法</h4>
<p>第一类换元积分法（凑微分法），第二类积分换元法，分部积分法</p>

<p>很多时候被积函数不都是常见的初等函数，遇到复杂的情况我们需要使用其他的方法来计算积分。假设我们要求不定积分<script type="math/tex">\int g(x)dx</script></p>

<p>(1)如果我们有一个函数关系<script type="math/tex">u=h(x), g=f(u)</script>，也就是说，被积函数g(x)是关于u的函数，而u又是关于x的函数，为什么要这么复杂呢？因为g(x)直接积分比较难，但是可以将它看成<script type="math/tex">g(x)=f(u)\cdot u'=f[h(x)] \cdot h'(x)</script>，那么就有</p>

<script type="math/tex; mode=display">\int g(x)dx= \int f[h(x)] \cdot h'(x)dx= \int f[h(x)]d(h(x))= [\int f(u)du]_{u=h(x)}=F(u)+C</script>

<p>这样我们就将对g(x)求积分变成了对<script type="math/tex">u=h(x)</script>求积分，这就是第一类换元积分法。例如，求<script type="math/tex">\int \frac{1}{1+2x}dx</script>，令<script type="math/tex">u=1+2x</script>即可。</p>

<p>(2)如果我们有一个函数关系<script type="math/tex">x=h(t)</script>，也就是说，第一类换元积分是找一个函数<script type="math/tex">u=h(x)</script>，利用du和dx的关系将dx替换掉，而第二类是直接找到x关于t的函数，这样<script type="math/tex">dx=h'(t)dt</script>就可以将dx替换掉了，那么<script type="math/tex">\int g(x)dx = [\int g[h(t)]h'(t)dt]_{t=h^{-1}(x)} </script>，这种换元积分法就是第二类换元积分法。例如，求<script type="math/tex">\int \frac{xdx}{\sqrt{x-3}}</script>，令<script type="math/tex">t=\sqrt{x-3}</script>，即<script type="math/tex">x=t^{2}+3</script>即可。</p>

<p>分部积分法，如果函数u=u(x)和函数v=v(x)具有连续导数，则有<script type="math/tex">\int uv'dx = uv - \int u'vdx</script>，通常还简写为<script type="math/tex">\int udv = uv - \int vdu</script>，这种方法自然常用求两个函数乘积的积分，例如，求<script type="math/tex">\int xcosxdx</script>。</p>

<h4 id="section-17">第四节 有理函数的积分</h4>
<p>有理函数的积分，可化为有理函数的积分举例</p>

<p>有理函数是指两个多项式的商，即形如<script type="math/tex">\frac {P(x)}{Q(x)}= \frac {a_{0}x^{n}+a_{1}x^{n-1}+a_{2}x^{n-2}+\dots+a_{n}}{b_{0}x^{m}+b_{1}x^{m-1}+b_{2}x^{m-2}+\dots+b_{m}}</script>，若有<script type="math/tex">m>n</script>则为真分式，否则为假分式。利用多项式的除法，总可以将一个假分式分解成一个多项式和一个真分式的和的形式。任何一个有理真分式都可以分解为以下四类最简分式之和：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\frac{A}{x-a}, \frac{A}{(x-a)^n}, \frac{Ax+B}{x^2+px+q}, \frac{Ax+B}{(x^2+px+q)^n} \quad (n \ge 2, p^2-4q < 0) %]]&gt;</script>

<p>若有理真分式的分母中含有因式<script type="math/tex">(x-a)^n</script>，那么分式中含有：</p>

<script type="math/tex; mode=display">\frac{A1}{x-a}+\frac{A2}{(x-a)^2}+\dots+\frac{An}{(x-a)^n}</script>

<p>若有理真分式的分母中含有因式<script type="math/tex">(x+px+q)^n</script>，那么分式中含有：</p>

<script type="math/tex; mode=display">\frac{A1}{x+px+q}+\frac{A2}{(x+px+q)^2}+\dots+\frac{An}{(x+px+q)^n}</script>

<p>对于系数，可以在确定了最简分式的组合之后利用待定系数就可求出来。</p>

<h3 id="center-center-3"><center>第五部分 定积分及其应用</center></h3>

<h4 id="section-18">第一节 定积分的概念</h4>
<p>引例，定积分的概念，定积分的几何意义，定积分的基本性质</p>

<p>为什么会有定积分？定积分最开始是为了解决平面内不规则图形的面积或者不规则物体的体积而提出的实际问题。但是，这个问题直到17世纪牛顿和莱布尼茨发现了微分和积分之间的内在联系之后，提出了计算定积分的基本方法。需要注意的是，定积分并不是直接就建立在不定积分之上的，不是有了不定积分才有了定积分，两者是不同的概念，但是又有内在联系！这个联系就是牛顿-莱布尼茨公式！</p>

<p>不定积分是微分的逆运算，它是函数f(x)的原函数，是由无穷多个函数组成的函数族；而定积分是一个确定的数值，是一种特殊的和的极限(定积分常常使用<strong>分割-近似代替-求和-取极限</strong>的方式来解释)，该数值与积分变量使用的字母无关，即<script type="math/tex">\int_{a}^{b} f(x)dx = \int_{a}^{b} f(t)dt </script>。</p>

<p>如果函数f(x)在区间(a,b)上连续或者在[a,b]上有界且只有有限个间断点，则函数f(x)在[a,b]上可积。</p>

<p>定积分的几何意义自然就是曲线与坐标轴和代表积分区间的直线围成的曲边梯形的面积。这个面积可正可负，定积分是这些面积的代数和(即有加有减)，如下便有<script type="math/tex">\int_{a}^{b}=S1-S2+S3</script>。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/dingjifen.png" alt="image" /></p>

<p>定积分的性质：<script type="math/tex">\int_{a}^{b}f(x)dx=-\int_{b}^{a}f(x)dx, ( a>b )</script></p>

<p>定积分中值定理：函数f(x)在区间[a,b]上连续，则在[a,b]上至少有一点满则<script type="math/tex">\int_{a}^{b}f(x)dx=f(\varepsilon)(b-a), a \le \varepsilon \le b</script>，这个中值定理(又叫中值公式)和微分中的拉格朗日中值定理的结构很相似，但是几何意义完全不同了，<strong>拉格朗日中值定理指的是微分也就是斜率相等，而定积分中值定理的几何意义指的其实就是面积相等！</strong>如果用物体运动来解释的话，那就是<script type="math/tex">f(\varepsilon)</script>其实就是物体在a到b的时间段内的平均速度，平均速度乘以运动时间就是总位移了。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/jifen_midvalue.png" alt="image" /></p>

<h4 id="section-19">第二节 微积分的基本定理</h4>
<p>变速直线运动中位置函数与速度函数之间的联系，积分上限函数及其导数，牛顿一莱布尼兹公式</p>

<p>如果我们用物体的运动来解释定积分的话，那么定积分<script type="math/tex">\int_{a}^{b}vdt</script>表示的就是物体从时刻a到时刻b内运动的位移。</p>

<p>积分上限函数，这个函数很重要，而且来源有些巧妙，正是这个函数引出了后面的牛顿-莱布尼茨公式。</p>

<p>假设x是区间[a,b]上的任意一点，那么对于区间[a,x]上的定积分<script type="math/tex">\int_{a}^{x}f(x)dx</script>，因为定积分与积分变量的字母无关，即<script type="math/tex">\int_{a}^{x}f(x)dx=\int_{a}^{x}f(t)dt</script>，如果积分上限x在区间[a,b]上任意变动的话，那么对于任意一个x，定积分都有一个值对应，所以它在区间[a,b]上定义了一个函数！假设这个函数记为<script type="math/tex">\Phi(x)=\int_{a}^{x}f(t)dt, (a \le x \le b)</script>，该函数不仅是连续的，而且可导，导数就是f(x)。由此联想下原函数的定义，我们发现一个结论，<strong>一个连续函数f(x)的原函数是存在的，而且这个原函数之一就是它对应的积分上限函数</strong>！这就表明了积分学中的定积分和原函数之间的联系！</p>

<p>在上面的基础之上，便有了牛顿-莱布尼茨公式！它就更加巧妙地找到了定积分的计算和原函数之间的联系，即<script type="math/tex">\int_{a}^{b}f(x)dx=F(b)-F(a)</script>，<strong>这个公式的意义就是一个连续函数在区间[a,b]上的定积分等于它的任一原函数在该区间上的增量！</strong></p>

<h4 id="section-20">第三节 定积分的换元法和分部积分法</h4>
<p>定积分的换元法，定积分的分部积分法</p>

<p>求定积分方法其实和求不定积分的方法差不多，找到了原函数然后使用牛顿-莱布尼茨公式即可。</p>

<h4 id="section-21">第四节 反常积分</h4>
<p>无穷限的反常积分，无界函数的反常积分</p>

<p>反常积分有两类：
一类是指函数是无穷限的，也就是积分区间是从[<script type="math/tex">-\infty</script>,b]或者从[a,<script type="math/tex">+\infty</script>]或者从[<script type="math/tex">-\infty</script>,<script type="math/tex">+\infty</script>]，即区间包含了无穷，这一类要考虑函数f(x)在无穷限时极限是否存在，如果存在则根据牛顿-莱布尼茨公式即可求解，如果不存在那么反常积分发散；
一类是指函数是无界的，也就是函数f(x)在a的领域内是无界的，也就是趋近<script type="math/tex">\pm\infty</script>，此时a称为瑕点(无界间断点)，如果极限<script type="math/tex">\lim_{t \to a^{+}}\int_{t}^{b}f(x)dx,(t>a)</script>存在则根据牛顿-莱布尼茨公式即可求解，否则它就是发散的。</p>

<h4 id="section-22">第五节 定积分的应用</h4>
<p>定积分的元素法，定积分的几何应用，定积分的物理应用</p>

<p>定积分的应用自然是和定积分概念引入时一样，主要是为了计算面积和体积。元素法是定积分计算的老办法，也就是四部曲(<strong>分割-近似代替-求和-取极限</strong>)。</p>

<p>面积的计算包括直角坐标和极坐标下两种情况，定积分还可以用来计算旋转体的体积</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/dingjifen_area.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/xuanzhuanti.png" alt="image" /></p>

<p>定积分还可以用来求平面曲线的弧长，例子略过。</p>

<h3 id="center-center-4"><center>第六部分 无穷级数</center></h3>

<h4 id="section-23">第一节 常数项级数的概念与基本性质</h4>
<p>常数项级数的概念，常数项级数的基本性质</p>

<p>无穷级数的思想来源于近似计算圆面积这个问题，考虑用内接正方形来近似计算。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/infty_round.png" alt="image" /></p>

<p>数列{<script type="math/tex">u_{n}</script>}的元素之和得到的表达式<script type="math/tex">u_{1}+u_{2}+\cdots+u_{n}+\cdots</script>就叫做(常数项)(无穷)级数，其前n项之和又可以组成一个新的数列{<script type="math/tex">s_{n}</script>}，即<script type="math/tex">s_{n}=\Sigma_{i=1}^{n}u_{i}</script>，一般项<script type="math/tex">s_{n}</script>称为部分和。</p>

<p>如果部分和数列{<script type="math/tex">s_{n}</script>}有极限，那么这个无穷级数<script type="math/tex">u_{n}=\Sigma_{i=1}^{n}u_{i}</script>就是收敛的，极限s就叫做这个无穷级数的和。</p>

<p>级数收敛的必要条件是它的一般项<script type="math/tex">u_{n}</script>趋近于0，但不是充分条件！比如，调和级数<script type="math/tex">1+\frac{1}{2}+\frac{1}{3}+\frac{1}{4}+\cdots+\frac{1}{n}+\cdots</script>的一般项<script type="math/tex">u_{n}=\frac{1}{n}</script>也是趋近于0的，但是调和级数是发散的，采用反证法即可证明得到，证明如下，<script type="math/tex">s_{2n}-s{n}>\frac{1}{2}</script>并不趋近于0，所以不收敛。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/tiaohe_series.png" alt="image" /></p>

<h4 id="section-24">第二节 常数项级数敛散性的判别方法</h4>
<p>正项级数及其敛散性的判别方法，交错级数及其敛散性的判别方法，绝对收敛与条件收敛</p>

<p>正项级数<script type="math/tex">u_{n}=\Sigma_{i=1}^{n}u_{i}</script>收敛的充分必要条件是它的部分和数列{<script type="math/tex">s_{n}</script>}有界。</p>

<p>比值审敛法，对于正项级数<script type="math/tex">u_{n}=\Sigma_{i=1}^{n}u_{i}</script>，若<script type="math/tex">\lim_{n\to \infty}\frac{u_{n+1}}{u_{n}}=\beta</script>，当<script type="math/tex">\beta>1</script>时级数发散，当<script type="math/tex">% &lt;![CDATA[
\beta<1 %]]&gt;</script>时级数收敛，当<script type="math/tex">\beta=1</script>时级数可能发散可能收敛。</p>

<p>还有其他的一些判断级数收敛的方法，略过。</p>

<h4 id="section-25">第三节 幂级数</h4>
<p>函数项级数的基本概念，幂级数及其敛散性，幂级数的运算，函数展开成幂级数，幂级数在近似计算中的应用</p>

<p>函数项级数就是定义在某个区间上的函数族之和，表达式类似<script type="math/tex">u_{1}(x)+u_{2}(x)+u_{3}(x)+\cdots+u_{n}(x)+\cdots</script>，对于某个确定的值<script type="math/tex">x=x_{0}</script>，函数项级数<script type="math/tex">u_{1}(x_{0})+u_{2}(x_{0})+u_{3}(x_{0})+\cdots+u_{n}(x_{0})+\cdots</script>就变成常数项级数，如果该常数项级数收敛的话，那么点<script type="math/tex">x_{0}</script>就是函数项级数在定义区间上的一个收敛点，所有收敛点就组成了收敛域。</p>

<p>幂级数就是最常用的一类函数项级数，它的形式如下：</p>

<script type="math/tex; mode=display">\Sigma_{n=0}^{\infty}a_{n}x^{n}=a_{0}x^{0}+a_{1}x^{1}+\cdots+a_{n}x^{n}+\cdots</script>

<p>一种判断幂级数收敛的办法是阿贝尔定理，如果级数<script type="math/tex">\Sigma_{n=0}^{\infty}a_{n}x^{n}</script>当<script type="math/tex">x=x_{0}(x_{0} \ne 0)</script>时收敛，那么对于开区间<script type="math/tex">(-\|x_{0}\|,\|x_{0}\|)</script>内的任何x都有幂级数收敛，反之，如果当<script type="math/tex">x=x_{0}(x_{0} \ne 0)</script>时发散，那么对于闭区间<script type="math/tex">[-\|x_{0}\|,\|x_{0}\|]</script>外的任何x都有幂级数发散。其实就是对于幂级数的收敛半径R内部任意x都收敛，外部都发散！</p>

<p>许多应用中，我们都希望知道如何将一个给定的函数f(x)展开成幂级数的形式，这样相当于对函数进行近似了，可以大大简化计算量，于是便有了泰勒级数！</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/tylor_serials.png" alt="image" /></p>

<p>特别地，当<script type="math/tex">x_{0}=0</script>时泰勒级数又叫麦克劳林级数，展开式称为麦克劳林展开式</p>

<script type="math/tex; mode=display">f(x)=\Sigma_{n=0}^{n}\frac{1}{n!}f^{n}(0)x^{n}</script>

<p>将函数展开成幂级数的步骤：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/miseries1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/miseries2.png" alt="image" /></p>

<p>例如，对于函数<script type="math/tex">e^{x}</script>幂级数展开</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/ex.png" alt="image" /></p>

<p>常用的幂级数：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/common_series.png" alt="image" /></p>

<h3 id="center-center-5"><center>第七部分 向量代数与空间解析几何</center></h3>
<p>本部分是多元微分学的基础，而且涉及到了很多的空间知识，图形比较多，所以这部分的图片比较多，如若不清晰请Wiki或者翻书查看。</p>

<h4 id="section-26">第一节 空间直角坐标系</h4>
<p>空间点的直角坐标，空间两点的距离</p>

<h4 id="section-27">第二节 向量代数</h4>
<p>向量的概念，向量的线性运算，向量的坐标，向量的模、方向角、投影，向量的数量积与向量积</p>

<p>方向角和方向余弦的概念：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/fangxiangjiao1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/fangxiangjiao2.png" alt="image" /></p>

<p>投影的概念，投影是一个数值，当投影是指是一个向量<script type="math/tex">\overrightarrow{r}</script>在另一个向量<script type="math/tex">\overrightarrow{u}</script>上的投影时，投影就是投影到目标向量上得到的向量的模与目标向量的单位向量的模的比值。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/touying1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/touying2.png" alt="image" /></p>

<p>向量的数量积的概念，即<script type="math/tex">ab=\|a\|\|b\|\cos \theta</script>，在物理中就是指力F做的功W。数量积又叫内积，是很重要的概念，在线代中同样有矩阵内积的概念，在数据挖掘中有一种很常用的度量相似度的方式，即余弦相似度，一般用于文本类似的数据求相似度。向量的向量积是<script type="math/tex">ab=\|a\|\|b\|\sin\theta</script>。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/shuliangji1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/shuliangji2.png" alt="image" /></p>

<h4 id="section-28">第三节 平面及其方程</h4>
<p>平面的点法式方程，平面的一般方程，两平面的夹角</p>

<p>已知一个平面内的一点和这个平面的法向量便可以确定一个平面了；其实，任何一个三元一次方程<script type="math/tex">Ax+By+Cz+D=0</script>都可以确定一个平面，其法向量就是(A,B,C)。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/space1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/space2.png" alt="image" /></p>

<p>两个平面的夹角可用两个平面的法向量之间的夹角来得到。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/spaceangle.png" alt="image" />
       　
####第四节 空间直线及其方程
空间直线的一般方程，空间直线的对称式方程与参数方程，两直线的夹角，直线与平面的夹角</p>

<p>两个平面的交线就可以确定一条空间直线；已知直线上一点和直线的方向向量也可以确定一条直线。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/line1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/line2.png" alt="image" /></p>

<p>两条直线之间的夹角可用两条直线的方向向量之间的夹角来得到</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/lineangle.png" alt="image" /></p>

<p>直线与平面之间的夹角可用直线的方向向量和平面的法向量之间的夹角来得到。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/linespaceangle.png" alt="image" /></p>

<h4 id="section-29">第五节 曲面及其方程</h4>
<p>曲面方程的概念，旋转曲面，柱面，二次曲面</p>

<p>曲面方程</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/qumian.png" alt="image" /></p>

<p>旋转曲面：平面内一条曲线绕着平面上的一条直线旋转一周得到的曲面叫做旋转曲面。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/xuanzhuanqumian.png" alt="image" /></p>

<p>柱面：一条直线绕着一条定曲线平行移动得到的轨迹称为柱面。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/zhumian.png" alt="image" /></p>

<p>二次曲面<a href="http://zh.wikipedia.org/wiki/%E4%BA%8C%E6%AC%A1%E6%9B%B2%E9%9D%A2">on wiki</a>，与平面解析几何中定义二次曲线类似，三元二次方程<script type="math/tex">F(x,y,z)=0</script>所表示的曲面称为二次曲面，而平面是一次曲面。Wikipedia上显示了各种二次曲面的方程和二次曲面的图形。</p>

<h4 id="section-30">第六节 空间曲线及其方程</h4>
<p>空间曲线的一般方程，空间曲线的参数方程，空间曲线在坐标面上的投影</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/spaceline1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/spaceline2.png" alt="image" /></p>

<h3 id="center-center-6"><center>第八部分 多元函数微分法及其应用</center></h3>

<h4 id="section-31">第一节 多元函数的基本概念</h4>
<p>平面点集、n维空间，多元函数的概念，二元函数的极限，二元函数的连续</p>

<p>将前面的一元函数的知识扩展下就知道了。</p>

<p>二元函数的极限称为二重极限，二重极限的存在是指<script type="math/tex">P(x,y)</script>以任何方式趋近<script type="math/tex">P_{0}(x_{0},y_{0})</script>(有别于在一元函数中只有从左边或者从右边趋近两种方式)，如果不同方式趋近时的极限值不同的话，说明二重极限不存在！</p>

<h4 id="section-32">第二节 偏导数</h4>
<p>偏导数的定义及其计算方法，二元函数偏导数的几何意义，高阶偏导数</p>

<p>在多元微分学中，自变量多了，所以导数变成偏导数了。对于二元函数偏导数的几何意义如下，也是斜率，但是要看如何过该点确定曲面的切线以及切线是对哪个轴的斜率！</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/piandaoshu.png" alt="image" /></p>

<p>高阶偏导数和前面的高阶导数类似，但是因为自变量多了，也就多了个混合偏导数，对于连续函数<script type="math/tex">z=f(x,y)</script>，在其连续区域内，两个二阶混合偏导数相等！</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/gaojipiandaoshu.png" alt="image" /></p>

<h4 id="section-33">第三节 全微分</h4>
<p>全微分的定义，可微、偏导数及连续之间的关系，全微分在近似计算中的应用</p>

<p>在多元微分学中对于某一个变量的微分叫做偏微分，对全部变量的微分就扩展成了全微分的概念，同样，多元函数微分学中微分的意义也是希望使用自变量的线性函数来近似代替函数的全增量<script type="math/tex">\vartriangle z</script>。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/quanweifen.png" alt="image" /></p>

<p>全微分同样可以用于近似计算。</p>

<h4 id="section-34">第四节 多元复合函数和隐函数的求导法则</h4>
<p>多元复合函数的求导法则，隐函数求导法则</p>

<p>多元复合函数的求导可以使用“链式法则”，即<strong>“分段相乘，分叉相加，单路全导，叉路偏导”</strong>！</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/chainrule.png" alt="image" /></p>

<p>对应上面两种情况下的“链式图”如下，第一种情况，z到x和y是分叉，分叉相加，z到x到t是分段，分段相乘，x到t是单路，单路全导；第二种情况，z到u和v是分叉，分叉相加，z到u到x是分段，分段相乘，u到t是叉路，叉路偏导！</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/chainrulefig.png" alt="image" /></p>

<p>隐函数求导是很重要的一部分，因为在实际应用中，很多时候得到的都是一个隐函数，并没有具体的函数表达式，对于它的求导有下面三个存在定理。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/yinfun1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/yinfun2.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/yinfun3.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/yinfun4.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/yinfun5.png" alt="image" /></p>

<p>最后的雅可比式比较重要，在数值分析中有相应的应用，理解它和行列式之间的关系，详情可看<a href="http://zh.wikipedia.org/wiki/%E8%A1%8C%E5%88%97%E5%BC%8F">行列式 on wiki</a>。<a href="http://zh.wikipedia.org/wiki/%E9%9B%85%E5%8F%AF%E6%AF%94%E7%9F%A9%E9%98%B5">雅可比矩阵 on wiki</a></p>

<h4 id="section-35">第五节 偏导数的几何应用</h4>
<p>空间曲线的切线与法平面，曲面切平面与法线</p>

<p>空间曲线的切线需要得到该点的各个方向的偏导数，法平面是过该点并垂直于切线的平面。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/spaceline_qiexian.png" alt="image" /></p>

<p>曲面的切平面与法线略过。</p>

<h4 id="section-36">第六节 多元函数的极值及其最值</h4>
<p>极值的定义，极值存在的条件，最大值与最小值，拉格朗日乘数法</p>

<p>条件极值问题转化成无条件极值问题，使用拉格朗日乘数法，这是一个非常重要的解决条件极值问题的方法，在机器学习的很多算法中使用这种方法，比如Fisher判别等等。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/lagerang1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/lagerang2.png" alt="image" /></p>

<h4 id="section-37">补充节 方向导数和梯度</h4>

<p>方向导数：很多时候我们想知道函数沿着某个方向的变化率，这个方向不一定是坐标轴方向。
<img src="http://hujiaweibujidao.github.io/images/math/fangxiangdaoshu1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/fangxiangdaoshu2.png" alt="image" /></p>

<p>梯度：梯度就是一个向量，表示曲线上某点沿着曲线的某个方向发生移动的向量。梯度的应用自然是梯度下降法，该方法可以让我们的优化问题的极值函数尽快地趋近问题的最优解。</p>

<p>这里还有等值线和等值面的概念，对于二元函数<script type="math/tex">f(x,y)</script>可以得到其对应的等值线<script type="math/tex">f(x,y)=c</script>，函数在某一点的梯度方向就是等值线在该点的法线方向。</p>

<p>还要理解梯度和方向导数之间的关系，如果梯度的方向与方向导数取得最大值的方向相同的话，那么该方向就是函数变化最快的方向。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/tidu1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/tidu2.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/tidu3.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/tidu4.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/tidu5.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/tidu6.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/tidu7.png" alt="image" /></p>

<h3 id="center-center-7"><center>第九部分 重积分</center></h3>

<h4 id="section-38">第一节 二重积分的概念与性质</h4>
<p>二重积分的概念，二重积分的性质</p>

<p>将一元函数积分进行扩展，如果是对闭区域D进行积分的话就叫做二重积分，很重要的一类二重积分问题是求曲顶柱体的体积，利用前面的定积分的思想来看，二重积分是取很小的积分面积元素，以它们为底，以函数值为高，然后求对应的曲顶柱体的体积。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/erchongjifen.png" alt="image" /></p>

<h4 id="section-39">第二节 二重积分的计算方法</h4>
<p>直角坐标下二重积分的计算，利用极坐标计算二重积分</p>

<p>直角坐标下的二重积分的计算可以看做是做两次单独的定积分。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/erchongjifen2.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/erchongjifen3.png" alt="image" /></p>

<p>有些情况下实际计算时需要根据区域D的情况考虑它属于X型还是Y型，还是需要分段进行考虑。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/erchongjifen4.png" alt="image" /></p>

<h4 id="section-40">第三节 三重积分</h4>
<p>三重积分的概念，三重积分的计算</p>

<p>三重积分可以看做是求密度不均匀的物体的体积，它取的是很小很小的体积元素。它的计算使用先一后二或者先二后一的方式来计算，此处略过。</p>

<h4 id="section-41">第四节 重积分的应用</h4>
<p>曲面的面积，质心</p>

<p>略过。</p>

<h3 id="center-center-8"><center>第十部分 微分方程</center></h3>

<h4 id="section-42">第一节 微分方程的基本概念</h4>
<p>引例，微分方程的基本概念</p>

<p>在许多问题中，我们不总是能够得到函数关系式，而是得到函数和它的导数之间的关系式，这样的关系式就是微分方程。微分方程中出现的未知函数的最高阶导数的阶数叫做微分方程的阶。</p>

<p>只要是能够满足微分方程的函数都是它的解，如果解中包含了任意常数，并且任意常数的个数与阶数相同，那么这个解又叫做微分方程的通解。</p>

<p>通常我们会有一些初始条件。确定了通解中的任意常数的话，那么就得到了微分方程的特解。</p>

<table>
  <tbody>
    <tr>
      <td>求微分方程<script type="math/tex">y'=f(x,y)</script>满足初始条件$$y</td>
      <td><em>{x=x</em>{0}}=y_{0}$$的特解的问题，叫做一阶微分方程的初值问题。</td>
    </tr>
  </tbody>
</table>

<p><img src="http://hujiaweibujidao.github.io/images/math/chuzhi.png" alt="image" /></p>

<h4 id="section-43">第二节 一阶微分方程</h4>
<p>可分离变量方程，齐次方程，一阶线性微分方程，伯努利方程</p>

<p>可分离变量方程：利用一阶微分方程的形式，巧妙地分离变量，一边是y的函数，另一边是x的函数，然后左右两边积分即可得到一个关于x和y的隐函数，这个隐函数即为微分方程的解。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/fenlibianliang1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/fenlibianliang2.png" alt="image" /></p>

<p>齐次方程：将原微分方程进行调整，左边为一阶导数，右边为关于<script type="math/tex">\frac{y}{x}</script>的函数，然后可以利用可分离变量得到微分方程的解。有些非齐次的微分方程可以化为齐次方程。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/qici1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/qici2.png" alt="image" /></p>

<p>一阶线性微分方程：对于未知函数和导数都是一次的微分方程。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/xianxing1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/xianxing2.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/xianxing3.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/xianxing4.png" alt="image" /></p>

<p>伯努利方程：含二阶导数</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/bonuli1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/bonuli2.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/bonuli3.png" alt="image" /></p>

<h4 id="section-44">第三节 可降阶的高阶微分方程</h4>
<p>y(n)=f(x)型的微分方程，yn=f(x，y’)型的微分方程，yn=f(Y，y’)型的微分方程</p>

<p>略过。</p>

<h4 id="section-45">第四节 二阶常系数微分方程</h4>
<p>通解的结构，二阶常系数齐次线性微分方程，二阶常系数非齐次线性微分方程</p>

<p>略过。</p>

<h4 id="section-46">第五节 微分方程的应用实例</h4>
<p>物体冷却过程的数学模型，动力学问题，人口模型</p>

<p>略过。</p>

<center>Congratuation! Thank you!</center>
<center>恭喜你，看完啦！</center>

<hr />

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/28/calculus-summary-all/">http://hujiaweibujidao.github.io/blog/2014/04/28/calculus-summary-all/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! ^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CS 9-Multiple Integration]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-9/"/>
    <updated>2014-04-27T14:29:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-9</id>
    <content type="html"><![CDATA[<h3 id="center-center"><center>第九部分 重积分</center></h3>

<h4 id="section">第一节 二重积分的概念与性质</h4>
<p>二重积分的概念，二重积分的性质</p>

<p>将一元函数积分进行扩展，如果是对闭区域D进行积分的话就叫做二重积分，很重要的一类二重积分问题是求曲顶柱体的体积，利用前面的定积分的思想来看，二重积分是取很小的积分面积元素，以它们为底，以函数值为高，然后求对应的曲顶柱体的体积。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/erchongjifen.png" alt="image" /></p>

<h4 id="section-1">第二节 二重积分的计算方法</h4>
<p>直角坐标下二重积分的计算，利用极坐标计算二重积分</p>

<p>直角坐标下的二重积分的计算可以看做是做两次单独的定积分。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/erchongjifen2.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/erchongjifen3.png" alt="image" /></p>

<p>有些情况下实际计算时需要根据区域D的情况考虑它属于X型还是Y型，还是需要分段进行考虑。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/erchongjifen4.png" alt="image" /></p>

<h4 id="section-2">第三节 三重积分</h4>
<p>三重积分的概念，三重积分的计算</p>

<p>三重积分可以看做是求密度不均匀的物体的体积，它取的是很小很小的体积元素。它的计算使用先一后二或者先二后一的方式来计算，此处略过。</p>

<h4 id="section-3">第四节 重积分的应用</h4>
<p>曲面的面积，质心</p>

<p>略过。</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-9/">http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-9/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! ^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CS 8-Multivariable Differential Calculus]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-8/"/>
    <updated>2014-04-27T14:29:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-8</id>
    <content type="html"><![CDATA[<h3 id="center-center"><center>第八部分 多元函数微分法及其应用</center></h3>

<h4 id="section">第一节 多元函数的基本概念</h4>
<p>平面点集、n维空间，多元函数的概念，二元函数的极限，二元函数的连续</p>

<p>将前面的一元函数的知识扩展下就知道了。</p>

<p>二元函数的极限称为二重极限，二重极限的存在是指<script type="math/tex">P(x,y)</script>以任何方式趋近<script type="math/tex">P_{0}(x_{0},y_{0})</script>(有别于在一元函数中只有从左边或者从右边趋近两种方式)，如果不同方式趋近时的极限值不同的话，说明二重极限不存在！</p>

<h4 id="section-1">第二节 偏导数</h4>
<p>偏导数的定义及其计算方法，二元函数偏导数的几何意义，高阶偏导数</p>

<p>在多元微分学中，自变量多了，所以导数变成偏导数了。对于二元函数偏导数的几何意义如下，也是斜率，但是要看如何过该点确定曲面的切线以及切线是对哪个轴的斜率！</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/piandaoshu.png" alt="image" /></p>

<p>高阶偏导数和前面的高阶导数类似，但是因为自变量多了，也就多了个混合偏导数，对于连续函数<script type="math/tex">z=f(x,y)</script>，在其连续区域内，两个二阶混合偏导数相等！</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/gaojipiandaoshu.png" alt="image" /></p>

<h4 id="section-2">第三节 全微分</h4>
<p>全微分的定义，可微、偏导数及连续之间的关系，全微分在近似计算中的应用</p>

<p>在多元微分学中对于某一个变量的微分叫做偏微分，对全部变量的微分就扩展成了全微分的概念，同样，多元函数微分学中微分的意义也是希望使用自变量的线性函数来近似代替函数的全增量<script type="math/tex">\vartriangle z</script>。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/quanweifen.png" alt="image" /></p>

<p>全微分同样可以用于近似计算。</p>

<h4 id="section-3">第四节 多元复合函数和隐函数的求导法则</h4>
<p>多元复合函数的求导法则，隐函数求导法则</p>

<p>多元复合函数的求导可以使用“链式法则”，即<strong>“分段相乘，分叉相加，单路全导，叉路偏导”</strong>！</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/chainrule.png" alt="image" /></p>

<p>对应上面两种情况下的“链式图”如下，第一种情况，z到x和y是分叉，分叉相加，z到x到t是分段，分段相乘，x到t是单路，单路全导；第二种情况，z到u和v是分叉，分叉相加，z到u到x是分段，分段相乘，u到t是叉路，叉路偏导！</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/chainrulefig.png" alt="image" /></p>

<p>隐函数求导是很重要的一部分，因为在实际应用中，很多时候得到的都是一个隐函数，并没有具体的函数表达式，对于它的求导有下面三个存在定理。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/yinfun1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/yinfun2.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/yinfun3.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/yinfun4.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/yinfun5.png" alt="image" /></p>

<p>最后的雅可比式比较重要，在数值分析中有相应的应用，理解它和行列式之间的关系，详情可看<a href="http://zh.wikipedia.org/wiki/%E8%A1%8C%E5%88%97%E5%BC%8F">行列式 on wiki</a>。<a href="http://zh.wikipedia.org/wiki/%E9%9B%85%E5%8F%AF%E6%AF%94%E7%9F%A9%E9%98%B5">雅可比矩阵 on wiki</a></p>

<h4 id="section-4">第五节 偏导数的几何应用</h4>
<p>空间曲线的切线与法平面，曲面切平面与法线</p>

<p>空间曲线的切线需要得到该点的各个方向的偏导数，法平面是过该点并垂直于切线的平面。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/spaceline_qiexian.png" alt="image" /></p>

<p>曲面的切平面与法线略过。</p>

<h4 id="section-5">第六节 多元函数的极值及其最值</h4>
<p>极值的定义，极值存在的条件，最大值与最小值，拉格朗日乘数法</p>

<p>条件极值问题转化成无条件极值问题，使用拉格朗日乘数法，这是一个非常重要的解决条件极值问题的方法，在机器学习的很多算法中使用这种方法，比如Fisher判别等等。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/lagerang1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/lagerang2.png" alt="image" /></p>

<h4 id="section-6">补充节 方向导数和梯度</h4>

<p>方向导数：很多时候我们想知道函数沿着某个方向的变化率，这个方向不一定是坐标轴方向。
<img src="http://hujiaweibujidao.github.io/images/math/fangxiangdaoshu1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/fangxiangdaoshu2.png" alt="image" /></p>

<p>梯度：梯度就是一个向量，表示曲线上某点沿着曲线的某个方向发生移动的向量。梯度的应用自然是梯度下降法，该方法可以让我们的优化问题的极值函数尽快地趋近问题的最优解。</p>

<p>这里还有等值线和等值面的概念，对于二元函数<script type="math/tex">f(x,y)</script>可以得到其对应的等值线<script type="math/tex">f(x,y)=c</script>，函数在某一点的梯度方向就是等值线在该点的法线方向。</p>

<p>还要理解梯度和方向导数之间的关系，如果梯度的方向与方向导数取得最大值的方向相同的话，那么该方向就是函数变化最快的方向。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/tidu1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/tidu2.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/tidu3.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/tidu4.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/tidu5.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/tidu6.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/tidu7.png" alt="image" /></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-8/">http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-8/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! ^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CS 7-Vector Algebra]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-7/"/>
    <updated>2014-04-27T14:29:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-7</id>
    <content type="html"><![CDATA[<h3 id="center-center"><center>第七部分 向量代数与空间解析几何</center></h3>
<p>本部分是多元微分学的基础，而且涉及到了很多的空间知识，图形比较多，所以这部分的图片比较多，如若不清晰请Wiki或者翻书查看。</p>

<h4 id="section">第一节 空间直角坐标系</h4>
<p>空间点的直角坐标，空间两点的距离</p>

<h4 id="section-1">第二节 向量代数</h4>
<p>向量的概念，向量的线性运算，向量的坐标，向量的模、方向角、投影，向量的数量积与向量积</p>

<p>方向角和方向余弦的概念：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/fangxiangjiao1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/fangxiangjiao2.png" alt="image" /></p>

<p>投影的概念，投影是一个数值，当投影是指是一个向量<script type="math/tex">\overrightarrow{r}</script>在另一个向量<script type="math/tex">\overrightarrow{u}</script>上的投影时，投影就是投影到目标向量上得到的向量的模与目标向量的单位向量的模的比值。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/touying1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/touying2.png" alt="image" /></p>

<p>向量的数量积的概念，即<script type="math/tex">ab=\|a\|\|b\|\cos \theta</script>，在物理中就是指力F做的功W。数量积又叫内积，是很重要的概念，在线代中同样有矩阵内积的概念，在数据挖掘中有一种很常用的度量相似度的方式，即余弦相似度，一般用于文本类似的数据求相似度。向量的向量积是<script type="math/tex">ab=\|a\|\|b\|\sin\theta</script>。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/shuliangji1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/shuliangji2.png" alt="image" /></p>

<h4 id="section-2">第三节 平面及其方程</h4>
<p>平面的点法式方程，平面的一般方程，两平面的夹角</p>

<p>已知一个平面内的一点和这个平面的法向量便可以确定一个平面了；其实，任何一个三元一次方程<script type="math/tex">Ax+By+Cz+D=0</script>都可以确定一个平面，其法向量就是(A,B,C)。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/space1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/space2.png" alt="image" /></p>

<p>两个平面的夹角可用两个平面的法向量之间的夹角来得到。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/spaceangle.png" alt="image" />
       　</p>

<h4 id="section-3">第四节 空间直线及其方程</h4>
<p>空间直线的一般方程，空间直线的对称式方程与参数方程，两直线的夹角，直线与平面的夹角</p>

<p>两个平面的交线就可以确定一条空间直线；已知直线上一点和直线的方向向量也可以确定一条直线。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/line1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/line2.png" alt="image" /></p>

<p>两条直线之间的夹角可用两条直线的方向向量之间的夹角来得到</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/lineangle.png" alt="image" /></p>

<p>直线与平面之间的夹角可用直线的方向向量和平面的法向量之间的夹角来得到。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/linespaceangle.png" alt="image" /></p>

<h4 id="section-4">第五节 曲面及其方程</h4>
<p>曲面方程的概念，旋转曲面，柱面，二次曲面</p>

<p>曲面方程</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/qumian.png" alt="image" /></p>

<p>旋转曲面：平面内一条曲线绕着平面上的一条直线旋转一周得到的曲面叫做旋转曲面。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/xuanzhuanqumian.png" alt="image" /></p>

<p>柱面：一条直线绕着一条定曲线平行移动得到的轨迹称为柱面。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/zhumian.png" alt="image" /></p>

<p>二次曲面<a href="http://zh.wikipedia.org/wiki/%E4%BA%8C%E6%AC%A1%E6%9B%B2%E9%9D%A2">on wiki</a>，与平面解析几何中定义二次曲线类似，三元二次方程<script type="math/tex">F(x,y,z)=0</script>所表示的曲面称为二次曲面，而平面是一次曲面。Wikipedia上显示了各种二次曲面的方程和二次曲面的图形。</p>

<h4 id="section-5">第六节 空间曲线及其方程</h4>
<p>空间曲线的一般方程，空间曲线的参数方程，空间曲线在坐标面上的投影</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/spaceline1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/spaceline2.png" alt="image" /></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-7/">http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-7/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! ^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CS 6-Infinite Series]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-6/"/>
    <updated>2014-04-27T14:29:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-6</id>
    <content type="html"><![CDATA[<h3 id="center-center"><center>第六部分 无穷级数</center></h3>

<h4 id="section">第一节 常数项级数的概念与基本性质</h4>
<p>常数项级数的概念，常数项级数的基本性质</p>

<p>无穷级数的思想来源于近似计算圆面积这个问题，考虑用内接正方形来近似计算。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/infty_round.png" alt="image" /></p>

<p>数列{<script type="math/tex">u_{n}</script>}的元素之和得到的表达式<script type="math/tex">u_{1}+u_{2}+\cdots+u_{n}+\cdots</script>就叫做(常数项)(无穷)级数，其前n项之和又可以组成一个新的数列{<script type="math/tex">s_{n}</script>}，即<script type="math/tex">s_{n}=\Sigma_{i=1}^{n}u_{i}</script>，一般项<script type="math/tex">s_{n}</script>称为部分和。</p>

<p>如果部分和数列{<script type="math/tex">s_{n}</script>}有极限，那么这个无穷级数<script type="math/tex">u_{n}=\Sigma_{i=1}^{n}u_{i}</script>就是收敛的，极限s就叫做这个无穷级数的和。</p>

<p>级数收敛的必要条件是它的一般项<script type="math/tex">u_{n}</script>趋近于0，但不是充分条件！比如，调和级数<script type="math/tex">1+\frac{1}{2}+\frac{1}{3}+\frac{1}{4}+\cdots+\frac{1}{n}+\cdots</script>的一般项<script type="math/tex">u_{n}=\frac{1}{n}</script>也是趋近于0的，但是调和级数是发散的，采用反证法即可证明得到，证明如下，<script type="math/tex">s_{2n}-s{n}>\frac{1}{2}</script>并不趋近于0，所以不收敛。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/tiaohe_series.png" alt="image" /></p>

<h4 id="section-1">第二节 常数项级数敛散性的判别方法</h4>
<p>正项级数及其敛散性的判别方法，交错级数及其敛散性的判别方法，绝对收敛与条件收敛</p>

<p>正项级数<script type="math/tex">u_{n}=\Sigma_{i=1}^{n}u_{i}</script>收敛的充分必要条件是它的部分和数列{<script type="math/tex">s_{n}</script>}有界。</p>

<p>比值审敛法，对于正项级数<script type="math/tex">u_{n}=\Sigma_{i=1}^{n}u_{i}</script>，若<script type="math/tex">\lim_{n\to \infty}\frac{u_{n+1}}{u_{n}}=\beta</script>，当<script type="math/tex">\beta>1</script>时级数发散，当<script type="math/tex">% &lt;![CDATA[
\beta<1 %]]&gt;</script>时级数收敛，当<script type="math/tex">\beta=1</script>时级数可能发散可能收敛。</p>

<p>还有其他的一些判断级数收敛的方法，略过。</p>

<h4 id="section-2">第三节 幂级数</h4>
<p>函数项级数的基本概念，幂级数及其敛散性，幂级数的运算，函数展开成幂级数，幂级数在近似计算中的应用</p>

<p>函数项级数就是定义在某个区间上的函数族之和，表达式类似<script type="math/tex">u_{1}(x)+u_{2}(x)+u_{3}(x)+\cdots+u_{n}(x)+\cdots</script>，对于某个确定的值<script type="math/tex">x=x_{0}</script>，函数项级数<script type="math/tex">u_{1}(x_{0})+u_{2}(x_{0})+u_{3}(x_{0})+\cdots+u_{n}(x_{0})+\cdots</script>就变成常数项级数，如果该常数项级数收敛的话，那么点<script type="math/tex">x_{0}</script>就是函数项级数在定义区间上的一个收敛点，所有收敛点就组成了收敛域。</p>

<p>幂级数就是最常用的一类函数项级数，它的形式如下：</p>

<script type="math/tex; mode=display">\Sigma_{n=0}^{\infty}a_{n}x^{n}=a_{0}x^{0}+a_{1}x^{1}+\cdots+a_{n}x^{n}+\cdots</script>

<p>一种判断幂级数收敛的办法是阿贝尔定理，如果级数<script type="math/tex">\Sigma_{n=0}^{\infty}a_{n}x^{n}</script>当<script type="math/tex">x=x_{0}(x_{0} \ne 0)</script>时收敛，那么对于开区间<script type="math/tex">(-\|x_{0}\|,\|x_{0}\|)</script>内的任何x都有幂级数收敛，反之，如果当<script type="math/tex">x=x_{0}(x_{0} \ne 0)</script>时发散，那么对于闭区间<script type="math/tex">[-\|x_{0}\|,\|x_{0}\|]</script>外的任何x都有幂级数发散。其实就是对于幂级数的收敛半径R内部任意x都收敛，外部都发散！</p>

<p>许多应用中，我们都希望知道如何将一个给定的函数f(x)展开成幂级数的形式，这样相当于对函数进行近似了，可以大大简化计算量，于是便有了泰勒级数！</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/tylor_serials.png" alt="image" /></p>

<p>特别地，当<script type="math/tex">x_{0}=0</script>时泰勒级数又叫麦克劳林级数，展开式称为麦克劳林展开式</p>

<script type="math/tex; mode=display">f(x)=\Sigma_{n=0}^{n}\frac{1}{n!}f^{n}(0)x^{n}</script>

<p>将函数展开成幂级数的步骤：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/miseries1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/miseries2.png" alt="image" /></p>

<p>例如，对于函数<script type="math/tex">e^{x}</script>幂级数展开</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/ex.png" alt="image" /></p>

<p>常用的幂级数：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/common_series.png" alt="image" /></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-6/">http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-6/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! ^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CS 5-Definite Integral]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-5/"/>
    <updated>2014-04-27T14:29:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-5</id>
    <content type="html"><![CDATA[<h3 id="center-center"><center>第五部分 定积分及其应用</center></h3>

<h4 id="section">第一节 定积分的概念</h4>
<p>引例，定积分的概念，定积分的几何意义，定积分的基本性质</p>

<p>为什么会有定积分？定积分最开始是为了解决平面内不规则图形的面积或者不规则物体的体积而提出的实际问题。但是，这个问题直到17世纪牛顿和莱布尼茨发现了微分和积分之间的内在联系之后，提出了计算定积分的基本方法。需要注意的是，定积分并不是直接就建立在不定积分之上的，不是有了不定积分才有了定积分，两者是不同的概念，但是又有内在联系！这个联系就是牛顿-莱布尼茨公式！</p>

<p>不定积分是微分的逆运算，它是函数f(x)的原函数，是由无穷多个函数组成的函数族；而定积分是一个确定的数值，是一种特殊的和的极限(定积分常常使用<strong>分割-近似代替-求和-取极限</strong>的方式来解释)，该数值与积分变量使用的字母无关，即<script type="math/tex">\int_{a}^{b} f(x)dx = \int_{a}^{b} f(t)dt </script>。</p>

<p>如果函数f(x)在区间(a,b)上连续或者在[a,b]上有界且只有有限个间断点，则函数f(x)在[a,b]上可积。</p>

<p>定积分的几何意义自然就是曲线与坐标轴和代表积分区间的直线围成的曲边梯形的面积。这个面积可正可负，定积分是这些面积的代数和(即有加有减)，如下便有<script type="math/tex">\int_{a}^{b}=S1-S2+S3</script>。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/dingjifen.png" alt="image" /></p>

<p>定积分的性质：<script type="math/tex">\int_{a}^{b}f(x)dx=-\int_{b}^{a}f(x)dx, ( a>b )</script></p>

<p>定积分中值定理：函数f(x)在区间[a,b]上连续，则在[a,b]上至少有一点满则<script type="math/tex">\int_{a}^{b}f(x)dx=f(\varepsilon)(b-a), a \le \varepsilon \le b</script>，这个中值定理(又叫中值公式)和微分中的拉格朗日中值定理的结构很相似，但是几何意义完全不同了，<strong>拉格朗日中值定理指的是微分也就是斜率相等，而定积分中值定理的几何意义指的其实就是面积相等！</strong>如果用物体运动来解释的话，那就是<script type="math/tex">f(\varepsilon)</script>其实就是物体在a到b的时间段内的平均速度，平均速度乘以运动时间就是总位移了。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/jifen_midvalue.png" alt="image" /></p>

<h4 id="section-1">第二节 微积分的基本定理</h4>
<p>变速直线运动中位置函数与速度函数之间的联系，积分上限函数及其导数，牛顿一莱布尼兹公式</p>

<p>如果我们用物体的运动来解释定积分的话，那么定积分<script type="math/tex">\int_{a}^{b}vdt</script>表示的就是物体从时刻a到时刻b内运动的位移。</p>

<p>积分上限函数，这个函数很重要，而且来源有些巧妙，正是这个函数引出了后面的牛顿-莱布尼茨公式。</p>

<p>假设x是区间[a,b]上的任意一点，那么对于区间[a,x]上的定积分<script type="math/tex">\int_{a}^{x}f(x)dx</script>，因为定积分与积分变量的字母无关，即<script type="math/tex">\int_{a}^{x}f(x)dx=\int_{a}^{x}f(t)dt</script>，如果积分上限x在区间[a,b]上任意变动的话，那么对于任意一个x，定积分都有一个值对应，所以它在区间[a,b]上定义了一个函数！假设这个函数记为<script type="math/tex">\Phi(x)=\int_{a}^{x}f(t)dt, (a \le x \le b)</script>，该函数不仅是连续的，而且可导，导数就是f(x)。由此联想下原函数的定义，我们发现一个结论，<strong>一个连续函数f(x)的原函数是存在的，而且这个原函数之一就是它对应的积分上限函数</strong>！这就表明了积分学中的定积分和原函数之间的联系！</p>

<p>在上面的基础之上，便有了牛顿-莱布尼茨公式！它就更加巧妙地找到了定积分的计算和原函数之间的联系，即<script type="math/tex">\int_{a}^{b}f(x)dx=F(b)-F(a)</script>，<strong>这个公式的意义就是一个连续函数在区间[a,b]上的定积分等于它的任一原函数在该区间上的增量！</strong></p>

<h4 id="section-2">第三节 定积分的换元法和分部积分法</h4>
<p>定积分的换元法，定积分的分部积分法</p>

<p>求定积分方法其实和求不定积分的方法差不多，找到了原函数然后使用牛顿-莱布尼茨公式即可。</p>

<h4 id="section-3">第四节 反常积分</h4>
<p>无穷限的反常积分，无界函数的反常积分</p>

<p>反常积分有两类：
一类是指函数是无穷限的，也就是积分区间是从[<script type="math/tex">-\infty</script>,b]或者从[a,<script type="math/tex">+\infty</script>]或者从[<script type="math/tex">-\infty</script>,<script type="math/tex">+\infty</script>]，即区间包含了无穷，这一类要考虑函数f(x)在无穷限时极限是否存在，如果存在则根据牛顿-莱布尼茨公式即可求解，如果不存在那么反常积分发散；
一类是指函数是无界的，也就是函数f(x)在a的领域内是无界的，也就是趋近<script type="math/tex">\pm\infty</script>，此时a称为瑕点(无界间断点)，如果极限<script type="math/tex">\lim_{t \to a^{+}}\int_{t}^{b}f(x)dx,(t>a)</script>存在则根据牛顿-莱布尼茨公式即可求解，否则它就是发散的。</p>

<h4 id="section-4">第五节 定积分的应用</h4>
<p>定积分的元素法，定积分的几何应用，定积分的物理应用</p>

<p>定积分的应用自然是和定积分概念引入时一样，主要是为了计算面积和体积。元素法是定积分计算的老办法，也就是四部曲(<strong>分割-近似代替-求和-取极限</strong>)。</p>

<p>面积的计算包括直角坐标和极坐标下两种情况，定积分还可以用来计算旋转体的体积</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/dingjifen_area.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/xuanzhuanti.png" alt="image" /></p>

<p>定积分还可以用来求平面曲线的弧长，例子略过。</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-5/">http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-5/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! ^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CS 4-Indefinite Integral]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-4/"/>
    <updated>2014-04-27T14:29:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-4</id>
    <content type="html"><![CDATA[<h3 id="center-center"><center>第四部分 不定积分</center></h3>

<h4 id="section">第一节 不定积分的概念与性质</h4>
<p>原函数与不定积分的概念，基本积分表，不定积分的性质</p>

<p>连续函数一定有原函数，而且原函数肯定是无穷多个的，它们组成了一个原函数族，这就是不定积分的概念，函数f(x)的不定积分<script type="math/tex">\int f(x)dx</script>在几何上就表示<script type="math/tex">f(x)</script>积分曲线族。</p>

<p>积分基本上就是微分的逆运算，所以积分表只要参照常用函数的微分表即可。</p>

<h4 id="section-1">第二节 换元积分法</h4>
<p>第一类换元积分法（凑微分法），第二类积分换元法，分部积分法</p>

<p>很多时候被积函数不都是常见的初等函数，遇到复杂的情况我们需要使用其他的方法来计算积分。假设我们要求不定积分<script type="math/tex">\int g(x)dx</script></p>

<p>(1)如果我们有一个函数关系<script type="math/tex">u=h(x), g=f(u)</script>，也就是说，被积函数g(x)是关于u的函数，而u又是关于x的函数，为什么要这么复杂呢？因为g(x)直接积分比较难，但是可以将它看成<script type="math/tex">g(x)=f(u)\cdot u'=f[h(x)] \cdot h'(x)</script>，那么就有</p>

<script type="math/tex; mode=display">\int g(x)dx= \int f[h(x)] \cdot h'(x)dx= \int f[h(x)]d(h(x))= [\int f(u)du]_{u=h(x)}=F(u)+C</script>

<p>这样我们就将对g(x)求积分变成了对<script type="math/tex">u=h(x)</script>求积分，这就是第一类换元积分法。例如，求<script type="math/tex">\int \frac{1}{1+2x}dx</script>，令<script type="math/tex">u=1+2x</script>即可。</p>

<p>(2)如果我们有一个函数关系<script type="math/tex">x=h(t)</script>，也就是说，第一类换元积分是找一个函数<script type="math/tex">u=h(x)</script>，利用du和dx的关系将dx替换掉，而第二类是直接找到x关于t的函数，这样<script type="math/tex">dx=h'(t)dt</script>就可以将dx替换掉了，那么<script type="math/tex">\int g(x)dx = [\int g[h(t)]h'(t)dt]_{t=h^{-1}(x)} </script>，这种换元积分法就是第二类换元积分法。例如，求<script type="math/tex">\int \frac{xdx}{\sqrt{x-3}}</script>，令<script type="math/tex">t=\sqrt{x-3}</script>，即<script type="math/tex">x=t^{2}+3</script>即可。</p>

<p>分部积分法，如果函数u=u(x)和函数v=v(x)具有连续导数，则有<script type="math/tex">\int uv'dx = uv - \int u'vdx</script>，通常还简写为<script type="math/tex">\int udv = uv - \int vdu</script>，这种方法自然常用求两个函数乘积的积分，例如，求<script type="math/tex">\int xcosxdx</script>。</p>

<h4 id="section-2">第四节 有理函数的积分</h4>
<p>有理函数的积分，可化为有理函数的积分举例</p>

<p>有理函数是指两个多项式的商，即形如<script type="math/tex">\frac {P(x)}{Q(x)}= \frac {a_{0}x^{n}+a_{1}x^{n-1}+a_{2}x^{n-2}+\dots+a_{n}}{b_{0}x^{m}+b_{1}x^{m-1}+b_{2}x^{m-2}+\dots+b_{m}}</script>，若有<script type="math/tex">m>n</script>则为真分式，否则为假分式。利用多项式的除法，总可以将一个假分式分解成一个多项式和一个真分式的和的形式。任何一个有理真分式都可以分解为以下四类最简分式之和：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\frac{A}{x-a}, \frac{A}{(x-a)^n}, \frac{Ax+B}{x^2+px+q}, \frac{Ax+B}{(x^2+px+q)^n} \quad (n \ge 2, p^2-4q < 0) %]]&gt;</script>

<p>若有理真分式的分母中含有因式<script type="math/tex">(x-a)^n</script>，那么分式中含有：</p>

<script type="math/tex; mode=display">\frac{A1}{x-a}+\frac{A2}{(x-a)^2}+\dots+\frac{An}{(x-a)^n}</script>

<p>若有理真分式的分母中含有因式<script type="math/tex">(x+px+q)^n</script>，那么分式中含有：</p>

<script type="math/tex; mode=display">\frac{A1}{x+px+q}+\frac{A2}{(x+px+q)^2}+\dots+\frac{An}{(x+px+q)^n}</script>

<p>对于系数，可以在确定了最简分式的组合之后利用待定系数就可求出来。</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-4/">http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-4/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! ^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CS 3-Differential Mean Value Theorems]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-3/"/>
    <updated>2014-04-27T14:29:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-3</id>
    <content type="html"><![CDATA[<h3 id="center--center"><center>第三部分 微分中值定理与导数的应用 </center></h3>

<h4 id="section">第一节 微分中值定理</h4>
<p>罗尔中值定理，拉格朗日中值定理，泰勒中值定理，柯西中值定理</p>

<p>罗尔中值定理就是说对于在区间<script type="math/tex">(a,b)</script>上的连续可导函数f(x)，若左右端点的函数值相等，那么区间内至少有一个点满足它的导数为0，即<script type="math/tex">f'(\varepsilon)=0, \varepsilon \in (a,b)</script>；</p>

<p>拉格朗日中值定理就是说对于在区间<script type="math/tex">(a,b)</script>上的连续可导函数f(x)，区间内至少有一个点满足<script type="math/tex">f'(\varepsilon)=\frac{f(a)-f(b)}{a-b}, \varepsilon \in (a,b)</script>，该定理就没有罗尔中值定理的条件那么严格了，所以后者是前者的一个特殊情况。拉格朗日中值定理的几何意义如下，曲线在C点处的切线平行于弦AB；</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/langrant.png" alt="image" /></p>

<p>柯西中值定理就扩展到区间<script type="math/tex">(a,b)</script>上的两个连续可导函数f(x)和F(x)，区间内至少有一个点满足<script type="math/tex">\frac{f'(\varepsilon)}{F'(\varepsilon)}=\frac{f(a)-f(b)}{F(a)-F(b)}, \varepsilon \in (a,b)</script>。</p>

<p>当<script type="math/tex">F(x)=x</script>时，<script type="math/tex">F(a)=a,F(b)=b</script>，即有<script type="math/tex">f(a)-f(b)=f'(\varepsilon)(a-b), \varepsilon \in (a,b)</script>，这个式子是不是就是拉格朗日中值定理的内容？</p>

<p>泰勒中值定理略过，和后面泰勒展开式差不多。</p>

<h4 id="section-1">第二节 洛必达法则</h4>
<p>0/0型未定式，∞/∞型未定式，其他类型未定式</p>

<p>洛必达法则很重要，因为很多时候我们总是会遇到各种不同特殊形式的未定式，它们的极限可以试试使用洛必达法则来求。</p>

<p>条件略过，简言之就是<script type="math/tex">\lim_{x \to x_{0}} \frac{f(x)}{g(x)}=\lim_{x \to x_{0}} \frac{f'(x)}{g'(x)}</script>，也就是说我们可以先对分子分母求导然后求极限。</p>

<h4 id="section-2">第三节 函数单调增减性及曲线的凸凹性</h4>
<p>函数的单调性，曲线的凹凸性及拐点</p>

<p>驻点：函数f(x)一阶导数为0的点，根据它的正负可以判断函数的单调性，大于0为单调递增；
拐点：函数f(x)二阶导数为0的点，根据它的正负可以判断函数的凹凸性，大于0为凹的；</p>

<h4 id="section-3">第四节 函数的极值与最大值、最小值</h4>
<p>极值的定义，极值存在的条件，最大值、最小值</p>

<p>极值存在的条件就是判断该点和该点两边的一阶导数的正负情况。</p>

<h4 id="section-4">第五节 函数图形的描绘</h4>
<p>要根据函数的极值和最值以及渐近线来近似绘图</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/fun_figure.png" alt="image" /></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-3/">http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-3/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! ^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CS 2-Derivative and Differential]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-2/"/>
    <updated>2014-04-27T14:29:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-2</id>
    <content type="html"><![CDATA[<h3 id="center-center"><center>第二部分 导数与微分</center></h3>

<h4 id="section">第一节 导数概念</h4>
<p>引例，导数的定义，导数的几何意义，可导与连续的关系</p>

<p>导数的几何意义就是曲线在某点的切线的斜率，反应了变化的快慢，理解这个很重要，后面的偏导数的理解也类似。如果用物体的运动来解释的话，导数就是物体在那个时刻的加速度了。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/deviration_meaning.png" alt="image" /></p>

<h4 id="section-1">第二节 函数的求导法则</h4>
<p>函数的和、差、积、商的求导法则，反函数的求导法则，复合函数的求导法则，基本求导法则与导数公式</p>

<p>关于反函数的求导法则：<script type="math/tex">\frac{dy}{dx}=\frac{1}{\frac{dx}{dy}}</script></p>

<p>关于复合函数的求导法则：<script type="math/tex">\frac{dy}{dx}=\frac{dy}{du} \cdot \frac{du}{dx}</script></p>

<p>关于基本初等函数求导法则</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/deviration.png" alt="image" /></p>

<h4 id="section-2">第三节 高阶导数</h4>

<p>二阶及二阶以上的导数称为高阶导数</p>

<h4 id="section-3">第四节 隐函数及其参数方程所确定的函数的导数</h4>
<p>隐函数的导数，由参数方程所确定的函数的导数</p>

<p>如果方程<script type="math/tex">F(x,y)=0</script>确定了<script type="math/tex">y</script>是<script type="math/tex">x</script>的函数，那么这样的函数就叫做隐函数。
一般它的求导分为两种方法：
(1)如果能够解出<script type="math/tex">y=f(x)</script>关系式的话(即隐函数显化)，就先解出然后求导；
(2)如果不能解出，那么就利用复合函数求导方式进行求导，例如两边同时对x求导，遇到复杂的还可以两边先取对数然后求导。</p>

<h4 id="section-4">第五节 函数的微分</h4>
<p>微分的定义，微分的几何意义，基本微分公式与微分法则，微分形式的不变性，微分的应用</p>

<p>先看看微分是怎么引入的？</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/weifen.png" alt="image" /></p>

<p>简言之，在实际应用中，常常需要知道当自变量x有细微变化的时候，函数y的变化量<script type="math/tex">\vartriangle y</script>是多少？为了方便计算，我们需要将增量表达式线性化处理，从而计算出<script type="math/tex">\vartriangle y</script>的近似值。如上面所示，我们只需要用<script type="math/tex">A \vartriangle x</script>来近似代替<script type="math/tex">\vartriangle y</script>。</p>

<p>微分的几何意义，这其实是数学中常用的非线性函数的局部线性化，这里是利用曲线的切线段(MP)来近似代替曲线段(MN)。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/weifen_meaning.png" alt="image" /></p>

<p>微分最大的应用就是求近似值，利用<script type="math/tex">\vartriangle y \approx dy = f'(x) \vartriangle x</script>。例如，求<script type="math/tex">\sqrt[3]{1.02}</script>的近似值，取函数<script type="math/tex">f(x)=\sqrt[3]{x}, x_{0}=1, \vartriangle x=0.02</script>即可。</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-2/">http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-2/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! ^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CS 1-Functions and Limits]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-1/"/>
    <updated>2014-04-27T14:29:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-1</id>
    <content type="html"><![CDATA[<h3 id="center--center"><center>第一部分 函数与极限 </center></h3>

<h4 id="section">第一节 函数</h4>
<p>集合、区间与邻域，函数的概念与性质，反函数与复合函数，初等函数</p>

<p>关于初等函数 <a href="http://zh.wikipedia.org/wiki/%E5%88%9D%E7%AD%89%E5%87%BD%E6%95%B0">wiki</a>，初等函数在其定义域内都是连续的。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/elementalfuns.png" alt="image" /></p>

<p>关于指数函数：
对于相等间隔的自变量x的取值，指数函数对应值的比例为常数。由指数运算法则可知，对任意的x，只要给定<script type="math/tex">x_{0}>0</script>，则<script type="math/tex">a^{x+x_{0}}/a^{x}=a^{x_{0}}</script>恒成立。此性质可以作为判断两个变量之间的关系是否为指数函数关系的主要依据。此外，这个性质导出了数理统计中的指数分布，在数理统计中我们会看到。</p>

<h4 id="section-1">第二节 函数的极限</h4>
<p>数列极限及性质，函数极限及性质，无穷小与无穷大，极限运算法则，极限存在准则和两个重要极限，无穷小的比较</p>

<p>关于收敛数列(极限存在)有两个性质：唯一性和有界性</p>

<p>关于函数极限，注意，<script type="math/tex">x \to x_{0}</script>的极限是否存在与函数在<script type="math/tex">x_{0}</script>是否有定义无关。<a href="http://hujiaweibujidao.github.io/images/math/fun_limit.png">函数极限的定义</a></p>

<p>函数极限的几何意义是，当x在领域<script type="math/tex">(x_{0}-\delta,x_{0}+\delta)</script>内时，函数值y落在下图中<script type="math/tex">(A-\varepsilon,A+\varepsilon)</script>内。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/funlimit_meaning.png" alt="image" /></p>

<p>关于无穷小和无穷大：无穷小并不是指负无穷，而是函数在<script type="math/tex">x \to x_{0}</script>时的极限为0，无穷小与有解变量的乘积还是无穷小，但是这个性质放在无穷大上面就不成立了！例如，<script type="math/tex">\lim_{x \to +\infty} \frac{sinx}{x} = 0</script>是无穷小，但是<script type="math/tex">\lim_{x \to +\infty} xcosx</script>不是无穷小，它不符合无穷小的定义，<a href="http://www.guokr.com/post/469944/">关于这个问题的讨论</a>，上面仅代表我的理解，不知对否，若有错误请指出。</p>

<p>两个重要的极限：<script type="math/tex">\lim_{x \to 0} \frac{sinx}{x} = 1</script> 和 <script type="math/tex">\lim_{x \to +\infty} (1+\frac{1}{x})^{x} = e</script></p>

<p>关于极限<script type="math/tex">\lim_{x \to 0} \frac{sinx}{x} = 1</script>可用下图来解释，圆的边长是1，<script type="math/tex">BC=sinx, AD=tanx, \hat{AB}=x</script>，在角度很小很小，即<script type="math/tex">x \to 0</script>时，三者近似相等。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/sinxoverx.png" alt="image" /></p>

<p>关于极限<script type="math/tex">\lim_{x \to \infty} (1+\frac{1}{x})^{x} = e</script> (注意，不论是<script type="math/tex">\lim_{x \to +\infty}</script>还是<script type="math/tex">\lim_{x \to -\infty}</script>都成立)它道出了自然对数<script type="math/tex">e</script>到底是什么！当然还有其他的方式表示出<script type="math/tex">e</script>，比如按照级数展开的方式，我认为<script type="math/tex">e</script>是数学界最美丽的符号！<script type="math/tex">e \approx 2.71828</script></p>

<p>这两个重要极限一般用于求复杂的函数的极限值。</p>

<h4 id="section-2">第三节 函数的连续性与间断点</h4>
<p>函数的连续性，函数的间断点</p>

<p>函数的间断点分为两类：
第一类是函数在<script type="math/tex">x=x_{0}</script>处间断，但是左右极限都存在，如果左右极限相等的话该间断点称为可去间断点，如果不相等称为跳跃间断点；
其他情况下的间断点都属于第二类间断点。</p>

<h4 id="section-3">第四节 初等函数的连续性</h4>
<p>连续函数四则运算的连续性，反函数与复合函数的连续性，初等函数的连续性</p>

<p>只要记住初等函数在它们的定义域内是连续就行了。</p>

<h4 id="section-4">第五节 闭区间上连续函数的性质</h4>
<p>最大值和最小值定理，介值定理与零点定理</p>

<p>最大值和最小值定理就是说在闭区间上的连续函数f(x)一定是有上下界的；</p>

<p>介值定理就是说在闭区间上的连续函数f(x)，如果左右端点的取值不同，例如<script type="math/tex">f(a)=A,f(b)=B</script>，那么区间中肯定有一点的函数值能够取到<script type="math/tex">[A,B]</script>之间的任何一个值；</p>

<p>零点定理就是说在闭区间上的连续函数f(x)，如果左右端点的取值异号，例如<script type="math/tex">% &lt;![CDATA[
f(a)=A>0,f(b)=B<0 %]]&gt;</script>，那么区间中肯定有一点的函数值为0！</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-1/">http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-1/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! ^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Calculus Summary]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/24/calculus-summary/"/>
    <updated>2014-04-24T08:40:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/24/calculus-summary</id>
    <content type="html"><![CDATA[<p><strong><center>微积分总结 Summary of Calculus</center></strong>
<strong><center>逸夫图书馆, 2014/4/26</center></strong></p>

<h3 id="center-center"><center>第零部分 碎碎念</center></h3>

<p>到了研究生阶段才意识到本科的数学原来作用这么大，不论是在数据挖掘，还是机器学习，亦或是模式识别，数学都是基础中的基础。于是乎，我在逸夫图书馆泡了几天看了些微积分、线代和数理统计的书籍，写下三份总结，记录下重要的知识，以备后忘。本人才疏学浅，若有错误之处还请指出，让我“增长”，若有不足也请指出，使我“完备”，谢谢！:-)</p>

<p><strong>[注：这些总结不会详细地讲解所有概念，只是挑选一些我个人感觉比较有用的知识点进行总结，很多时候可能只是列举知识点，并无解释，忘记了的可以自行Wiki或者翻书，另外，为了节省写作时间，对于多重积分的计算和应用以及二阶的微分方程的求解我略过了，这部分暂时对我作用不大。另外，对于一些定理我并没有给出详细的表达，忽略了些前提条件，请不要较真，我希望的是给自己一个感性的理解就行，具体理性的分析需要的时候再查，还有就是我还剪切粘贴了很多图片…嗯，就是这样…强迫症者慎入…]</strong></p>

<p>PS：本总结的大纲是按照参考书籍<a href="http://product.dangdang.com/23311529.html">高等数学 中国环境出版社</a>的目录结构来整理的，章节顺序有调整，我将无穷级数提前了，原书将这部分放在最后一章节，私以为不妥，每个小节标题下面一行的内容都是原书中的各个细分的小节内容。所有截图都来自参考书籍<a href="http://book.douban.com/subject/2112359/">同济大学 高等数学 高等教育出版社</a>。</p>

<p>参考书籍：</p>

<p>1.<a href="http://book.douban.com/subject/2112359/">同济大学 高等数学 高等教育出版社</a></p>

<p>2.<a href="http://product.dangdang.com/23311529.html">高等数学 中国环境出版社</a></p>

<p>它山之石：</p>

<p>1.<a href="http://aff.whu.edu.cn/huangzh/">武汉大学 黄正华老师</a>写的微积分复习总结 <a href="http://hujiaweibujidao.github.io/files/calculus1_huangzhenghua.pdf">上</a>和<a href="http://hujiaweibujidao.github.io/files/calculus2_huangzhenghua.pdf">下</a></p>

<p>本总结共十个部分，内容较多，分页查看，谢谢！</p>

<p><a href="http://localhost:4000/blog/2014/04/27/calculus-summary-chapter-1/">第一部分 函数与极限 </a></p>

<p><a href="http://localhost:4000/blog/2014/04/27/calculus-summary-chapter-2/">第二部分 导数与微分</a></p>

<p><a href="http://localhost:4000/blog/2014/04/27/calculus-summary-chapter-3/">第三部分 微分中值定理与导数的应用 </a></p>

<p><a href="http://localhost:4000/blog/2014/04/27/calculus-summary-chapter-4/">第四部分 不定积分</a></p>

<p><a href="http://localhost:4000/blog/2014/04/27/calculus-summary-chapter-5/">第五部分 定积分及其应用</a></p>

<p><a href="http://localhost:4000/blog/2014/04/27/calculus-summary-chapter-6/">第六部分 无穷级数</a></p>

<p><a href="http://localhost:4000/blog/2014/04/27/calculus-summary-chapter-7/">第七部分 向量代数与空间解析几何</a></p>

<p><a href="http://localhost:4000/blog/2014/04/27/calculus-summary-chapter-8/">第八部分 多元函数微分法及其应用</a></p>

<p><a href="http://localhost:4000/blog/2014/04/27/calculus-summary-chapter-9/">第九部分 重积分</a></p>

<p><a href="http://localhost:4000/blog/2014/04/27/calculus-summary-chapter-10/">第十部分 微分方程</a></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/24/calculus-summary/">http://hujiaweibujidao.github.io/blog/2014/04/24/calculus-summary/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! ^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Numerical Methods using Matlab]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/23/numerical-methods-using-matlab/"/>
    <updated>2014-04-23T22:13:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/23/numerical-methods-using-matlab</id>
    <content type="html"><![CDATA[<p>一本关于数值算法与应用的总结小书</p>

<p>目前写了四个章节：[点击章节标题可以直接查看并下载 (^o^)/~]   </p>

<ul>
  <li><a href="http://hujiaweibujidao.github.io/files/nm-chapter1.pdf">第一章 线性方程组求解</a></li>
</ul>

<p>内容包括：高斯消去法，LU分解，Cholesky分解，矩阵的逆矩阵求解</p>

<ul>
  <li><a href="http://hujiaweibujidao.github.io/files/nm-chapter2.pdf">第二章 非线性方程求解</a></li>
</ul>

<p>内容包括：二分法，牛顿法，割线法，IQI法，Zeroin算法</p>

<ul>
  <li><a href="http://hujiaweibujidao.github.io/files/nm-chapter3.pdf">第三章 矩阵特征值和奇异值求解</a></li>
</ul>

<p>内容包括：基本幂法，逆幂法和移位幂法，QR分解，Householder变换，实用QR分解技术，奇异值分解SVD</p>

<ul>
  <li><a href="http://hujiaweibujidao.github.io/files/nm-chapter4.pdf">第四章 曲线拟合和多项式插值</a></li>
</ul>

<p>内容包括：曲线拟合，拉格朗日插值多项式，牛顿插值多项式，分段线性插值，保形分段三次插值，三次样条插值</p>

<p><img src="http://hujiaweibujidao.github.io/images/201311/nm-cover.png" width="600" height="600" title="" />
<img src="http://hujiaweibujidao.github.io/images/201311/nm-chapter.png" width="600" height="600" title="" />
<img src="http://hujiaweibujidao.github.io/images/201311/nm-math.png" width="600" height="600" title="" />
<img src="http://hujiaweibujidao.github.io/images/201311/nm-code.png" width="600" height="600" title="" /></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/23/numerical-methods-using-matlab/">http://hujiaweibujidao.github.io/blog/2014/04/23/numerical-methods-using-matlab/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! ^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[probability and statistics summary]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/22/probability-and-statistics-summary/"/>
    <updated>2014-04-22T00:06:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/22/probability-and-statistics-summary</id>
    <content type="html"><![CDATA[<h3 id="centercenter"><center>概率与数理统计总结</center></h3>
<hr />

<p>[TOC]</p>

<h4 id="center-center"><center>**第零部分 碎碎念**</center></h4>
<p>本文是对概率和数理统计中的重要内容的一个小总结，不会侧重很多众所周知的细节，所以有啥疑问还是需要Google或者Wikipedia。关于本文中出现的术语参照参考书籍中的定义，部分可能与大学教材中不同，请自行对应起来理解。小弟才疏学浅，若有错误请留言，欢迎指正。</p>

<p>主要参考书籍：</p>

<p>1.<a href="http://book.douban.com/subject/2985995/">《爱上统计学》</a></p>

<p>2.<a href="http://book.douban.com/subject/7056708/">《深入浅出统计学》</a></p>

<p>3.<a href="http://book.douban.com/subject/24381562/">《统计思维：程序员数学之概率统计》</a></p>

<h4 id="center-center-1"><center>**第一部分 概率**</center></h4>
<p>1.事件：对立事件(complementary event)，互斥事件(exclusive event)，相交事件(intersecting event)，相关事件(dependent event)，独立事件(independent event)，可以使用韦恩图(Venn Diagram)方便分析事件之间的关系。</p>

<p>如果事件A和B会相互影响，那么它们是相关事件，否则是独立事件。
事件A和B独立：$P(A|B)=P(A) \quad P(A \cap B)=P(A)P(B)$</p>

<p>2.概率：条件概率(Conditional Probability)，全概率(Total Probability)，贝叶斯定理(Bayes’ Theorem)</p>

<table>
  <tbody>
    <tr>
      <td>条件概率：$P(A</td>
      <td>B)=\frac{P(A \cap B)}{P(B)}$</td>
    </tr>
  </tbody>
</table>

<table>
  <tbody>
    <tr>
      <td>全概率：$P(B)=P(B</td>
      <td>A)P(A)+P(B</td>
      <td>A’)P(A’)$</td>
    </tr>
  </tbody>
</table>

<table>
  <tbody>
    <tr>
      <td>贝叶斯定理(将条件概率和全概率整合到一起)：$P(A</td>
      <td>B)=\frac{P(A \cap B)}{P(B</td>
      <td>A)P(A)+P(B</td>
      <td>A’)P(A’)}$</td>
    </tr>
  </tbody>
</table>

<p>3.期望(Expectation)与方差(Variance)</p>

<p>$E(x)=\Sigma xP(X=x) \quad Var(x)=E(x-\mu)^{2}=\Sigma (x-\mu)^2P(X=x)=E(x^{2})-(E(x))^{2}$</p>

<p>线性变换之后的期望与方差：</p>

<p>$E(ax+b)=aE(x)+b \quad Var(ax+b)=a^{2}Var(x)$
$E(ax+by)=aE(x)+bE(y) \quad Var(ax+by)=a^{2}Var(x)+b^{2}Var(y)$</p>

<p><strong>思考：为什么加上b方差并没有发生变化呢？因为在变量中增加常数b只是将概率分布移动了一下，分布的形状并没有发生改变，所以b并没有在方差中起到作用。</strong></p>

<p>相互独立事件X和Y：</p>

<p>$E(X+Y)=E(X)+E(Y) \quad Var(X+Y)=Var(X)+Var(Y)$
$E(X-Y)=E(X)-E(Y) \quad Var(X-Y)=Var(X)+Var(Y)$</p>

<p>**思考：为什么$Var(X-Y)=Var(X)+Var(Y)$？可以随便拿数据验证之。[TODO]
记住，一个随机变量减去另一个随机变量得到的概率分布的方差是两个随机变量的方差之和，方差只会增加！下面两个图示演示了其结果
**</p>

<p><img src="varxplusy.png" alt="image" /></p>

<p><img src="varxminusy.png" alt="image" /></p>

<p>相互独立的随机变量与独立观测值之间的区别：</p>

<p><img src="independentobservation.png" alt="image" /></p>

<h4 id="center-center-2"><center>**第二部分 分布**</center></h4>

<p>1.概率质量函数PMF(Probability Mass Function)：数据集中数据值到它的概率的映射函数。直方图是各个值出现的频数，如果将频数除以样本总数，得到概率，归一化之后的直方图就是PMF。</p>

<p><img src="pmf.png" alt="image" /></p>

<p>2.累积分布函数CDF(Cumulative Distribution Function)：数据集中数据值到它在分布中概率的累积值的映射函数。例如，
CDF(0) = 0; CDF(1) = 0.2; CDF(2) = 0.6; CDF(3) = 0.8; CDF(4) = 0.8; CDF(5) = 1，它的CDF图为一个阶跃函数：</p>

<p><img src="cdf.png" alt="image" /></p>

<p>3.指数分布(exponential distribution)：一种连续分布。举例来说，观察一系列事件之间的间隔时间，若事件在每个时间点发生的概率相同，那么间隔时间的分布就近似指数分布。指数分布的CDF如下：</p>

<script type="math/tex; mode=display">
CDF(x)=1-e^{-\lambda x}
</script>

<p>参数$\lambda$决定了指数分布的形状，通常，指数分布的均值是$\frac{1}{\lambda}$，中位数是$\frac{log(2)}{\lambda}$。下图为$\lambda=2$的指数分布图：</p>

<p><img src="edcdf.png" alt="image" /></p>

<p>如果判断一个分布是否是指数分布呢？一种办法是画出取对数之后的互补累积分布函数(CCDF=Complementary CDF=1-CDF(x))，CCDF是一条斜率为$-\lambda$的直线，原因如下：</p>

<script type="math/tex; mode=display">
y=CCDF(x)=1-CDF(x)=e^{-\lambda x} \quad => \quad log(y)=-\lambda x
</script>

<p>4.正态分布(Normal Distribution)：又叫高斯分布，是最常用的分布。对于正态分布的CDF还没有一种准确的表达，最常用的一种形式是以误差函数(error function)来表示，它是一个特殊的函数，表示为erf(x)：</p>

<script type="math/tex; mode=display">
CDF(x)=\frac{1}{2}[1+erf(\frac{x-\mu}{\sigma \sqrt{2}})] \quad erf(x)=\frac{2}{\sqrt{\pi}}\int_{0}^{x}e^{-r^{2}}dt
</script>

<p>其中，参数$\mu$和$\sigma$分别决定了正态分布的均值和标准差。下图为$\mu=2.0$和$\sigma=0.5$的正态分布的CDF图：</p>

<p><img src="ndcdf.png" alt="image" /></p>

<p>根据大数定理，当我们处理大样本数据集(超过30个数据)，并且重复地从总体中抽取样本时，得到的数值分布就接近正态分布曲线。正态分布以均值为中心完全对称。</p>

<p>关于正态分布有一个重要的结论，对任何数值分布来说(不论它的均值和标准差)，只要数值是正态分布，那么几乎100%的数值都分布在均值的-3到3个标准差之间。下面是正态曲线下数值的分布情况：</p>

<p><img src="nd.png" alt="image" /></p>

<p>从中可以看出，在均值与1个标准差之间大概有34%的数值分布，在1个标准差和2个标准差之间大概有13%的数值分布，在2个标准差和3个标准差之间大概有2.1%的数值分布。</p>

<p><a href="http://wikipedia.org/wiki/Log-normal_distribution">对数正态分布</a>：如果一组数据取对数之后服从正态分布，那么我们就称其服从对数正态分布。对数正态分布的 CDF 跟正态分布一样, 只是用 logx 代替原来的 x:</p>

<script type="math/tex; mode=display">
CDF_{lognormal}(x) = CDF_{normal}(log x)
</script>

<p>对数正态分布的均值与标准差不再是是$\mu$和$\sigma$了。可以证明,成人体重的分布是近似对数正态的。</p>

<h4 id="center-center-3"><center>**第三部分 描述性统计量**</center></h4>

<p>1.描述数据的集中趋势：均值(mean)，中位数(median)，众数(mode)，加权平均数</p>

<p>百分位点(percentile points)：中位数(Q2)就是50百分位点，Q1为25百分位点(lower quartile)，Q3为75百分位点(upper quartile)，经常使用Q3-Q1=IQR(interquartile range，四分差或四分位数)来检查分布是否对称。</p>

<p>[如果要计算一组数中的某个百分位数，一般比较好的排序方法是选择排序；当然，如果是计算该组数的特殊的百分位数，例如中位数，有其他更好地方法能够在线性时间内得到，之后我对做一些相关问题的研究，暂且说明一下]</p>

<p>2.描述数据的变异性：极差(range)，标准差(standard deviation,简称s或者SD)，方差(deviation)</p>

<p>标准差的计算公式：
$$
s=\sqrt{\frac{\Sigma(X-\bar{X})^2}{n-1}}
$$</p>

<p><strong>s是总体标准差的无偏估计，如果根号内部分母改成了n则是有偏估计</strong>，详细证明参见：<a href="http://en.wikipedia.org/wiki/Bias_of_an_estimator">http://en.wikipedia.org/wiki/Bias_of_an_estimator</a></p>

<p>标准差和方差的异同：<strong>它们都是用来反映数据集中数据的变异性或者离散度的度量，但是标准差以原有的计算单位存在，然而方差以平方单位存在，前者在实际中更加具有意义</strong>。例如，某高校的男生的平均身高是170cm，标准差是5cm，那么说明该校男生的身高与均值的差异大概就是5cm，换成方差来解释的话就不好陈述了。</p>

<p>使用有偏估计其实也可，但是最好使用无偏估计，我记得Coursera Machine Learning课中Andrew Ng曾经提到过，实际编码中其实还是使用有偏估计，因为它们在样本数据很大的时候其实结果没多大影响。</p>

<p>3.数据集的图形化显示：直方图，饼图，线图，柱形图，条形图，茎叶图等</p>

<p>数据分布的差异性描述：平均值，变异性，峰度(kurtosis)，偏度(skewness)</p>

<p>峰值可能有多个，比如双峰或者多峰等。偏度有一个计算公式，由Pearson发明的，他同时也是相关系数的发明者，偏度虽有正负之分，但是绝对值越大说明图形越偏。</p>

<script type="math/tex; mode=display">
SK=\frac{3(\bar{X}-M)}{s},\quad M=Median,\bar{X}=Mean,s=SD
</script>

<p>4.相关系数(correlation coefficient)是两个变量之间<strong>线性关系</strong>的数值型指标，取值范围是[-1,1]，大于0表示正相关，小于0表示负相关，可以用散点图来直接查看相关性。根据某些不成文的规则，一般高于0.6表示强相关，低于0.4表示弱相关，中间部分表示中度相关。</p>

<p>[<strong>Pearson相关系数考察的变量的属性是连续的，例如年龄，体重等，如果是离散型变量那么应该使用点二列相关系数</strong>]</p>

<p>注意两点：(1)<strong>相关系数反映的是只是线性关系！如果两个变量的相关系数为0，只能说明它们没有线性关系存在，但是可能存在其他的非线性关系！</strong>
(2)<strong>相关性和因果关系无关！</strong>例如，冰淇淋的消费量和犯罪率是正相关的，但是两者不存在任何因果关系！</p>

<p>相关系数的计算：</p>

<script type="math/tex; mode=display">
r_{XY}=\frac{n\Sigma{XY}-\Sigma{X}\Sigma{Y}}{\sqrt{[n\Sigma{X^2}-(\Sigma{X})^2][n\Sigma{Y^2}-(\Sigma{Y})^2]}}
</script>

<p>决定系数：相关系数的平方，它表述一个变量的方差可以被另一个变量的方差来解释的百分比。</p>

<h4 id="center-center-4"><center>**第四部分 假设检验**</center></h4>

<p>1.假设：一般假设就是一个“猜想”，它表述问题的一般陈述。假设检验是用于样本，然后才将结论一般化推广到总体中。</p>

<p>2.零假设(null hypothesis=$H_{0}$，或叫原假设)：它一般表示“正在研究的两个变量无关或者没有差异”这样的命题。例如，三年级学生的记忆力考试成绩与四年级学生记忆力考试成绩之间没有差异。</p>

<p><strong>(1)零假设是研究的起点，因为在没有信息的情况下，零假设就被看作是可以接受的真实状态。在这种假设下，我们认为观测到的效应是由偶然因素造成的。</strong>
<strong>(2)零假设也是研究的基准，也就是说在零假设成立的情况下，计算统计量，然后进行假设检验。这就类似反证法的思想。</strong></p>

<p>3.研究假设(research hypothesis=alternate hypothesis，或叫备择假设)：与零假设相对立的，认为变量之间有关系的假设。</p>

<p>研究假设分为有方向和无方向两种研究假设。无方向研究假设命题例子：三年级学生的记忆力考试成绩与四年级学生记忆力考试成绩之间有差异。有方向研究假设命题例子：三年级学生的记忆力考试成绩低于四年级学生记忆力考试成绩。</p>

<p>讨论有无方向的另一种形式是讨论单尾检验(one-tailed test)和双尾检验(two-tailed test)。</p>

<p>零假设与研究假设的区别：
(1)零假设表示两个变量没有差异或者没有关系，研究假设表示它们有关系或者有差异；
(2)零假设对应的是总体，而研究假设对应的是样本。我们是从总体中取出一部分样本进行检验，将得到的结论推广到总体中。
(3)因为总体不能直接检验(不现实，不经济或者不可能)，所以零假设只能间接检验，研究假设则可以直接检验。</p>

<!-- footnots -->

<!-- mathjax config similar to math.stackexchange -->
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  jax: ["input/TeX", "output/HTML-CSS"],
  tex2jax: {
    inlineMath: [ ['$', '$'] ],
    displayMath: [ ['$$', '$$']],
    processEscapes: true,
    skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
  },
  messageStyle: "none",
  "HTML-CSS": { preferredFont: "TeX", availableFonts: ["STIX","TeX"] }
});
</script>

<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML" type="text/javascript"></script>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/22/probability-and-statistics-summary/">http://hujiaweibujidao.github.io/blog/2014/04/22/probability-and-statistics-summary/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! ^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mou and StackEdit and Mathjax]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/15/flying-on-mac/"/>
    <updated>2014-04-15T13:39:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/15/flying-on-mac</id>
    <content type="html"><![CDATA[<p>该博文记录使用Mou和Stackedit中出现的一些问题，包括Mac中的一些软件出现异常的解决方案，使我们能够<code>Flying on Mac</code>，一直更新中…</p>

<p>如果Mou渲染Math公式有问题的话，尝试在第一行加上如下js，表示让Mou去加载Mathjax的脚本</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c">&lt;!--</span> <span class="kr">import</span> <span class="nx">js</span> <span class="k">for</span> <span class="nx">mathjax</span> <span class="o">--&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>该链接指向的是Mathjax的js，用来渲染Math公式，Mou支持Mathjax。为了减轻Octopress加载的负担，可以只在需要使用Mathjax的博文中添加一行js即可，不需要将它放在自定义的<code>head.html</code>文件中。</p>

<p>不知为何，最近加上了这句Math公式还是没有显示出来，貌似Mou并没有去加载这个js的样子，于是我尝试在浏览器中直接访问，将这个js中的所有内容复制进来，这样Mou有显示正常了，数学公式都没有问题！ :-) 如果你不能访问，放心，我已经将这个js的源码放在<a href="https://gist.github.com/hujiaweibujidao/11146289">这个Gist中</a>。</p>

<p>如果还是不行的话，那么建议使用<a href="https://stackedit.io/">stackedit</a>，感谢@beader的建议！还有一个问题是stackedit是在线编辑的，图片要保存到Google Driver中(或者有个特定的网址)，另外，它和Mou中内置的MathJax的渲染解析工具略有不同，例如对于行内Math公式的插入方式不同，Stackedit是以<code>$</code>为行内Math公式为标示符，Mou貌似不存在插入行内Math公式的方式，这时候可以在Mou中的Markdown文档中添加下面的代码让它支持行内Math公式。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c">&lt;!--</span> <span class="nx">mathjax</span> <span class="nx">config</span> <span class="nx">similar</span> <span class="nx">to</span> <span class="nx">math</span><span class="p">.</span><span class="nx">stackexchange</span> <span class="o">--&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/x-mathjax-config&quot;</span><span class="o">&gt;</span>
</span><span class="line"><span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nx">Config</span><span class="p">({</span>
</span><span class="line">  <span class="nx">jax</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;input/TeX&quot;</span><span class="p">,</span> <span class="s2">&quot;output/HTML-CSS&quot;</span><span class="p">],</span>
</span><span class="line">  <span class="nx">tex2jax</span><span class="o">:</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">inlineMath</span><span class="o">:</span> <span class="p">[</span> <span class="p">[</span><span class="s1">&#39;$&#39;</span><span class="p">,</span> <span class="s1">&#39;$&#39;</span><span class="p">]</span> <span class="p">],</span>
</span><span class="line">    <span class="nx">displayMath</span><span class="o">:</span> <span class="p">[</span> <span class="p">[</span><span class="s1">&#39;$$&#39;</span><span class="p">,</span> <span class="s1">&#39;$$&#39;</span><span class="p">]],</span>
</span><span class="line">    <span class="nx">processEscapes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class="line">    <span class="nx">skipTags</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;script&#39;</span><span class="p">,</span> <span class="s1">&#39;noscript&#39;</span><span class="p">,</span> <span class="s1">&#39;style&#39;</span><span class="p">,</span> <span class="s1">&#39;textarea&#39;</span><span class="p">,</span> <span class="s1">&#39;pre&#39;</span><span class="p">,</span> <span class="s1">&#39;code&#39;</span><span class="p">]</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="nx">messageStyle</span><span class="o">:</span> <span class="s2">&quot;none&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;HTML-CSS&quot;</span><span class="o">:</span> <span class="p">{</span> <span class="nx">preferredFont</span><span class="o">:</span> <span class="s2">&quot;TeX&quot;</span><span class="p">,</span> <span class="nx">availableFonts</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;STIX&quot;</span><span class="p">,</span><span class="s2">&quot;TeX&quot;</span><span class="p">]</span> <span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line"><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&quot;</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>测试：The <em>Gamma function</em> satisfying $\Gamma(n) = (n-1)!\quad\forall
n\in\mathbb N$ is via the Euler integra</p>

<script type="math/tex; mode=display">
\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt\,.
</script>

<p>如果文档是要放在Octopress中使用的话，推荐按照<a href="http://blog-jfttt.herokuapp.com/blog/2013/12/26/add-latex/">这位博主的方式修改</a>，使用kramdown代替默认的rdiscount，然后在<code>footer.html</code>中加入上面的脚本内容。</p>

<blockquote>
  <p><strong>过去的内容，也许不对…</strong> <br />
[但是，它还是存在些问题，关于inline Math公式的问题，推荐将Octopress中的Markdown引擎换成Kramdown，<a href="http://yanping.me/cn/blog/2012/03/10/octopress-with-latex/">参考教程</a>，另外，使用inline Math和使用block Math一样，都是两个连着的美元符。
bug：我发现在Math公式中写入<code>|</code>，即取绝对值符号的话会影响排版，暂时想到的解决方案是转义，换成<code>\\|</code>，它会换成双竖线，即取2范数的符号，不少情况下，不影响思考，嘿嘿。]</p>
</blockquote>

<p>=== At Last ===</p>

<p>我现在的做法是，做一般的作业使用Mou，按照上面的方式肯定有一个可以，完成作业没有问题。</p>

<p>写Octopress博客中的文章用StackEdit，行内Math用<code>$</code>(某些情况下可以，但是有些情况下不行，不行的话还是使用<code>$$</code>，Kramdown支持<code>$$</code>形式的行内公式)，其他形式用<code>$$</code>。Stackedit支持直接将文档publish到Github的某个项目的某个分支下的某个文件夹中，文件名自己命名。如下图所示：</p>

<p><img src="http://hujiaweibujidao.github.io/images/201404/stackedit_publish.png" alt="image" /></p>

<p>注意，如果该目录下有相同名称的文件的话，会被覆盖掉，利用这个方式我们就可以update以前的文章啦！当然，Stackedit在你publish了一次之后会记住publish的目标位置，以后每次更新之后publish都会publish到那个目标位置。</p>

<p>那如果使用Stackedit打开一个Octopress中已经写好了的文章呢？我使用的方法是<code>Import from URL</code>功能，其中的<code>URL</code>是该Markdown文档的URL，可以在Github中找到并打开那个文档，点击<code>Raw</code>按钮就会进入这份文档的源代码页面，复制该页面的URL即可，比如这篇文章的URL是</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="nx">https</span><span class="o">:</span><span class="c1">//raw.githubusercontent.com/hujiaweibujidao/hujiaweibujidao.github.io/source/source/_posts/2014-04-15-flying-on-mac.markdown</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>修改完了使用上面的方式覆盖即可。要让Octopress对这个页面进行重新渲染还需要在本地执行下面代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="nx">git</span> <span class="nx">pull</span>
</span><span class="line"><span class="nx">rake</span> <span class="nx">generate</span>
</span><span class="line"><span class="nx">rake</span> <span class="nx">deploy</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以按照<a href="http://hujiaweibujidao.github.io/blog/2013/11/18/make-your-octopress-easy/">Make Your Octopress Easy</a>的方式建立一个shell脚本简化处理流程，方法略过。</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/04/15/flying-on-mac/">http://hujiaweibujidao.github.io/blog/2014/04/15/flying-on-mac/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.<br />Thanks a lot. Hope you enjoy here! ^_^</p>
]]></content>
  </entry>
  
</feed>
