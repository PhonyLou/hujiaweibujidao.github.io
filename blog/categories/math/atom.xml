<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: math | Hujiawei Bujidao]]></title>
  <link href="http://hujiaweibujidao.github.io/blog/categories/math/atom.xml" rel="self"/>
  <link href="http://hujiaweibujidao.github.io/"/>
  <updated>2014-04-28T15:08:12+08:00</updated>
  <id>http://hujiaweibujidao.github.io/</id>
  <author>
    <name><![CDATA[hujiawei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linear Algebra Summary 1]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-1/"/>
    <updated>2014-04-29T14:03:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-1</id>
    <content type="html"><![CDATA[<p><strong><center>线性代数那些事 Things of Linear Algebra</center></strong>
<strong><center>逸夫图书馆, 2014/4/27</center></strong></p>

<h4 id="center1center"><center>1.行列式</center></h4>

<p><strong>什么是行列式？</strong></p>

<p>这个问题一点都不简单！</p>

<p>推荐阅读的博文<a href="http://spaces.ac.cn/index.php/archives/2208/">新理解矩阵5</a>以及<a href="http://www.matrix67.com/blog/archives/4294">我们需要怎样的数学教育？</a>，后者在网上比较火，简单的语言道出行列式以及矩阵的“天机”。</p>

<blockquote>
  <p>直到今天看到<a href="http://mathoverflow.net/questions/7584/what-are-the-most-misleading-alternate-definitions-in-taught-mathematics">这个网页</a>，才看见有人一语道破线性代数的真谛（这也是我终于决定写成此文的直接原因）。我终于找到了我那一个学期企图寻找的东西。就好像把 $x$ 变成 $2 x$ 一样，我们经常需要把 $(x, y)$ 变成 $(2 x + y, x – 3 y)$ 之类的东西，这就叫做线性变换。于是才想到定义矩阵乘法，用于表示一切线性变换。几何上看，把平面上的每个点 $(x, y)$ 都变到 $(2 x + y, x – 3 y)$ 的位置上去，效果就相当于对这个平面进行了一个“线性的拉扯”。
矩阵的乘法，其实就是多个线性变换叠加的效果，它显然满足结合律，但不满足交换律。主对角线全是 1 的矩阵所对应的线性变换其实就是不变的意思，因此它叫做单位矩阵。矩阵 A 乘以矩阵 B 得单位矩阵，就是做完线性变换 A 后再做一次线性变换 B 就又变回去了的意思，难怪我们说矩阵 B 是矩阵 A的逆矩阵。课本上对行列式的定义千奇百怪，又是什么递归，又是什么逆序对，还编写口诀帮助大家记忆。其实，<strong>行列式的真正定义就一句话：每个单位正方形在线性变换之后的面积</strong>。因此，单位矩阵的行列式当然就为 1，某行全为 0 的行列式显然为 0 （因为某一维度会被无视掉，线性变换会把整个平面压扁）， $|A·B|$ 显然等于 $|A|·|B|$ 。行列式为 0 ，对应的矩阵当然不可逆，因为这样的线性变换已经把平面压成一条线了，什么都不能把它变回去了。当然，更高阶的矩阵就对应了更高维的空间。一瞬间，所有东西都解释清楚了。</p>
</blockquote>

<!--![image][14]-->

<p>我认为，上面的表达不完全正确，比如其核心[行列式的真正定义就一句话：每个单位正方形在线性变换之后的面积]，但是，它真正让我们意识到要好好思考，到底，什么是行列式？</p>

<p><strong><a href="http://zh.wikipedia.org/wiki/%E8%A1%8C%E5%88%97%E5%BC%8F">Wiki</a>的解释：行列式其实是一个函数，一个将方阵转换成一个标量的函数！[就是说，行列式本质上就相当于一个函数]</strong></p>

<p><strong>行列式可以看做是有向面积或体积的概念在一般的欧几里得空间中的推广。或者说，在 n 维欧几里得空间中，行列式描述的是一个线性变换对“体积”所造成的影响。</strong></p>

<p>首先要注意的是如果是指矩阵的行列式，那么矩阵中只有方阵才有行列式！对方阵求行列式得到一个值，这个值就是指这个$n \times n$方阵(因为矩阵都可以看做是一个线性变换，所以就是指一个线性变换)对n维空间中的“体积”所造成的影响。在二维空间中，这个“体积”实际上是平行四边形的面积，在三维空间中，“体积”就是指平行六面体的体积。更高维以此类推。</p>

<p>先看下行列式在二维和三维空间的几何意义(wiki解释得非常详细！)</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/hanglieshi1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/hanglieshi2.png" alt="image" /></p>

<p>另一个解释(在矩阵条目中的解释)，<strong>一个方阵的行列式等于0当且仅当该方阵不可逆。系数是实数的时候，二维（三维）方阵A的行列式的绝对值表示单位面积（体积）的图形经过A对应的线性变换后得到的图形的面积（体积），而它的正负则代表了对应的线性变换是否改变空间的定向：行列式为正说明它保持空间定向，行列式为负则说明它逆转空间定向。</strong></p>

<p><img src="http://hujiaweibujidao.github.io/images/math/hanglieshi13.png" alt="image" /></p>

<p>下面看下什么是用行列式怎么理解线性变换，<strong>线性变换就是把一个向量线性地变为另一个向量</strong>，<strong>行列式表示的是线性变换前后平行六面体的体积的变化系数</strong>。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/hanglieshi3.png" alt="image" /></p>

<p>面积或体积的定义是恒正的，而行列式是有正有负的，因此需要引入有向面积和有向体积的概念。如果行列式表示的是线性变换对体积的影响，那么行列式的正负就表示了空间的定向。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/hanglieshi4.png" alt="image" /></p>

<p><strong>由二维及三维的例子，可以看到一般的行列式应该具有怎样的性质。在n维欧几里得空间中，作为“平行多面体”的“体积”的概念的推广，行列式继承了“体积”函数的性质。首先，行列式需要是线性的，这可以由面积的性质类比得到。这里的线性是对于每一个向量来说的，因为当一个向量变为原来的a倍时，“平行多面体”的“体积”也变为原来的a倍。其次，当一个向量在其它向量组成的“超平面”上时，n维“平行多面体”的“体积”是零（可以想像三维空间的例子）[在向量组中就是指它们线性相关了]。也就是说，当向量线性相关时，行列式为零。</strong></p>

<p><img src="http://hujiaweibujidao.github.io/images/math/hanglieshi5.png" alt="image" /></p>

<p>行列式的展开，代数余子式，拉普拉斯公式用于计算矩阵的行列式值</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/hanglieshi6.png" alt="image" /></p>

<p>行列式的性质：
<strong>若两个矩阵相似，那么它们的行列式相同。这是因为两个相似的矩阵之间只相差一个基底变换，而行列式描述的是矩阵对应的线性映射对体积的影响，而不是体积，所以基底变换并不会影响行列式的值。</strong></p>

<p><strong>行列式是所有特征值（按代数重数计）的乘积。这可由矩阵必和其若尔当标准型相似推导出。特殊地，三角矩阵的行列式等于其对角线上所有元素的乘积</strong></p>

<p><img src="http://hujiaweibujidao.github.io/images/math/hanglieshi8.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/hanglieshi9.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/hanglieshi10.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/hanglieshi11.png" alt="image" /></p>

<p>行列式与线性方程组，矩阵以及多项式还有多重积分之间的关系。</p>

<p>当线性方程组对应的行列式不为零时，由克莱姆法则，可以直接以行列式的形式写出方程组的解。但用克莱姆法则求解计算量巨大，因此并没有实际应用价值，一般用于理论上的推导。</p>

<p>多项式$p(x) = det(xI - A)$称为方块矩阵A的特征值多项式。这是一个由行列式定义的多项式，它的解是矩阵所有的特征值。</p>

<p>行列式与多重积分的关系主要就是<a href="http://zh.wikipedia.org/wiki/%E9%9B%85%E5%8F%AF%E6%AF%94%E7%9F%A9%E9%98%B5">雅可比行列式 on wiki</a>了。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/hanglieshi12.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/hanglieshi7.png" alt="image" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linear Algebra Summary]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary/"/>
    <updated>2014-04-29T14:03:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary</id>
    <content type="html"><![CDATA[<p><strong><center>线性代数那些事 Things of Linear Algebra</center></strong>
<strong><center>逸夫图书馆, 2014/4/27</center></strong></p>

<h4 id="center0center"><center>0.碎碎念</center></h4>

<p>到了研究生阶段才意识到本科的数学原来作用这么大，不论是在数据挖掘，还是机器学习，亦或是模式识别，数学都是基础中的基础。于是乎，我在逸夫图书馆泡了几天看了些微积分、线代和数理统计的书籍，写下三份总结，记录下重要的知识，以备后忘。本人才疏学浅，若有错误之处还请指出，让我“增长”，若有不足也请指出，使我“完备”，谢谢！:-)</p>

<p><strong>[注：这些总结不会详细地讲解所有概念，只是挑选一些我个人感觉比较有用的知识点进行总结，很多时候可能只是列举知识点，并无解释，忘记了的可以自行Wiki或者翻书，另外，为了节省写作时间，对于一些定理我并没有给出详细的表达，忽略了些前提条件，请不要较真，我希望的是给自己一个感性的理解就行，具体理性的分析需要的时候再查，还有就是我还剪切粘贴了很多图片，再有就是，本文采用的是’非线性方式’进行总结的…首篇意识流作品…嗯，就是这样…强迫症者慎入…]</strong></p>

<p>PS：本总结根据下面提到的武汉大学黄正华老师写的线性代数复习总结的顺序来的，因为黄老师的总结已经写得很好了，我只会提到一些我在其他地方看到或者听到的比较有用的心得分享。</p>

<p>参考书籍：</p>

<p>1.[线性代数 Using Matlab]</p>

<p>2.[]</p>

<p>它山之石：</p>

<p>1.<a href="http://aff.whu.edu.cn/huangzh/">武汉大学 黄正华老师</a>写的线性代数复习总结<a href="http://hujiaweibujidao.github.io/files/linear_algebra_huangzhenghua.pdf">book</a></p>

<p>全部内容：</p>

<p>1.<a href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-1/">行列式!</a></p>

<p>2.<a href="http://hujiaweibujidao.github.io/blog/2014/04/29/linearalgebra-summary-2/">矩阵！</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Calculus Summary Chapter 10]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/28/calculus-summary-chapter-10/"/>
    <updated>2014-04-28T14:29:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/28/calculus-summary-chapter-10</id>
    <content type="html"><![CDATA[<h3 id="center-center"><center>第十部分 微分方程</center></h3>

<h4 id="section">第一节 微分方程的基本概念</h4>
<p>引例，微分方程的基本概念</p>

<p>在许多问题中，我们不总是能够得到函数关系式，而是得到函数和它的导数之间的关系式，这样的关系式就是微分方程。微分方程中出现的未知函数的最高阶导数的阶数叫做微分方程的阶。</p>

<p>只要是能够满足微分方程的函数都是它的解，如果解中包含了任意常数，并且任意常数的个数与阶数相同，那么这个解又叫做微分方程的通解。</p>

<p>通常我们会有一些初始条件。确定了通解中的任意常数的话，那么就得到了微分方程的特解。</p>

<p>求微分方程<script type="math/tex">y'=f(x,y)</script>满足初始条件<script type="math/tex">y\|_{x=x_{0}}=y_{0}</script>的特解的问题，叫做一阶微分方程的初值问题。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/chuzhi.png" alt="image" /></p>

<h4 id="section-1">第二节 一阶微分方程</h4>
<p>可分离变量方程，齐次方程，一阶线性微分方程，伯努利方程</p>

<p>可分离变量方程：利用一阶微分方程的形式，巧妙地分离变量，一边是y的函数，另一边是x的函数，然后左右两边积分即可得到一个关于x和y的隐函数，这个隐函数即为微分方程的解。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/fenlibianliang1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/fenlibianliang2.png" alt="image" /></p>

<p>齐次方程：将原微分方程进行调整，左边为一阶导数，右边为关于<script type="math/tex">\frac{y}{x}</script>的函数，然后可以利用可分离变量得到微分方程的解。有些非齐次的微分方程可以化为齐次方程。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/qici1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/qici2.png" alt="image" /></p>

<p>一阶线性微分方程：对于未知函数和导数都是一次的微分方程。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/xianxing1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/xianxing2.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/xianxing3.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/xianxing4.png" alt="image" /></p>

<p>伯努利方程：含二阶导数</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/bonuli1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/bonuli2.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/bonuli3.png" alt="image" /></p>

<h4 id="section-2">第三节 可降阶的高阶微分方程</h4>
<p>y(n)=f(x)型的微分方程，yn=f(x，y’)型的微分方程，yn=f(Y，y’)型的微分方程</p>

<p>略过。</p>

<h4 id="section-3">第四节 二阶常系数微分方程</h4>
<p>通解的结构，二阶常系数齐次线性微分方程，二阶常系数非齐次线性微分方程</p>

<p>略过。</p>

<h4 id="section-4">第五节 微分方程的应用实例</h4>
<p>物体冷却过程的数学模型，动力学问题，人口模型</p>

<p>略过。</p>

<center>Congratuation! Thank you!</center>
<center>恭喜你，看完啦！</center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Calculus Summary Chapter 9]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-9/"/>
    <updated>2014-04-27T14:29:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-9</id>
    <content type="html"><![CDATA[<h3 id="center-center"><center>第九部分 重积分</center></h3>

<h4 id="section">第一节 二重积分的概念与性质</h4>
<p>二重积分的概念，二重积分的性质</p>

<p>将一元函数积分进行扩展，如果是对闭区域D进行积分的话就叫做二重积分，很重要的一类二重积分问题是求曲顶柱体的体积，利用前面的定积分的思想来看，二重积分是取很小的积分面积元素，以它们为底，以函数值为高，然后求对应的曲顶柱体的体积。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/erchongjifen.png" alt="image" /></p>

<h4 id="section-1">第二节 二重积分的计算方法</h4>
<p>直角坐标下二重积分的计算，利用极坐标计算二重积分</p>

<p>直角坐标下的二重积分的计算可以看做是做两次单独的定积分。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/erchongjifen2.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/erchongjifen3.png" alt="image" /></p>

<p>有些情况下实际计算时需要根据区域D的情况考虑它属于X型还是Y型，还是需要分段进行考虑。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/erchongjifen4.png" alt="image" /></p>

<h4 id="section-2">第三节 三重积分</h4>
<p>三重积分的概念，三重积分的计算</p>

<p>三重积分可以看做是求密度不均匀的物体的体积，它取的是很小很小的体积元素。它的计算使用先一后二或者先二后一的方式来计算，此处略过。</p>

<h4 id="section-3">第四节 重积分的应用</h4>
<p>曲面的面积，质心</p>

<p>略过。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Calculus Summary Chapter 8]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-8/"/>
    <updated>2014-04-27T14:29:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/04/27/calculus-summary-chapter-8</id>
    <content type="html"><![CDATA[<h3 id="center-center"><center>第八部分 多元函数微分法及其应用</center></h3>

<h4 id="section">第一节 多元函数的基本概念</h4>
<p>平面点集、n维空间，多元函数的概念，二元函数的极限，二元函数的连续</p>

<p>将前面的一元函数的知识扩展下就知道了。</p>

<p>二元函数的极限称为二重极限，二重极限的存在是指<script type="math/tex">P(x,y)</script>以任何方式趋近<script type="math/tex">P_{0}(x_{0},y_{0})</script>(有别于在一元函数中只有从左边或者从右边趋近两种方式)，如果不同方式趋近时的极限值不同的话，说明二重极限不存在！</p>

<h4 id="section-1">第二节 偏导数</h4>
<p>偏导数的定义及其计算方法，二元函数偏导数的几何意义，高阶偏导数</p>

<p>在多元微分学中，自变量多了，所以导数变成偏导数了。对于二元函数偏导数的几何意义如下，也是斜率，但是要看如何过该点确定曲面的切线以及切线是对哪个轴的斜率！</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/piandaoshu.png" alt="image" /></p>

<p>高阶偏导数和前面的高阶导数类似，但是因为自变量多了，也就多了个混合偏导数，对于连续函数<script type="math/tex">z=f(x,y)</script>，在其连续区域内，两个二阶混合偏导数相等！</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/gaojipiandaoshu.png" alt="image" /></p>

<h4 id="section-2">第三节 全微分</h4>
<p>全微分的定义，可微、偏导数及连续之间的关系，全微分在近似计算中的应用</p>

<p>在多元微分学中对于某一个变量的微分叫做偏微分，对全部变量的微分就扩展成了全微分的概念，同样，多元函数微分学中微分的意义也是希望使用自变量的线性函数来近似代替函数的全增量<script type="math/tex">\vartriangle z</script>。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/quanweifen.png" alt="image" /></p>

<p>全微分同样可以用于近似计算。</p>

<h4 id="section-3">第四节 多元复合函数和隐函数的求导法则</h4>
<p>多元复合函数的求导法则，隐函数求导法则</p>

<p>多元复合函数的求导可以使用“链式法则”，即<strong>“分段相乘，分叉相加，单路全导，叉路偏导”</strong>！</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/chainrule.png" alt="image" /></p>

<p>对应上面两种情况下的“链式图”如下，第一种情况，z到x和y是分叉，分叉相加，z到x到t是分段，分段相乘，x到t是单路，单路全导；第二种情况，z到u和v是分叉，分叉相加，z到u到x是分段，分段相乘，u到t是叉路，叉路偏导！</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/chainrulefig.png" alt="image" /></p>

<p>隐函数求导是很重要的一部分，因为在实际应用中，很多时候得到的都是一个隐函数，并没有具体的函数表达式，对于它的求导有下面三个存在定理。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/yinfun1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/yinfun2.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/yinfun3.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/yinfun4.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/yinfun5.png" alt="image" /></p>

<p>最后的雅可比式比较重要，在数值分析中有相应的应用，理解它和行列式之间的关系，详情可看<a href="http://zh.wikipedia.org/wiki/%E8%A1%8C%E5%88%97%E5%BC%8F">行列式 on wiki</a>。<a href="http://zh.wikipedia.org/wiki/%E9%9B%85%E5%8F%AF%E6%AF%94%E7%9F%A9%E9%98%B5">雅可比矩阵 on wiki</a></p>

<h4 id="section-4">第五节 偏导数的几何应用</h4>
<p>空间曲线的切线与法平面，曲面切平面与法线</p>

<p>空间曲线的切线需要得到该点的各个方向的偏导数，法平面是过该点并垂直于切线的平面。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/spaceline_qiexian.png" alt="image" /></p>

<p>曲面的切平面与法线略过。</p>

<h4 id="section-5">第六节 多元函数的极值及其最值</h4>
<p>极值的定义，极值存在的条件，最大值与最小值，拉格朗日乘数法</p>

<p>条件极值问题转化成无条件极值问题，使用拉格朗日乘数法，这是一个非常重要的解决条件极值问题的方法，在机器学习的很多算法中使用这种方法，比如Fisher判别等等。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/lagerang1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/lagerang2.png" alt="image" /></p>

<h4 id="section-6">补充节 方向导数和梯度</h4>

<p>方向导数：很多时候我们想知道函数沿着某个方向的变化率，这个方向不一定是坐标轴方向。
<img src="http://hujiaweibujidao.github.io/images/math/fangxiangdaoshu1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/fangxiangdaoshu2.png" alt="image" /></p>

<p>梯度：梯度就是一个向量，表示曲线上某点沿着曲线的某个方向发生移动的向量。梯度的应用自然是梯度下降法，该方法可以让我们的优化问题的极值函数尽快地趋近问题的最优解。</p>

<p>这里还有等值线和等值面的概念，对于二元函数<script type="math/tex">f(x,y)</script>可以得到其对应的等值线<script type="math/tex">f(x,y)=c</script>，函数在某一点的梯度方向就是等值线在该点的法线方向。</p>

<p>还要理解梯度和方向导数之间的关系，如果梯度的方向与方向导数取得最大值的方向相同的话，那么该方向就是函数变化最快的方向。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/tidu1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/tidu2.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/tidu3.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/tidu4.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/tidu5.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/tidu6.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/tidu7.png" alt="image" /></p>

]]></content>
  </entry>
  
</feed>
