<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: octopress | Hujiawei Bujidao]]></title>
  <link href="http://hujiaweibujidao.github.io/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://hujiaweibujidao.github.io/"/>
  <updated>2014-04-26T10:25:54+08:00</updated>
  <id>http://hujiaweibujidao.github.io/</id>
  <author>
    <name><![CDATA[hujiawei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[make your octopress easy]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2013/11/18/make-your-octopress-easy/"/>
    <updated>2013-11-18T13:11:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2013/11/18/make-your-octopress-easy</id>
    <content type="html"><![CDATA[<p>刚刚来到Octopress的世界，我的新鲜感依旧还在，呵呵，上午写了几个<code>shell</code>脚本让你在Octopress上写博客更加轻松些，至少让我轻松了很多，哈哈哈。</p>

<p>我特别头疼于类似新建文章<code>new_post["postname"]</code>这些个命令，那个下划线可能会记成短破折线，时间长了我可能就不记得这个命令了，当然，如果你是ruby开发者那就肯定不会这样啦，我这年龄大了，记忆力不行了，很难记住那么多的命令啦，还有就是我希望只要打开Terminal就可以调用这些命令，而不用每次切换目录，而且每次我新建了一个文章之后，Mou能够直接启动并打开这个新建的文章让我编辑，想想，这个世界是不是美好多了？哈哈哈</p>

<p>操作步骤：</p>

<h4>[1]新建环境变量<code>OCTOPRESS_HOME</code>，它是你的octopress的根目录，并添加到<code>PATH</code>中</h4>

<p>[下面是我在Mac上的操作，其他系统自行修改]</p>

<p><code>
sudo nano ~/.bash_profile  #打开并修改.bash_profile文件，下面两行是在该文件中的修改
export OCTOPRESS_HOME=/Users/hujiawei/git/octopress  #添加OCTOPRESS_HOME变量
export PATH=${PATH}:${OCTOPRESS_HOME}  #添加到path中
source ~/.bash_profile  
echo $OCTOPRESS_HOME  #验证是否变量存在
echo $PATH  #验证path是否设置成功
</code></p>

<h4>[2]编写几个<code>shell</code>脚本，放在<code>OCTOPRESS_HOME</code>目录下，作用分别如下：</h4>

<ul>
<li>gen：等价于<code>rake generate</code>操作</li>
</ul>


<p>```</p>

<h1>! /bin/bash</h1>

<p>path=$OCTOPRESS_HOME
cd &ldquo;$path&rdquo;</p>

<h1>pwd</h1>

<p>rake generate
echo &ldquo;generate ok&rdquo;
```</p>

<ul>
<li>dep：等价于<code>rake deploy</code>操作</li>
</ul>


<p>```</p>

<h1>! /bin/bash</h1>

<p>path=$OCTOPRESS_HOME
cd &ldquo;$path&rdquo;</p>

<h1>pwd</h1>

<p>rake generate
rake deploy
echo &ldquo;generate and deploy ok&rdquo;
```</p>

<ul>
<li>pre：等价于<code>rake preview</code>操作</li>
</ul>


<p>[注意，这里我是在子线程中启动预览的，所以你按下了Ctrl+C会也不会把预览给终止了，是不是瞬间又感觉这个世界又美好了很多啊，哈哈]</p>

<p>```</p>

<h1>! /bin/bash</h1>

<p>path=$OCTOPRESS_HOME
cd &ldquo;$path&rdquo;</p>

<h1>pwd</h1>

<h1>rake watch</h1>

<p>rake preview &amp;</p>

<h1>echo &ldquo;watch and preview ok&rdquo;</h1>

<p>```</p>

<ul>
<li>gmit：等价于<code>git add/commit/push</code>几个操作的组合</li>
</ul>


<p>```</p>

<h1>! /bin/bash</h1>

<p>if [ $# -ne 1 ]
then</p>

<pre><code>echo "Usage - gmit  message"
exit 1
</code></pre>

<p>fi
path=$OCTOPRESS_HOME
cd &ldquo;$path&rdquo;</p>

<h1>pwd</h1>

<p>git add .
git commit -m &ldquo;$1&rdquo;
git push origin source
echo &ldquo;git commit and push ok&rdquo;
```</p>

<ul>
<li>newpost：等价于<code>new_post[""] + open Mou</code>操作组合</li>
</ul>


<p>```</p>

<h1>! /bin/bash</h1>

<p>if [ $# -ne 1 ]
then</p>

<pre><code>echo "Usage -newpost  postname"
exit 1
</code></pre>

<p>fi
path=$OCTOPRESS_HOME
cd &ldquo;$path&rdquo;</p>

<h1>pwd</h1>

<p>filepath=<code>rake new_post["$1"]</code></p>

<h1>echo &ldquo;$filepath&rdquo;</h1>

<h1>Creating new post: source/_posts/2013-11-18-test5.markdown</h1>

<p>OLD_IFS=&ldquo;$IFS&rdquo;
IFS=&ldquo; &rdquo;
arr=($filepath)
filepath=${arr[3]}
IFS=&ldquo;$OLD_IFS&rdquo;
postpath=&ldquo;$path/$filepath&rdquo;</p>

<h1>echo &ldquo;$postpath&rdquo;</h1>

<h1>open Mou with the file</h1>

<p>open -a Mou $postpath
```</p>

<ul>
<li>newpage：等价于<code>new_page[""] + open Mou</code>操作组合</li>
</ul>


<p>```</p>

<h1>! /bin/bash</h1>

<p>if [ $# -ne 1 ]
then</p>

<pre><code>echo "Usage - newpage  pagename"
exit 1
</code></pre>

<p>fi
path=$OCTOPRESS_HOME
cd &ldquo;$path&rdquo;
echo &ldquo;$path&rdquo;
filepath=<code>rake new_page["$1"]</code>
echo &ldquo;$filepath&rdquo;</p>

<h1>Creating new page: source/projects/index.markdown</h1>

<p>OLD_IFS=&ldquo;$IFS&rdquo;
IFS=&ldquo; &rdquo;
arr=($filepath)
filepath=${arr[3]}
IFS=&ldquo;$OLD_IFS&rdquo;
postpath=&ldquo;$path/$filepath&rdquo;
echo &ldquo;$postpath&rdquo;</p>

<h1>open Mou with the file</h1>

<p>open -a Mou $postpath
```</p>

<h4>[3]使用<code>chmod 777 xxx</code>修改脚本的权限，测试执行下</h4>

<p><code>
cd $OCTOPRESS_HOME
chmod 777 gen  #其他文件类似
chmod 777 pre
chmod 777 dep
chmod 777 gmit
chmod 777 newpost
chmod 777 newpage
gen
newpost "test new post" #当这条命令完成生成了Markdown文件之后，你会发现Mou闪电般的将文件打开了，等着你输入呢！
</code></p>

<p>OK！Enjoy the world of Octopress！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2013/11/17/hello-octopress/"/>
    <updated>2013-11-17T17:03:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2013/11/17/hello-octopress</id>
    <content type="html"><![CDATA[<p>Hello world! Hello Octopress!</p>

<p>曾经因为很多问题的答案都在<a href="http://www.cnblogs.com"><strong>博客园</strong></a>上，于是我在那里驻扎了，但是，它的广告让我不能忍！</p>

<p>后来因为<a href="http://www.diandian.com"><strong>点点博客</strong></a>的小清新我瞬间就爱上了它，于是我搬家了，但是，它的冷清让我想要离开！</p>

<p>再后来<a href="http://wordpress.com"><strong>Wordpress</strong></a>进入了我的眼帘，苦于没有host，只好在BAE上安营，但是，它的龟速简直让我发指！</p>

<p>最后我终于走进了我一直忽视了的<a href="http://octopress.org/"><strong>Octopress</strong></a>，那一瞬间，我才发现，这才是我想要的！这才是我想要的博客！我可以自由的定义页面中的任何内容！</p>

<blockquote><p>A blogging framework for hackers.         &mdash; Parker Moore</p></blockquote>

<p>今天从早上开始一直到晚上终于把Octopress搭建和配置好了，好开心啊有木有！</p>

<p>下面介绍安装过程：[不是很轻松，但是也不会很难哟！]</p>

<p>安装步骤如下：</p>

<p>*<a href="http://octopress.org/docs/setup/rbenv/">安装rbenv和ruby</a></p>

<p>请确保ruby版本是1.9.3以上！我试过，如果版本低的话会出错，但是如果版本很高的话也有可能出错(我试过1.9.3-p2xx)，建议就安装1.9.3-p0，也可以使用<a href="http://octopress.org/docs/setup/rvm/">rvm</a>来管理ruby版本，我两个都试过了，推荐使用rbenv。</p>

<p><code>
brew update
brew install rbenv
brew install ruby-build
rbenv install 1.9.3-p0
rbenv rehash
rbenv global 1.9.3-p0  #建议增加这句修改系统全局的ruby版本
ruby --version  #查看系统ruby版本
</code></p>

<p>[注：如果install 1.9.3-p0时报错，提示llvm不行，需要安装gcc时按照提示的命令执行即可：<code>brew tap homebrew/dupes ; brew install apple-gcc42</code>]</p>

<p>*<a href="http://octopress.org/docs/setup/">安装Octopress</a></p>

<p>这部分耗时会长一些，其中的octopress目录名称可以随便修改，例如myblog等，<code>gem list</code>命令可以查看已经安装好了的依赖包，<code>rake install</code>就类似<code>make install</code>进行安装(Octopress的主题)，一定要确保这里执行的命令都是正确执行了的，否则后面可能出错。</p>

<p><code>
git clone git://github.com/imathis/octopress.git octopress
cd octopress
gem install bundler
rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
bundle install
rake install
</code></p>

<p>*<a href="http://octopress.org/docs/deploying/github/">发布到Github上</a></p>

<p>以前个人博客是在位于<code>http://username.github.com</code>这个域名下，现在改成了<code>http://username.github.io</code>，所以大家可以看到两种不同域名下的博客。另外，<a href="https://help.github.com/categories/20/articles">Github Pages</a>分为两类，一类是个人或者组织的博客，另一类是项目的介绍博客，这里只介绍如果搭建不介绍后者，但是两者基本上相同。</p>

<p>首先新建repository，名称为<code>username.github.io</code>，其中<code>username</code>是你的github用户名，拷贝repository的SSH地址，类似<code>git@github.com:username/username.github.io.git</code>。然后执行下面代码``，它主要是进行以下操作(不难理解，我就不翻译了，原文看着舒坦，嘿嘿)：</p>

<ul>
<li>Ask for and store your Github Pages repository url.</li>
<li>Rename the remote pointing to imathis/octopress from &lsquo;origin&rsquo; to &lsquo;octopress&rsquo;</li>
<li>Add your Github Pages repository as the default origin remote.</li>
<li>Switch the active branch from master to source.</li>
<li>Configure your blog&rsquo;s url according to your repository.</li>
<li>Setup a master branch in the _deploy directory for deployment.</li>
</ul>


<p><code>
rake setup_github_pages #按照提示输入你的repository的SSH地址
rake generate #生成静态网页，记住，每次有修改之后都需要执行一次或者多次才能查看新的预览！
rake deploy  #发布网页，这里会提交代码到github
rake preview #本地预览，默认端口是4000，可以修改
git add .
git commit -m 'your message'
git push origin source  #一定记着要提交source下的内容
</code></p>

<p>需要注意的是，如果你是Github新手的话，可能遇到<code>Permission denied (publickey)</code>，这说明你还没有添加key给当前用户，解决方案请参考<a href="https://help.github.com/articles/error-permission-denied-publickey">Error:Permission denied (publickey)</a>和<a href="https://help.github.com/articles/generating-ssh-keys">Github help:Generating SSH Keys</a>来为当前用户创建publickey，</p>

<p>通过命令<code>ssh -T billy.anyteen@github.com</code>可以查看Github是否识别当前用户，如果不能识别会返回<code>Permission denied (publickey)</code>，否则便是<code>Hi username! You've successfully authenticated, but GitHub does not # provide shell access.</code></p>

<p>另外，极力推荐一个<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">Git的简明教程</a>，作者廖雪峰是一位资深的开发者，著有畅销书籍《Spring 2.0核心技术与最佳实践》等，最近又推出了Python简明教程，非常实用！</p>

<p>*大功告成！</p>

<p>① 大致介绍下Octopress的目录结构(摘自<a href="http://www.dongwm.com/archives/qian-yi-octpressyi-ji-zi-ding-yi/">小明明s à domicile</a>)</p>

<p>```
├─ config.rb  #指定额外的compass插件
├─ config.ru<br/>
├─ Rakefile   #rake的配置文件,类似于makefile,这个我修改了一些内容
├─ Gemfile    #bundle要下载需要的gem依赖关系的指定文件
├─ Gemfile.lock  #这些gem依赖的对应关系,比如A的x本依赖于B的y版本,我也修改了
├─ <em>config.yml  #站点的配置文件
├─ public/  #在静态编译完成后的目录,网站只需要这个目录下的文件树
├─ </em>deploy/  #deploy时候生成的缓存文件夹,和public目录一样
├─ sass/  #css文件的源文件,过程中会compass成css
├─ plugins/  #放置自带以及第三方插件的目录,ruby程序
│  └── xxx.rb
└─ source/  #这个是站点的源文件目录,public目录就是根据这个目录下数据生成的
   └─ _includes/</p>

<pre><code>  └─ custom/  #自定义的模板目录,被相应上级html include
     └─ asides/  #边栏模板自定义模板目录
  └─ asides/  #边栏模板目录
  └─ post/  #文章页面相应模板目录
</code></pre>

<p>   └─ <em>layouts/  #默认网站html相关文件,最底层
   └─ </em>posts/  #新增以及从其它程序迁移过来的数据都存在这里
   └─ stylesheets/ #css文件目录
   └─ javascripts/  #js文件目录
```</p>

<p>② 一些配置内容</p>

<p><a href="http://octopress.org/docs/configuring/">关于如何配置Octopress</a></p>

<p><a href="http://octopress.org/docs/blogging/">关于如何创建新的page或者post以及本地预览</a></p>

<p><a href="http://octopress.org/docs/theme/">关于如何修改主题和默认的样式</a></p>

<p><a href="http://opthemes.com/">Octopress支持的第三方主题下载和预览网站</a></p>

<p><a href="http://812lcl.github.io/blog/2013/10/26/octopressce-bian-lan-ji-ping-lun-xi-tong-ding-zhi/">关于侧边栏和主题的定制，添加新浪微博，多说评论，分类标签云等等</a></p>

<p>[注意，使用多说的话，shortname不是你的个人资料中的名称，而是新建的站点给定的！另外，对于<a href="http://havee.me/internet/2013-02/add-duoshuo-commemt-system-into-octopress.html">这里</a>提到的升级问题，可以干脆直接删除data-title]</p>

<p>最有用的资料总能在这里找到：<a href="http://octopress.org/docs/">Octopress的官方文档</a></p>

<p>③ 关于<a href="http://jekyllrb.com/docs/home/">Jekyll</a></p>

<p>Octopress是基于Jekyll的，所以对Jekyll有一定的了解是很有必要的，Jekyll主页中记录了Jekyll的方方面面，最好是了解下Directory Structure，Configuration，Writing Posts，Creating Pages等等内容，这对后面的Octopress的使用会有很大帮助的。</p>

<p>④ 关于本地编写博客</p>

<p>对于前台开发，我心中向来只有一个工具<a href="www.aptana.com">Aptana</a>！所以，我把整个octopress目录作为aptana中的一个项目进行管理，至少有两个好处：</p>

<ul>
<li>aptana的git插件可以让我很清楚的看到我又改动了哪些文件中的哪些内容</li>
<li>aptana的语法高亮功能让我可以在众多的前台代码中游刃有余，对于简单的html可以直接在aptana中预览</li>
</ul>


<p>对于Markdown编辑器，我觉得Mou可能不是最好的，但是，它是很精巧的！我简直爱不释手，希望之后能够在我的博客中实现数学公式的编辑，这样会很方便，哈哈</p>

<p>哦了，今天就到这里啦！哈哈哈</p>

<p>晚安，Octopress！</p>
]]></content>
  </entry>
  
</feed>
