<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: algorithm | Hujiawei Bujidao]]></title>
  <link href="http://hujiaweibujidao.github.io/blog/categories/algorithm/atom.xml" rel="self"/>
  <link href="http://hujiaweibujidao.github.io/"/>
  <updated>2014-05-18T19:26:43+08:00</updated>
  <id>http://hujiaweibujidao.github.io/</id>
  <author>
    <name><![CDATA[hujiawei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Algorithms-PageRank]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/12/algorithms-pagerank/"/>
    <updated>2014-05-12T18:12:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/12/algorithms-pagerank</id>
    <content type="html"><![CDATA[<p>PageRank算法</p>

<p>PageRank算法是谷歌曾经独步天下的“倚天剑”，该算法由Larry Page和Sergey Brin在斯坦福大学读研时发明的，<a href="http://ilpubs.stanford.edu:8090/422/1/1999-66.pdf">论文点击下载: The PageRank Citation Ranking: Bringing Order to the Web</a>。</p>

<p>本文首先通过一些参考文献引出问题，然后给出了PageRank的几种实现算法，最后将其推广至在MapReduce框架下如何实现PageRank算法。</p>

<p>PageRank的核心思想有2点：</p>

<p>1.如果一个网页被很多其他网页链接到的话说明这个网页比较重要，也就是pagerank值会相对较高；</p>

<p>2.如果一个pagerank值很高的网页链接到一个其他的网页，那么被链接到的网页的pagerank值会相应地因此而提高。</p>

<p>下面是一张来自<a href="http://en.wikipedia.org/wiki/PageRank">WikiPedia</a>的图，每个球代表一个网页，球的大小反应了网页的pagerank值的大小。指向网页B和网页E的链接很多，所以B和E的pagerank值较高，另外，虽然很少有网页指向C，但是最重要的网页B指向了C，所以C的pagerank值比E还要大。</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/pagerank-fig.png" alt="image" /></p>

<p>参考内容：</p>

<p>1.<a href="http://en.wikipedia.org/wiki/PageRank">Wiki about PageRank</a></p>

<p>2.<a href="http://www.itlearner.com/good/pagerank_cn.htm">Google 的秘密- PageRank 彻底解说 中文版</a></p>

<p>3.<a href="http://book.douban.com/subject/7161824/">数值分析与算法</a> Page 161 应用实例：Google的PageRank算法</p>

<p>4.<a href="http://www.mathworks.cn/moler/chapters.html">Numeric Methods with Matlab</a> 或者<a href="http://book.douban.com/subject/1836464/">中文翻译版本Matlab数值计算</a></p>

<p>5.<a href="http://www.chenjunlu.com/2012/10/pagerank-on-mapreduce/">使用 MapReduce 思想计算 PageRank</a> Page 62 PageRank和马尔可夫链</p>

<h3 id="section">1.问题背景</h3>

<p>来自参考内容3</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/pk-1.png" alt="image" /></p>

<h3 id="section-1">2.数学建模</h3>

<p>来自参考内容3，理解网页连接矩阵$G$，马尔科夫过程(“网上冲浪”)，转移矩阵$A$，概率$p$为用户点击当前网页中的某个链接地址的概率(一般都为0.85)。</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/pk-2.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/algos/pk-3.png" alt="image" /></p>

<p>最后得到一个等式$Ax=x$，这实际上就是求矩阵$A$的特征值为1的特征向量！</p>

<p>下面的内容使用圆盘定理解释了1是矩阵$A$的主特征值，所以我们可以使用幂法来求解。</p>

<p>关于幂法的详细介绍参考另一篇文章<a href="http://hujiaweibujidao.github.io/blog/2014/04/23/numerical-methods-using-matlab/">Numerical Methods Using Matlab: 第三章 矩阵特征值和奇异值求解</a></p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/pk-4.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/algos/pk-5.png" alt="image" /></p>

<!--
![image](http://hujiaweibujidao.github.io/images/algos/pk-6.png)
-->

<h3 id="pagerank">3.求解PageRank</h3>

<p>假设有如上图右侧所示的网页链接模型。</p>

<p>(1) 幂法</p>

<p>wiki上有一个PageRank的简便算法，它不考虑转移概率，而是采用的是迭代的方式，每次都更新所有网页的pagerank值，更新的方式就是将每个网页的pagerank值平摊分给它指向的所有网页，每个网页累计所有指向它的网页平摊给它的值作为它该回合的pagerank值，直到全部网页的pagerank值收敛了或者满足一定的阈值条件就停止。</p>

<p>后面的MapReduce框架下PageRank算法的实现就采用了这个思想。考虑转移概率的情况和这个算法类似，乘上一个转移概率再加上一个随机跳转的概率。</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/pagerank-Simplified-algorithm.png" alt="image" /></p>

<p>根据上面的思想，下面Matlab代码实现可以得到各个网页的PageRank值。</p>

<p>```matlab
n=6;
i=[2 3 4 4 5 6 1 6 1];
j=[1 2 2 3 3 3 4 5 6];
G=sparse(i,j,1,n,n);</p>

<p>% Power method
for j = 1:n
   L{j} = find(G(:,j));
   c(j) = length(L{j});
end</p>

<p>p = .85;
delta = (1-p)/n;
x = ones(n,1)/n;
z = zeros(n,1);
cnt = 0;
while max(abs(x-z)) &gt; .0001
   z = x;
   x = zeros(n,1);
   for j = 1:n
      if c(j) == 0
         x = x + z(j)/n;%转移到任意一个网页
      else
         x(L{j}) = x(L{j}) + z(j)/c(j);%将上次的pagerank值平摊给所有指向的网页
      end
   end
   x = p*x + delta;
   cnt = cnt+1;
end
```
得到的向量$x$保存了各个网页的pagerank值，虽然链接数目一样，但是网页①比网页④和网页⑤都高，而网页②的pagerank值第二高，因为网页①链接到了它上面，相当于沾了网页①的光。</p>

<p><code>
x =
    0.2675
    0.2524
    0.1323
    0.1698
    0.0625
    0.1156
</code></p>

<p><a href="http://www.chenjunlu.com/2012/09/pagerank-algorithm-implemented-in-python/">这篇文章给出该算法的一个Python版本实现</a>，该博主使用第三方模块<a href="https://code.google.com/p/python-graph/">python-graph</a>，python-graph模块实现了很多图算法，<a href="https://code.google.com/p/python-graph/wiki/Example">该模块的使用示例</a>，使用前需要先安装，代码如下：</p>

<p><code>python
easy_install python-graph-core
easy_install python-graph-dot
</code></p>

<p>Python版本的算法实现：</p>

<p>```
# coding=utf-8</p>

<h1 id="python-graph-httpscodegooglecomppython-graph">python-graph https://code.google.com/p/python-graph/</h1>

<h1 id="import-graphviz">Import graphviz</h1>
<p>import graphviz as gv</p>

<h1 id="import-pygraph">Import pygraph</h1>
<p>from pygraph.classes.digraph import digraph
from pygraph.readwrite.dot import write</p>

<h1 id="define-pagerank-function">Define pagerank function</h1>
<p>def pagerank(graph, damping_factor=0.85, max_iterations=100, \
             min_delta=0.00001):
    “””
    Compute and return the PageRank in an directed graph.</p>

<pre><code>@type  graph: digraph
@param graph: Digraph.

@type  damping_factor: number
@param damping_factor: PageRank dumping factor.

@type  max_iterations: number
@param max_iterations: Maximum number of iterations.

@type  min_delta: number
@param min_delta: Smallest variation required for a new iteration.

@rtype:  Dict
@return: Dict containing all the nodes PageRank.
"""

nodes = graph.nodes()
graph_size = len(nodes)
if graph_size == 0:
    return {}
# value for nodes without inbound links
min_value = (1.0-damping_factor)/graph_size

# itialize the page rank dict with 1/N for all nodes
#pagerank = dict.fromkeys(nodes, 1.0/graph_size)
pagerank = dict.fromkeys(nodes, 1.0)

for i in range(max_iterations):
    diff = 0 #total difference compared to last iteraction
    # computes each node PageRank based on inbound links
    for node in nodes:
        rank = min_value
        for referring_page in graph.incidents(node):
            rank += damping_factor * pagerank[referring_page] / \
                    len(graph.neighbors(referring_page))

        diff += abs(pagerank[node] - rank)
        pagerank[node] = rank

    print 'This is NO.%s iteration' % (i+1)
    print pagerank
    print ''

    #stop if PageRank has converged
    if diff &lt; min_delta:
        break

return pagerank
</code></pre>

<h1 id="graph-creation">Graph creation</h1>
<p>gr = digraph()</p>

<h1 id="add-nodes-and-edges">Add nodes and edges</h1>
<p>gr.add_nodes([“1”,”2”,”3”,”4”])</p>

<p>gr.add_edge((“1”,”2”))
gr.add_edge((“1”,”3”))
gr.add_edge((“1”,”4”))
gr.add_edge((“2”,”3”))
gr.add_edge((“2”,”4”))
gr.add_edge((“3”,”4”))
gr.add_edge((“4”,”2”))</p>

<h1 id="draw-as-png">Draw as PNG</h1>
<p># dot = write(gr)
# gvv = gv.readstring(dot)
# gv.layout(gvv,’dot’)
# gv.render(gvv,’png’,’Model.png’)</p>

<p>pagerank(gr)
```</p>

<p>经过32次迭代之后得到的结果如下，和前面的结果一致：</p>

<p><code>
This is NO.32 iteration
{'1': 0.2675338708706491, '3': 0.13227261904986046, '2': 0.2524037902400518, '5': 0.062477242064127136, '4': 0.1697488529161491, '6': 0.1155828978186352}
</code></p>

<p>(2) 利用马尔可夫矩阵的特殊结构</p>

<p>来自参考内容4，其中$\delta=\frac{1-p}{n}$</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/pk-8.png" alt="image" /></p>

<p>也就是将矩阵$A$进行分解，并不需要显示求出矩阵$A$，然后便是求解一个线性方程组即可。</p>

<p>```
function x = pagerank1(G)
% PAGERANK1  Google’s PageRank modified version 1 - hujiawei</p>

<p>%if nargin &lt; 3, p = .85; end
p=0.85;</p>

<p>% Eliminate any self-referential links</p>

<p>G = G - diag(diag(G));</p>

<p>% c = out-degree, r = in-degree</p>

<p>[n,n] = size(G);
c = sum(G,1);%each row’s sum
r = sum(G,2);%each col’s sum</p>

<p>% Scale column sums to be 1 (or 0 where there are no out links).</p>

<p>k = find(c~=0);
D = sparse(k,k,1./c(k),n,n);</p>

<p>% Solve (I - p<em>G</em>D)*x = e</p>

<p>e = ones(n,1);
I = speye(n,n);
x = (I - p<em>G</em>D)\e;</p>

<p>% Normalize so that sum(x) == 1.</p>

<p>x = x/sum(x);
```</p>

<p>(3) 巧妙解法：逆迭代算法</p>

<p>巧妙利用Matlab中的精度误差导致原本是一个奇异矩阵的$I-A$变成一个非奇异矩阵，运行时只是会有些警告提示，但是运行结果和其他算法一样。</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/pk-9.png" alt="image" /></p>

<p>```
function x = pagerank2(G)
% PAGERANK1  Google’s PageRank modified version 2 - hujiawei
% using inverse iteration method</p>

<p>%if nargin &lt; 3, p = .85; end
p=0.85;</p>

<p>% Eliminate any self-referential links</p>

<p>G = G - diag(diag(G));</p>

<p>% c = out-degree, r = in-degree</p>

<p>[n,n] = size(G);
c = sum(G,1);%each row’s sum
r = sum(G,2);%each col’s sum</p>

<p>% Scale column sums to be 1 (or 0 where there are no out links).</p>

<p>k = find(c~=0);
D = sparse(k,k,1./c(k),n,n);</p>

<p>% Solve (I - p<em>G</em>D)*x = e</p>

<p>e = ones(n,1);
I = speye(n,n);
% x = (I - p<em>G</em>D)\e;
delta=(1-p)/n;
A=p<em>G</em>D+delta;
x=(I-A)\e;</p>

<p>% Normalize so that sum(x) == 1.</p>

<p>x = x/sum(x);
```</p>

<p>最后，附上参考内容4中给出的一份好代码，用于模拟随机冲浪生成矩阵$G$的代码</p>

<p>```
function [U,G] = surfer(root,n)
% SURFER  Create the adjacency graph of a portion of the Web.
%    [U,G] = surfer(root,n) starts at the URL root and follows
%    Web links until it forms an adjacency graph with n nodes.
%    U = a cell array of n strings, the URLs of the nodes.
%    G = an n-by-n sparse matrix with G(i,j)=1 if node j is linked to node i.
%
%    Example:  [U,G] = surfer(‘http://www.harvard.edu’,500);
%    See also PAGERANK.
%
%    This function currently has two defects.  (1) The algorithm for
%    finding links is naive.  We just look for the string ‘http:’.
%    (2) An attempt to read from a URL that is accessible, but very slow,
%    might take an unacceptably long time to complete.  In some cases,
%    it may be necessary to have the operating system terminate MATLAB.
%    Key words from such URLs can be added to the skip list in surfer.m.</p>

<p>% Initialize</p>

<p>clf
shg
set(gcf,’doublebuffer’,’on’)
axis([0 n 0 n])
axis square
axis ij
box on
set(gca,’position’,[.12 .20 .78 .78])
uicontrol(‘style’,’frame’,’units’,’normal’,’position’,[.01 .09 .98 .07]);
uicontrol(‘style’,’frame’,’units’,’normal’,’position’,[.01 .01 .98 .07]);
t1 = uicontrol(‘style’,’text’,’units’,’normal’,’position’,[.02 .10 .94 .04], …
   ‘horiz’,’left’);
t2 = uicontrol(‘style’,’text’,’units’,’normal’,’position’,[.02 .02 .94 .04], …
   ‘horiz’,’left’);
slow = uicontrol(‘style’,’toggle’,’units’,’normal’, …
   ‘position’,[.01 .24 .07 .05],’string’,’slow’,’value’,0);
quit = uicontrol(‘style’,’toggle’,’units’,’normal’, …
   ‘position’,[.01 .17 .07 .05],’string’,’quit’,’value’,0);</p>

<p>U = cell(n,1);
hash = zeros(n,1);
G = logical(sparse(n,n));
m = 1;
U{m} = root;
hash(m) = hashfun(root);</p>

<p>j = 1;
while j &lt; n &amp; get(quit,’value’) == 0</p>

<p>% Try to open a page.</p>

<p>try
      set(t1,’string’,sprintf(‘%5d %s’,j,U{j}))
      set(t2,’string’,’’);
      drawnow
      page = urlread(U{j});
   catch
      set(t1,’string’,sprintf(‘fail: %5d %s’,j,U{j}))
      drawnow
      continue
   end
   if get(slow,’value’)
      pause(.25)
   end</p>

<p>% Follow the links from the open page.</p>

<p>for f = findstr(‘http:’,page);</p>

<pre><code>  % A link starts with 'http:' and ends with the next quote.

  e = min([findstr('"',page(f:end)) findstr('''',page(f:end))]);
  if isempty(e), continue, end
  url = deblank(page(f:f+e-2));
  url(url&lt;' ') = '!';   % Nonprintable characters
  if url(end) == '/', url(end) = []; end

  % Look for links that should be skipped.

  skips = {'.gif','.jpg','.pdf','.css','lmscadsi','cybernet', ...
           'search.cgi','.ram','www.w3.org', ...
           'scripts','netscape','shockwave','webex','fansonly'};
  skip = any(url=='!') | any(url=='?');
  k = 0;
  while ~skip &amp; (k &lt; length(skips))
     k = k+1;
     skip = ~isempty(findstr(url,skips{k}));
  end
  if skip
     if isempty(findstr(url,'.gif')) &amp; isempty(findstr(url,'.jpg'))
        set(t2,'string',sprintf('skip: %s',url))
        drawnow
        if get(slow,'value')
           pause(.25)
        end
     end
     continue
  end

  % Check if page is already in url list.

  i = 0;
  for k = find(hash(1:m) == hashfun(url))';
     if isequal(U{k},url)
        i = k;
        break
     end
  end

  % Add a new url to the graph there if are fewer than n.

  if (i == 0) &amp; (m &lt; n)
     m = m+1;
     U{m} = url;
     hash(m) = hashfun(url);
     i = m;
  end

  % Add a new link.

  if i &gt; 0
     G(i,j) = 1;
     set(t2,'string',sprintf('%5d %s',i,url))
     line(j,i,'marker','.','markersize',6)
     drawnow
     if get(slow,'value')
        pause(.25)
     end
  end    end
</code></pre>

<p>j = j+1;
end
delete(t1)
delete(t2)
delete(slow)
set(quit,’string’,’close’,’callback’,’close(gcf)’,’value’,0)</p>

<p>%————————</p>

<p>function h = hashfun(url)
% Almost unique numeric hash code for pages already visited.
h = length(url) + 1024*sum(url);
```</p>

<h3 id="mapreducepagerank">4.MapReduce框架下PageRank算法的实现</h3>

<p>利用前面wiki上的迭代(或者幂法)的思想来实现MapReduce框架下PageRank算法很简单，可以先阅读下参考内容5。</p>

<p>这篇文章<a href="http://michaelnielsen.org/blog/using-mapreduce-to-compute-pagerank/">using-mapreduce-to-compute-pagerank</a>更加详细，可以参考</p>

<p>以下是我的大数据的一次作业，要求是参考wiki上的简便算法，实现MapReduce框架下的PageRank算法。给的数据集是Twitter的用户之间的关系，可以看做是网页之间的关系，但是助教没要求写代码以及运行这个数据集(有1G多)，所以下面只是一个Python版本的理想可行版本，并没有通过实际大数据集的验证，另外，博主暂时还不太会Python的mapreduce框架中的一些函数，所以实现的是一个简明的可以测试的PageRank算法。</p>

<h4 id="section-2">1.输入输出格式</h4>

<p><strong>map函数的输入是&lt;节点，从该节点引出的边列表&gt;，其中节点是一个类，包含了其当前的pagerank值，输出是&lt;节点，反向节点pagerank值/反向节点引出边的总数&gt;；</strong></p>

<p><strong>reduce函数的输入是&lt;节点，反向节点pagerank值/反向节点引出边的总数&gt;，输出是&lt;节点，从该节点引出的边列表&gt;，其中节点包含了其更新后的pagerank值。</strong></p>

<p>伪代码： [一时犯二写了个英文形式的 ]</p>

<p>```
process the data to the form of {node i:[its adjacent node list],…}
while the sum of difference between the last two pagerank values &lt; threshold
	map({node i:[its adjacent node list],…}):
	    map_output={}
	    for every node j in adjacent node list:
	        put or sum up {j:(i, PageRank(i)/length(adjacent node list))} into map_output
	    return map_output</p>

<pre><code>reduce(map_output):
    reduce_output={}
    for every entry {j:(i, PageRank(i)/length(adjacent node list))} in map_output:
        put or sum up all values pagerank values for node j with its adjacent node list into reduce_output
    return reduce_output
</code></pre>

<p>```</p>

<h4 id="section-3">2.示例演示</h4>

<p>假设用户1，2，3，4是如下图所示的关系：</p>

<p><img src="http://hujiaweibujidao.github.io/images/others/pagerankdemo.png" alt="image" /></p>

<p>假设有2个mapper(A和B)和1个reducer(C)，初始时4个节点的pagerank值都是0.25</p>

<p>其中，关于用户1和2的数据被mapperA读取并处理，关于用户3和4的数据被mapperB读取并处理 [经验证，即使一个用户的数据是由不同的mapper来读取的，最终收敛到的结果差不多]</p>

<p>map的输入输出结果如下：</p>

<p><img src="http://hujiaweibujidao.github.io/images/others/mapper.png" alt="image" /></p>

<p>reduce的输入输出结果如下，输入是2个mapper的输出，输出的结果中更新了节点的pagerank值</p>

<p><img src="http://hujiaweibujidao.github.io/images/others/reducer.png" alt="image" /></p>

<p>reducer处理完了之后又将它的结果输入给mapper处理，直到迭代的次数超过了设定值或者两次迭代之后得到的所有节点的pagerank值之差的总和(也可以是取二范数)小于设定的阈值。</p>

<h4 id="section-4">3.示例的实验结果</h4>

<p>(1)首先是使用Matlab采用幂法的方式计算出在p=1.0的情况下示例得到的结果 [它的主要作用是验证后面python版本的正确性]</p>

<p>matlab源码如下：</p>

<p>```
n=4;
i=[2 3 4 3 4 4 1 2];
j=[1 1 1 2 2 3 3 4];
G=sparse(i,j,1,n,n);</p>

<p>[n,n] = size(G);
for j = 1:n
   L{j} = find(G(:,j));
   c(j) = length(L{j});
end</p>

<p>% Power method
p=1.0;
delta = (1-p)/n;
x = ones(n,1)/n;
z = zeros(n,1);
cnt = 0;
while max(abs(x-z)) &gt; .0001
   z = x;
   x = zeros(n,1);
   for j = 1:n
      if c(j) == 0
         x = x + z(j)/n;
      else
         x(L{j}) = x(L{j}) + z(j)/c(j);
      end
   end
   x = p*x + delta;
   cnt = cnt+1;
end
sprintf(‘pagerank result:’)
x
```</p>

<p>结果为：</p>

<p><code>
0.1072
0.3571
0.2143
0.3214
</code></p>

<p>(2)matlab版本的page rank没有采用mapreduce的思想进行迭代，所以我另外写了一个python版本的利用mapreduce思想实现的pagerank算法(注：我并没有使用python的map和reduce函数去实现，而是使用更加容易明白的实现)，使用的阈值为0.0001，最多迭代的次数为100次。</p>

<p>```
# coding=utf-8</p>

<p><strong>author</strong> = ‘hujiawei’
<strong>doc</strong> = ‘pagerank mapreduce’</p>

<p>class Node:
    def <strong>init</strong>(self,id,pk):
        self.id=id
        self.pk=pk</p>

<p>def pk_map(map_input):
    map_output={}
    for node,outlinks in map_input.items():
        for link in outlinks:
            size=len(outlinks)
            if link in map_output:
                map_output[link]+=(float)(node.pk)/size
            else:
                map_output[link]=(float)(node.pk)/size
    return map_output</p>

<p>def pk_reduce(reduce_input):
    for result in reduce_input:
        for node,value in result.items():
            node.pk+=value</p>

<p>def pk_clear(nodes):
    for node in nodes:
        node.pk=0</p>

<p>def pk_last(nodes):
    lastnodes=[]
    for node in nodes:
        lastnodes.append(Node(node.id,node.pk))
    return lastnodes</p>

<p>def pk_diff(nodes,lastnodes):
    diff=0
    for i in range(len(nodes)):
        print(‘node pk %f, last node pk %f ‘ % (nodes[i].pk, lastnodes[i].pk))
        diff+=abs(nodes[i].pk-lastnodes[i].pk)
    return diff</p>

<p>def pk_test1():
    node1 = Node(1, 0.25)
    node2 = Node(2, 0.25)
    node3 = Node(3, 0.25)
    node4 = Node(4, 0.25)
    nodes = [node1, node2, node3, node4]
    threshold = 0.0001
    max_iters = 100</p>

<pre><code>for iter_count in range(max_iters):
    iter_count += 1
    lastnodes=pk_last(nodes)
    print('============ map count %d =================' % (iter_count))
    in1 = {node1: [node2, node3, node4], node2: [node3, node4]}
    in2 = {node3: [node1, node4], node4: [node2]}

    mapout1 = pk_map(in1)
    mapout2 = pk_map(in2)

    for node, value in mapout1.items():
        print str(node.id) + ' ' + str(value)

    for node, value in mapout2.items():
        print str(node.id) + ' ' + str(value)

    print('============ reduce count %d =================' % (iter_count))

    reducein = [mapout1, mapout2]
    pk_clear(nodes)
    pk_reduce(reducein)

    for node in nodes:
        print str(node.id) + ' ' + str(node.pk)

    diff=pk_diff(nodes,lastnodes)
    if diff &lt; threshold:
        break
</code></pre>

<p>if <strong>name</strong> == ‘<strong>main</strong>’:
    pk_test1()
```</p>

<p>得到的结果为如下，总共迭代了15次</p>

<p><code>
1 0.107138774577
2 0.35712924859
3 0.214296601128
4 0.321435375705
</code></p>

<p>上面的结果和Matlab用幂法得到的pagerank值差别很小，可以认为是正确的，所以说明了使用这种mapreduce输入输出格式的正确性。</p>

<p>OK，差不多了，希望对需要理解PageRank算法的人有帮助！ :-) </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ML/DM/PR算法系列]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/12/Algorithms/"/>
    <updated>2014-05-12T11:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/12/Algorithms</id>
    <content type="html"><![CDATA[<p>战线拉得有点长，囫囵吞枣地看了写书写了些代码，时间久了可能就会忘了当时怎么想的，所以，总结是很有必要的一个过程，重新捋一捋思路，重新写写代码，势必对自己的知识储备有很大的好处，不求一语惊人，只求若有所获，本人学识似五柳，不求甚解，但求一二，能够心中有数，胸有成竹地编码且举一反三即可。</p>

<p>此系列因此而生，主要记录些在数据挖掘、机器学习、模式识别等领域的相关算法，算法不求全，但求质量佳，肯定会附上实现的源码，可能是Matlab版本的，也可能是Java或者Python版本的，如果我比较熟悉的算法会结合一个实际的案例进行分析。</p>

<p>嗯，就唠叨这些，慢慢来，持续添加各个算法，需要的敬请期待。</p>

<p>1.<a href="http://hujiaweibujidao.github.io/blog/2014/05/12/algorithms-pagerank/">PageRank算法</a></p>

<p>Todo List  下面是重要的将来会介绍的算法(有几个我还没写过……)</p>

<p>1.Feature/Dimension: PCA,SVD,LDA,ICA,FA…</p>

<p>2.Regression: Linear Regression, Logistic Regression, Tree Regression…</p>

<p>3.Classifier: Bayesian Classifier, Minmum Distance, kNN, EM, Linear Classifier…</p>

<p>4.Clustering: K-Means, Hierarchial Clustering…</p>

<p>5.SVM, Percepton, Nueral Network…</p>

<p>6.Assosiation Analysis: Apriori, FP-Growth…</p>

<p>7.Others: gradient descent, stochastic gradient descent, (Gussian) Mixture Model, Recommendation System, Template Matching…</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Algorithms - Dynamic Programming]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-dynamic-programming/"/>
    <updated>2014-05-08T23:30:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-dynamic-programming</id>
    <content type="html"><![CDATA[<p>参考内容：</p>

<p>1.<a href="http://link.springer.com/book/10.1007%2F978-1-4302-3238-4">Python Algorithms: Mastering Basic Algorithms in the Python Language</a></p>

<p>Chapter 8 Tangled Dependencies and Memoization</p>

<p>2.<a href="http://en.wikipedia.org/wiki/Introduction_to_Algorithms">算法导论</a></p>

<p>3.<a href="http://book.douban.com/subject/4875278/">算法设计、分析与实现从入门到精通</a></p>

<p>大家都知道，动态规划算法一般都有两种实现方式：</p>

<p><strong>1.直接自顶向下实现递归式，并将中间结果保存，这叫备忘录法；</strong></p>

<p><strong>2.将递归式翻转，自底向上地迭代，将结果保存在某个数据结构中。</strong></p>

<p>编程有一个原则<code>DRY=Don’t Repeat Yourself</code>，就是说你的代码不要重复来重复去的，这个原则同样可以用于理解动态规划，动态规划除了满足最优子结构，它还存在子问题重叠的性质，我们不能重复地去解决这些子问题，所以我们将子问题的解保存起来，类似缓存机制，之后遇到这个子问题时直接取出子问题的解。</p>

<p>举个简单的例子，斐波那契数列中的元素的计算，很简单，我们写下如下的代码：</p>

<p><code>python
def fib(i):
    if i&lt;2: return 1
    return fib(i-1)+fib(i-2)
</code></p>

<p>好，来测试下，运行<code>fib(10)</code>得到结果69，不错，速度也还行，换个大的数字，试试100，这时你会发现，这个程序执行不出结果了，为什么？递归太深了！要计算的子问题太多了！</p>

<p>所以，我们需要改进下，我们保存每次计算出来的子问题的解，用什么保存呢？用Python中的dict！那怎么实现保存子问题的解呢？用Python中的装饰器！</p>

<p>如果不是很了解Python的装饰器，可以快速看下<a href="http://hujiaweibujidao.github.io/blog/2014/05/10/python-tips1/">这篇总结中关于装饰器的解释：Python Basics</a></p>

<p>修改刚才的程序，得到如下代码，定义一个函数<code>memo</code>返回我们需要的装饰器，这里用<code>cache</code>保存子问题的解，key是方法的参数，也就是数字<code>n</code>，值就是<code>fib(n)</code>返回的解。</p>

<p>```
from functools import wraps</p>

<p>def memo(func):
    cache={}
    @wraps(func)
    def wrap(<em>args):
        if args not in cache:
            cache[args]=func(</em>args)
        return cache[args]
    return wrap</p>

<p>@memo
def fib(i):
    if i&lt;2: return 1
    return fib(i-1)+fib(i-2)
```
重新运行下<code>fib(100)</code>，你会发现这次很快就得到了结果<code>573147844013817084101</code>，这就是动态规划的威力，上面使用的是第一种带备忘录的递归实现方式。</p>

<p><strong>带备忘录的递归方式的优点就是易于理解，易于实现，代码简洁干净，运行速度也不错，直接从需要求解的问题出发，而且只计算需要求解的子问题，没有多余的计算。但是，它也有自己的缺点，因为是递归形式，所以有限的栈深度是它的硬伤，有些问题难免会出现栈溢出了。</strong></p>

<p>于是，迭代版本的实现方式就诞生了！</p>

<p><strong>迭代实现方式有2个好处：1.运行速度快，因为没有用栈去实现，也避免了栈溢出的情况；2.迭代实现的话可以不使用dict来进行缓存，而是使用其他的特殊cache结构，例如多维数组等更为高效的数据结构。</strong></p>

<p>那怎么把递归版本转变成迭代版本呢？</p>

<p><strong>这就是递归实现和迭代实现的重要区别：递归实现不需要去考虑计算顺序，只要给出问题，然后自顶向下去解就行；而迭代实现需要考虑计算顺序，并且顺序很重要，算法在运行的过程中要保证当前要计算的问题中的子问题的解已经是求解好了的。</strong></p>

<p>斐波那契数列的迭代版本很简单，就是按顺序来计算就行了，不解释，关键是你可以看到我们就用了3个简单变量就求解出来了，没有使用任何高级的数据结构，节省了大量的空间。</p>

<p><code>python
def fib_iter(n):
    if n&lt;2: return 1
    a,b=1,1
    while n&gt;=2:
        c=a+b
        a=b
        b=c
        n=n-1
    return c
</code></p>

<p>斐波那契数列的变种经常出现在上楼梯的走法问题中，每次只能走一个台阶或者两个台阶，广义上思考的话，<strong>动态规划也就是一个连续决策问题，到底当前这一步是选择它(走一步)还是不选择它(走两步)呢?</strong></p>

<p>其他问题也可以很快地变相思考发现它们其实是一样的，例如求二项式系数<code>C(n,k)</code>，杨辉三角(求从源点到目标点有多少种走法)等等问题。</p>

<p>二项式系数<code>C(n,k)</code>表示从n个中选k个，假设我们现在n个中的第1个，考虑是否选择它。如果选择它的话，那么我们还需要从剩下的n-1个中选k-1个，即<code>C(n-1,k-1)</code>；如果不选择它的话，我们需要从剩下的n-1中选k个，即<code>C(n-1,k)</code>。所以，<code>C(n,k)=C(n-1,k-1)+C(n-1,k)</code>。</p>

<p>结合前面的装饰器，我们很快便可以实现求二项式系数的递归实现代码，其中的<code>memo</code>函数完全没变，只是在函数<code>cnk</code>前面添加了<code>@memo</code>而已，就这么简单！</p>

<p>```
from functools import wraps</p>

<p>def memo(func):
    cache={}
    @wraps(func)
    def wrap(<em>args):
        if args not in cache:
            cache[args]=func(</em>args)
        return cache[args]
    return wrap</p>

<p>@memo
def cnk(n,k):
    if k==0: return 1 #the order of <code>if</code> should not change!!!
    if n==0: return 0
    return cnk(n-1,k)+cnk(n-1,k-1)
```</p>

<p>它的迭代版本也比较简单，这里使用了<code>defaultdict</code>，略高级的数据结构，和dict不同的是，当查找的key不存在对应的value时，会返回一个默认的值，这个很有用，下面的代码可以看到。</p>

<p>如果不了解<code>defaultdict</code>的话可以看下<a href="http://blog.jobbole.com/65218/">这篇文章：Python中的高级数据结构</a></p>

<p>```
from collections import defaultdict</p>

<p>n,k=10,7
C=defaultdict(int)
for row in range(n+1):
    C[row,0]=1
    for col in range(1,k+1):
        C[row,col]=C[row-1,col-1]+C[row-1,col]</p>

<p>print(C[n,k]) #120
```</p>

<p>杨辉三角大家都熟悉，在国外这个叫<code>Pascal Triangle</code>，它和二项式系数特别相似，看下图，除了两边的数字之外，里面的任何一个数字都是由它上面相邻的两个元素相加得到，想想<code>C(n,k)=C(n-1,k-1)+C(n-1,k)</code>不也就是这儿含义吗?</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/sanjiao.png" alt="image" /></p>

<p>所以说，顺序对于迭代版本的动态规划实现很重要，下面举个实例，用动态规划解决有向无环图的单源最短路径问题。假设有如下图所示的图，当然，我们看到的是这个有向无环图经过了拓扑排序之后的结果，从a到f的最短路径用灰色标明了。</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/dag_sp.png" alt="image" /></p>

<p>好，怎么实现呢? </p>

<p><strong>我们有两种思考方式：</strong></p>

<p><strong>1.”去哪里?”：我们顺向思维，首先假设从a点出发到所有其他点的距离都是无穷大，然后，按照拓扑排序的顺序，从a点出发，接着更新a点能够到达的其他的点的距离，那么就是b点和f点，b点的距离变成2，f点的距离变成9。因为这个有向无环图是经过了拓扑排序的，所以按照拓扑顺序访问一遍所有的点(到了目标点就可以停止了)就能够得到a点到所有已访问到的点的最短距离，也就是说，当到达哪个点的时候，我们就找到了从a点到该点的最短距离，拓扑排序保证了后面的点不会指向前面的点，所以访问到后面的点时不可能再更新它前面的点的最短距离！这种思维方式的代码实现就是迭代版本。</strong></p>

<p>这里涉及到了拓扑排序，我的博客中还没有讲解，所以下面的代码已经将输入的点进行了拓扑排序，待我更新了图算法那篇文章再来更新这里的代码，谅解。</p>

<p>```
def topsort(W):
    return W</p>

<p>def dag_sp(W, s, t):
    d = {u:float(‘inf’) for u in W} #
    d[s] = 0
    for u in topsort(W):
        if u == t: break
        for v in W[u]:
            d[v] = min(d[v], d[u] + W[u][v])
    return d[t]</p>

<h1 id="section">邻接表</h1>
<p>W={0:{1:2,5:9},1:{2:1,3:2,5:6},2:{3:7},3:{4:2,5:3},4:{5:4},5:{}}
s,t=0,5
print(dag_sp(W,s,t)) #7
```</p>

<p>用图来表示计算过程就是下面所示：</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/dag_sp_iter.png" alt="image" /></p>

<p><strong>2.”从哪里来?”：我们逆向思维，目标是要到f，那从a点经过哪个点到f点会近些呢?只能是求解从a点出发能够到达的那些点哪个距离f点更近，这里a点能够到达b点和f点，f点到f点距离是0，但是a到f点的距离是9，可能不是最近的路，所以还要看b点到f点有多近，看b点到f点有多近就是求解从b点出发能够到达的那些点哪个距离f点更近，所以又绕回来了，也就是递归下去，直到我们能够回答从a点经过哪个点到f点会更近。这种思维方式的代码实现就是递归版本。</strong></p>

<p>这种情况下，不需要输入是经过了拓扑排序的，所以你可以任意修改输入<code>W</code>中节点的顺序，结果都是一样的，而上面采用迭代实现方式必须要是拓扑排序了的，从中你就可以看出迭代版本和递归版本的区别了。</p>

<p>```
from functools import wraps
def memo(func):
    cache={}
    @wraps(func)
    def wrap(<em>args):
        if args not in cache:
            cache[args]=func(</em>args)
            # print(‘cache {0} = {1}’.format(args[0],cache[args]))
        return cache[args]
    return wrap</p>

<p>def rec_dag_sp(W, s, t):
    @memo
    def d(u):
        if u == t: return 0
        return min(W[u][v]+d(v) for v in W[u])
    return d(s)</p>

<h1 id="section-1">邻接表</h1>
<p>W={0:{1:2,5:9},1:{2:1,3:2,5:6},2:{3:7},3:{4:2,5:3},4:{5:4},5:{}}
s,t=0,5
print(rec_dag_sp(W,s,t)) #7
```</p>

<p>用图来表示计算过程就是下面所示：</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/dag_sp_rec.png" alt="image" /></p>

<p>下面是参考内容1对DAG求单源最短路径的动态规划问题的总结，比较难理解，不知道我自己理解得对不对，可以忽视注释，:-)</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/dp_summary.png" alt="image" /></p>

<p>好，我们差不多搞清楚了动态规划的本质以及两种实现方式的优缺点，下面我们来实践下，举最常用的例子：矩阵链乘问题！</p>

<p>矩阵链乘问题的描述如下，就是说要确定一个完全加括号的形式使得需要进行的标量计算数目最少，矩阵$A<em>{i}$的维数为$p</em>{i-1}p_{i}$，如果穷举所有可能形式的话，时间复杂度是指数级的！因为该问题满足最优子结构，并且子问题存在重叠，所以我们要借助动态规划来求解。</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/matrix.png" alt="image" /></p>

<p>我们需要确定一个递归式来将我们要求解的问题表示出来，下面摘自算法导论，介绍地非常详细
<img src="http://hujiaweibujidao.github.io/images/algos/matrix2.png" alt="image" /></p>

<p>最后给出的递归式如下，就是说<strong>我们要去确定任何从第i个矩阵到第j个矩阵组成的矩阵链$A<em>{i…j}$的最优解。如果i和j相等，那么就是一个矩阵，不需要运算；如果i小于j，那么肯定要从它们中间的某个位置分开来，那从哪里分开来呢? 这个我们可以尝试下所有可能的选择，也就是尝试在位置$i \le k &lt; j$进行分开，看看它需要的计算次数，然后我们从这些可能的k中选择使得计算次数最小的那个k进行分开，分开了之后我们的问题就变成了2个小问题，确定矩阵链从i到k即$A</em>{i…k}$和另一个矩阵链从k+1到j即$A_{(k+1)…j}$的最优解。如果我们一开始设置i=1(第一个矩阵)，j=n(最后一个矩阵)，那么，经过上面的递归即可得到我们需要的解。这就是递归的思想！</strong></p>

<script type="math/tex; mode=display">% &lt;![CDATA[

m[i][j]= \left\{ 
  \begin{array}{l l}
    0 & \quad \text{if i=j }\\
    min_{i \le k < j}{m[i][k]+m[k+1][j]+p_{i-1}p_{k}p_{j}} & \quad \text{if i<j}
  \end{array} \right.
 %]]&gt;</script>

<p>根据上面的思想我们很快就可以写出一个递归版本的矩阵链承法的实现代码，输出的结果也没有错，给出的加括号的方式是<code>( ( A1 ( A2 A3 ) ) ( ( A4 A5 ) A6 ) )</code>。[问题的数据是算法导论中的问题的数据，值是<code>30,35,15,5,10,20,25</code>]。</p>

<p>```
def matrixchain_rec(p,i,j):
    if i==j:
        return 0
    for k in range(i,j):
        q=matrixchain_rec(p,i,k)+matrixchain_rec(p,k+1,j)+p[i-1]<em>p[k]</em>p[j]
        if q&lt;m[i][j]:
            m[i][j]=q
            s[i][j]=k
    return m[i][j]</p>

<p>def showmatrixchain(s,i,j):
    if i==j:
        print ‘A%d’%(i),
    else:
        print ‘(‘,
        showmatrixchain(s,i,s[i][j])
        showmatrixchain(s,s[i][j]+1,j)
        print ‘)’,</p>

<p>n=6
p=[30,35,15,5,10,20,25]
m=[[sys.maxint for i in range(n+1)] for j in range(n+1)]
s=[[0 for i in range(n+1)] for j in range(n+1)]
# pprint.pprint(m)
result=matrixchain_rec(p,1,6)
print(result) #15125
showmatrixchain(s,1,6) #( ( A1 ( A2 A3 ) ) ( ( A4 A5 ) A6 ) )
```</p>

<p>上面的代码运行没有问题，但是，它不够完美！为什么呢? 很明显，矩阵链乘问题子问题存在重叠，下面这张图很形象地显示了哪些子问题被重复计算了，所以我们需要改进，改进的方法就是使用带备忘录的递归形式！</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/matrix3.png" alt="image" /></p>

<p>要改成带备忘录的很简单，我们实现过几次了，但是，这次我们不能直接使用原来的装饰器，因为Python中的dict不能对list对象进行hash，所以我们要简单地修改下我们key值的构建，也很简单，看下代码就明白了：</p>

<p>```
from functools import wraps</p>

<p>def memo(func):
    cache={}
    @wraps(func)
    def wrap(<em>args):
        #build new key!!!
        key=str(args[1])+str(args[2])
        if key not in cache:
            cache[key]=func(</em>args)
        return cache[key]
    return wrap</p>

<p>@memo
def matrixchain_rec(p,i,j):
    if i==j:
        return 0
    for k in range(i,j):
        q=matrixchain_rec(p,i,k)+matrixchain_rec(p,k+1,j)+p[i-1]<em>p[k]</em>p[j]
        if q&lt;m[i][j]:
            m[i][j]=q
            s[i][j]=k
    return m[i][j]</p>

<p>def showmatrixchain(s,i,j):
    if i==j:
        print ‘A%d’%(i),
    else:
        print ‘(‘,
        showmatrixchain(s,i,s[i][j])
        showmatrixchain(s,s[i][j]+1,j)
        print ‘)’,</p>

<p>n=6
p=[30,35,15,5,10,20,25]
m=[[sys.maxint for i in range(n+1)] for j in range(n+1)]
s=[[0 for i in range(n+1)] for j in range(n+1)]
# pprint.pprint(m)
result=matrixchain_rec(p,1,6)
print(result) #15125
showmatrixchain(s,1,6) #( ( A1 ( A2 A3 ) ) ( ( A4 A5 ) A6 ) )
```</p>

<p><strong>接下来的一个问题是，我们怎么实现迭代版本呢? 迭代版本关键在于顺序！我们怎么保证我们在计算$A<em>{i…j}$的最优解时，所有可能的k的选择需要求解的子问题$A</em>{i…k}$以及$A_{(k+1)…j}$是已经求解出来了的呢? 一个简单但是有效的想法就是看矩阵链的长度，我们先计算矩阵链短的最优解，然后再计算矩阵链长的最优解，后者计算时所需要求解的子问题肯定已经求解完了，对不对? 于是就有了迭代版本的实现，需要注意的就是其中的i,j,k的取值范围。</strong></p>

<p>```
import sys
def matrixchain_iter(p):
    n=len(p)-1 #total n matrices 6
    #to solve the problem below, so initialize to n+1!!!
    m=[[0 for i in range(n+1)] for j in range(n+1)]
    s=[[0 for i in range(n+1)] for j in range(n+1)]
    # for i in range(n): #for matrix with len=1
        # m[i][i]=0
    # pprint.pprint(m)
    for l in range(2,n+1): #iterate the length, max is n
        for i in range(1,n-l+2): #i max is n-l+1
            j=i+l-1 #j is always l away from i
            m[i][j]=sys.maxint #initial to infinity
            for k in range(i,j):
                #attention to python array when index &lt; 0!!!
                #solution is using more space with useless values
                q=m[i][k]+m[k+1][j]+p[i-1]<em>p[k]</em>p[j]
                if q&lt;m[i][j]:
                    m[i][j]=q
                    s[i][j]=k
        # print(‘when len is %d ‘ % (l))
        # pprint.pprint(m)
    return m,s</p>

<p>print(‘’)
m,s=matrixchain_iter(p)
print(m[1][6]) #15125
showmatrixchain(s,1,6) #( ( A1 ( A2 A3 ) ) ( ( A4 A5 ) A6 ) )
```
实现的时候需要注意一点，在Python中取list中的值时，如果索引是负值的话会从后面往前数返回对应的元素，而以前我们用其他语言的时候肯定是提示越界了，所以代码中用来存储结果的数数组是(n+1)x(n+1)，而不是nxn的，这样的话就能够保证返回的是0，而不是从后往前数得到的结果。</p>

<p>得到的数组<code>m</code>如下，<code>m[1,6]</code>就是我们需要的解。</p>

<p><code>
[[0, 0, 0, 0, 0, 0, 0],
 [0, 0, 15750, 7875, 9375, 11875, 15125],
 [0, 0, 0, 2625, 4375, 7125, 10500],
 [0, 0, 0, 0, 750, 2500, 5375],
 [0, 0, 0, 0, 0, 1000, 3500],
 [0, 0, 0, 0, 0, 0, 5000],
 [0, 0, 0, 0, 0, 0, 0]]
</code></p>

<p>数组<code>s</code>如下：</p>

<p><code>
[[0, 0, 0, 0, 0, 0, 0],
 [0, 0, 1, 1, 3, 3, 3],
 [0, 0, 0, 2, 3, 3, 3],
 [0, 0, 0, 0, 3, 3, 3],
 [0, 0, 0, 0, 0, 4, 5],
 [0, 0, 0, 0, 0, 0, 5],
 [0, 0, 0, 0, 0, 0, 0]]
</code></p>

<p>将这个两个数组旋转下，并且只看上三角部分的数字，就可以得到算法导论中给出的那张三角图形了，非常类似杨辉三角</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/matrixmulti.png" alt="image" /></p>

<p>OK，希望我把动态规划将清楚了，总结下：<strong>动态规划其实就是一个连续决策的过程，每次决策我们可能有多种选择(二项式系数和0-1背包问题中我们只有两个选择，DAG图的单源最短路径中我们的选择要看点的出边或者入边，矩阵链乘问题中就是矩阵链可以分开的位置总数…)，我们每次选择最好的那个作为我们的决策。动态规划有2中实现方式，一种是带备忘录的递归形式，这种方式直接从原问题出发，遇到子问题就去求解子问题并存储子问题的解，下次遇到的时候直接取出来，问题求解的过程看起来就像是先自顶向下地展开问题，然后自下而上的进行决策。另一个实现方式是迭代方式，这种方式需要考虑如何给定一个子问题的求解方式，使得后面求解规模较大的问题是需要求解的子问题都已经求解好了，它的缺点就是可能有些子问题不要算但是它还是算了，而递归实现方式只会计算它需要求解的子问题。</strong></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Algorithms - Greedy]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-greedy/"/>
    <updated>2014-05-08T23:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-greedy</id>
    <content type="html"><![CDATA[<p>参考内容：</p>

<p>1.<a href="http://link.springer.com/book/10.1007%2F978-1-4302-3238-4">Python Algorithms: Mastering Basic Algorithms in the Python Language</a></p>

<p>2.<a href="http://en.wikipedia.org/wiki/Introduction_to_Algorithms">算法导论</a></p>

<p>Todo</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Algorithms - Graphs]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-Graphs/"/>
    <updated>2014-05-08T22:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-Graphs</id>
    <content type="html"><![CDATA[<p>参考内容：</p>

<p>1.<a href="http://interactivepython.org/courselib/static/pythonds/index.html">Problem Solving with Python</a></p>

<p>Chapter 7 Graphs</p>

<p>2.<a href="http://link.springer.com/book/10.1007%2F978-1-4302-3238-4">Python Algorithms: Mastering Basic Algorithms in the Python Language</a></p>

<p>Matchings, Cuts, and Flows</p>

<p>3.<a href="http://en.wikipedia.org/wiki/Introduction_to_Algorithms">算法导论</a></p>

<h4 id="section">图的总结</h4>

<p>Todo List</p>

<p>1.邻接矩阵和邻接表</p>

<p>2.DFS和BFS</p>

<p>3.DFS的应用：拓扑排序和有向无环图的强连通分量</p>

<p>4.最短路径：Dijkstra，Bellman-Ford，Floyd-Warshall等</p>

<p>5.最小生成树：Prim，Kruskal</p>

<p>6.网络流：最大流，最小割，二分图等</p>

]]></content>
  </entry>
  
</feed>
