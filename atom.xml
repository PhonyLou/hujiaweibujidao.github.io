<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hujiawei Bujidao]]></title>
  <link href="http://hujiaweibujidao.github.io/atom.xml" rel="self"/>
  <link href="http://hujiaweibujidao.github.io/"/>
  <updated>2014-06-22T11:18:35+08:00</updated>
  <id>http://hujiaweibujidao.github.io/</id>
  <author>
    <name><![CDATA[hujiawei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Thanks to 360 CDN]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/06/22/thanks-to-360-cdn/"/>
    <updated>2014-06-22T10:40:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/06/22/thanks-to-360-cdn</id>
    <content type="html"><![CDATA[<p>由于众所周知的原因，最近各种网站(以Google、Dropbox为首)都纷纷被墙，作为码农，简直要了俺们的命根子啊，没办法生在天朝也就只能发发牢骚而已，可是，最令人无奈的是Github也时常被拒之于墙外，这可让我这个把个人博客搭在Github上的小屌丝更是吓得心惊胆战，难道真的是要闭关锁国的节奏吗？</p>

<p>有人说的对，一开始不知道为什么Evernote在中国国内要另搞一个印象笔记，现在想想这招真是太聪明了，Dropbox要学着点了，但即使是学过来了，面对国内各种免费送N个T云空间的网盘你的竞争优势有多大呢？</p>

<p>OK，不发牢骚了，因为Google被墙的厉害，而且博客中不少使用了Google API(js库和字体库)，导致博客前段时间访问速度特别慢，所以考完我就来整理整理下，这里要感谢<a href="http://libs.useso.com/">360网站卫士提供的常用前端公共库CDN服务</a>，你们总是能够推出关乎码农们痛痒的东西，永远支持你们！</p>

<p>主要修改下面两处即可：</p>

<p>文件： <code>source/_includes</code>目录下的<code>head.html</code>，修改如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;!--
</span><span class="line">&lt;script src="http://hujiaweibujidao.github.io//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"&gt;&lt;/script&gt;
</span><span class="line">--&gt;
</span><span class="line">&lt;script type='text/javascript' src='http://ajax.useso.com/ajax/libs/jquery/1.7.2/jquery.min.js?ver=3.4.2'&gt;&lt;/script&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>文件： <code>source/_includes</code>目录下的<code>header.html</code>，修改如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;!-- 注释掉下面的js --&gt;
</span><span class="line">&lt;!--
</span><span class="line">&lt;script src="http://hujiaweibujidao.github.io//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"&gt;&lt;/script&gt;
</span><span class="line">--&gt;
</span><span class="line">&lt;!-- 添加下面的js --&gt;
</span><span class="line">&lt;script type='text/javascript' src='http://ajax.useso.com/ajax/libs/jquery/1.7.2/jquery.min.js?ver=3.4.2'&gt;&lt;/script&gt;
</span><span class="line">&lt;!-- 省略部分代码 --&gt;
</span><span class="line">&lt;!-- 我没有使用Google analytics，所以注释下面一行代码 --&gt;
</span><span class="line">&lt;!--
</span><span class="line">

</span><span class="line">--&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>文件： <code>source/_includes/custom</code>目录下的<code>head.html</code>，修改如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;!-- 注释掉下面的css --&gt;
</span><span class="line">&lt;!--Fonts from Google"s Web font directory at http://google.com/webfonts --&gt;
</span><span class="line">&lt;!--
</span><span class="line">&lt;link href="http://fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css"&gt;
</span><span class="line">&lt;link href="http://fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css"&gt;
</span><span class="line">--&gt;
</span><span class="line">&lt;!-- 添加下面的css --&gt;
</span><span class="line">&lt;link href="http://fonts.useso.com/css?family=PT+Serif:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css"&gt;
</span><span class="line">&lt;link href="http://fonts.useso.com/css?family=PT+Sans:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css"&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>OK，大功告成，更新文件，重新打开，你会瞬间感觉世界又重新美好了！</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/06/22/thanks-to-360-cdn/">http://hujiaweibujidao.github.io/blog/2014/06/22/thanks-to-360-cdn/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dog Face Recognition]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/06/09/Dog-Face-Recognition/"/>
    <updated>2014-06-09T21:30:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/06/09/Dog-Face-Recognition</id>
    <content type="html"><![CDATA[<h3 id="center-center"><center>模式识别大作业-狗脸识别</center></h3>
<center> 胡家威 计研135班 2013210902 </center>

<h4 id="section">1. 题目要求</h4>

<h5 id="pca">(1)PCA狗脸识别</h5>

<p>采用PCA狗脸识别的方法完成下面的实验。图像特征可以采用灰度像素值、颜色直方图等。</p>

<p>1.用每个品种的一半数据做训练,另一半数据做测试(可以前40张图像作为训练，后40张图像作为测试)。采用K近邻分类(必做:K=1，选做:K=3,5)，分析选取不同的主分量个数，对识别率和虚警率的影响。</p>

<p>2.评价该方法的性能</p>

<p>3.计算每个品种的正确识别率</p>

<p>4.进行开集测试(见题目要求3)</p>

<h5 id="fisher">(2)Fisher狗脸识别</h5>

<p>采用线性判别准则的方法进行实验。</p>

<p>1.用每个品种的一半数据做训练，另一半数据做测试(可以前40张图像作为训练，后40张图像作为测试)。给出用fisherface方法得到的识别率。</p>

<p>2.同PCA一样，评价该方法的性能 </p>

<p>3.进行开集测试(见题目要求3)</p>

<p>4.比较这两个方法的优缺点</p>

<h5 id="section-1">(3)开集测试</h5>

<p>图像数据中还有80张负样本(neg，猫脸)，即非狗脸图像。此时需要给出一个合理的拒识方式来判断 某张图像是否属于训练的10个品种。请设计一个合理的拒识方式(最简单的方式是对测试图像到训练 图像的最近距离设定一个阈值)并对400张狗脸测试图像和80张猫脸测试图像进行识别(11个类别，最后一个为neg类)，观察阈值不同时对识别结果的影响。</p>

<h5 id="section-2">(4)选作部分</h5>

<p>1.(选做)根据上面的评价比较，给出改善，并且对新方法再进行评价</p>

<p>2.可以采用更加复杂的特征如HOG，BOW特征，也可以在分类方法上采用别的方式(如SVM、层级式分类)而不是K邻分类。鼓励同学们创新。</p>

<p>3.需要有曲线，表格和测试数据的说明</p>

<h4 id="section-3">2.实验内容</h4>

<p>实验总体介绍：本次实验我共尝试使用了三种不同的图像特征进行比较：(1)灰度像素值； (2)LBP特征； (3)HOG特征。每一种图像特征又结合下面四种算法：(1)PCA； (2)Fisher； (3)SVM； (4)HOSVD 来进行分类，并且采用了开集测试和10折交叉验证的方式分析算法的正确率。下面是实验的分析过程和分析结果</p>

<h5 id="section-4">2.1 特征选择和提取</h5>

<p>下图显示了要识别的10个品种的狗，每个品种的狗只选择了其中一张图像，下文中提到的狗的品种编号按照下图中从左到右从上到下的方式进行索引。</p>

<p><img src="http://hujiaweibujidao.github.io/images/ml/gallery_dog_exp.jpg" alt="image" /></p>

<p>下图显示了实验使用的三种特征，从左到右分别是原图(第一条狗的第71张图像)以及它对应的灰度图、LBP特征图、HOG特征图，得到的数据分别存储在数据结构gray,lbp和hog中，然后保存为mat格式的文件，因为数据量比较大，每次重新提取会耗费大量时间，所以采用先保存在需要的时候再进行加载的方式。对于一张大小为144x144的图像，灰度像素特征共有144x144个；LBP特征采用的半径是1，取8个领域，所以特征共有142x142个；HOG特征采用的cell的大小为9，所以特征共有9x9=81个。</p>

<p><img src="http://hujiaweibujidao.github.io/images/ml/dog_4imgs.png" alt="image" /></p>

<h5 id="section-5">2.2 特征值和特征脸的观察</h5>

<p>下图显示了对所有灰度图像的特征值进行分析得到的结果，左图显示了各个特征值在总特征值之和中所占的比例，很明显只有前面几个特征值具有较高的比例，后面的特征基本上都是冗余的；右图显示了特征值的累计之和在总特征值之和中所占的比例，通过观察也不难发现前面一些特征的累加便可达到90%以上的比例。</p>

<p><img src="http://hujiaweibujidao.github.io/images/ml/eigen.png" alt="image" /></p>

<p>假设保证使用90%作为选择主成分数目的阈值标准，那么对于灰度像素特征，通过计算得到共需要前95个特征。对于LBP特征和HOG特征同样可以进行上面的分析，下面是HOG特征的结果，因为总共只有81个特征，所以计算很快，但是要达到90%以上的比例需要29个特征。另外，LBP特征因为它的特殊性，它需要649个特征才能达到90%以上的比例。</p>

<p><img src="http://hujiaweibujidao.github.io/images/ml/eigen_hog.png" alt="image" /></p>

<p>下图显示了灰度特征下得到的狗的前16个特征脸，为了增强可视性，我使用了方法<code>colormap(jet(256))</code>提高显示效果。从结果中可以看出，第一个特征脸就很像一只小狗，其他的特征脸因为抓住的是狗脸的其他特征所以只是隐隐约约可见狗脸的轮廓。</p>

<p><img src="http://hujiaweibujidao.github.io/images/ml/eigenface_gray.png" alt="image" /></p>

<p>同样的，也可以查看下LBP特征下的特征脸，下面是前16个特征脸的显示结果，从结果中可以看出，LBP很好地抓住了狗脸部眼睛和鼻子的特征。</p>

<p><img src="http://hujiaweibujidao.github.io/images/ml/eigenface_lbp.png" alt="image" /></p>

<h5 id="section-6">2.3 性能测试方式选择</h5>

<p>本次实验尝试了两种性能评价方法，一种是题目要求的取前40张图像作为训练，取后40张图像作为测试；另一种是常用的10折交叉验证的方法，每次从每个品种中选择8张(80/10=8)图像作为测试，其他的72张图像作为训练。例如，对于HOG特征，采用PCA和K近邻算法结合的狗脸识别得到的结果如下，可以看出一般开集测试的准确率都低于它对应的正样本测试得到的准确率，此外，采用交叉验证得到的准确率也要略高于第一种性能测试方式。另外，从理论上来说，交叉验证的性能评价方式更加科学，结果准确性更高，所以后面的结果大部分都采用交叉验证的性能测试方式，只是对于SVM和HOSVD这类复杂的运行时间长的算法采用第一种性能测试方式。</p>

<p><img src="http://hujiaweibujidao.github.io/images/ml/hog_pca_k.png" alt="image" /></p>

<h5 id="section-7">2.4 开集测试的阈值选择</h5>

<p>上面的结果使用的阈值是负样本中的采用欧式距离度量情况下得到的最大距离M和最小距离m的平均值(M+m)/2，实验过程中我只尝试了两种不同的阈值比较，一个是使用最大距离M(使用最小距离m的话效果非常差，不作为比较之中)；另一种便是使用均值(M+m)/2。下面是使用HOG特征在PCA和最近邻算法下得到的结果，左图是使用均值的情况，右图是使用最大距离的情况。两者的准确率分别是58.09%和62.05%，最大距离稍微高些，但是仔细观察最后一行和最后一列，对于使用均值距离容易出现很多狗被认为不是狗，对于最大距离容易出现很多猫被认为是狗！相比较而言，我认为后者的风险更大，所以我采用的阈值是均值。</p>

<p><img src="http://hujiaweibujidao.github.io/images/ml/cv_threshold.png" alt="image" /></p>

<h5 id="pca-1">2.5 PCA狗脸识别</h5>

<p>如果使用PCA以及K近邻算法进行狗脸识别，采用10折交叉验证方法对测试算法性能，对于不同的图像特征和K的取值得到下面的结果。从结果中可以看出，HOG特征的结果最优(平均都在60%以上)，其次是灰度像素特征(稳定在50%左右)，表现最差的是LBP特征(不超过30%)；在运行速度方面，HOG特征的运行速度最快，灰度像素特征和LBP特征的运行速度都比较慢。此外，对于不同的k近邻，HOG特征的结果差别不大，相当稳定；灰度像素特征受影响比较大，因为样本中图像的灰度差别比较大，同一个品种的狗的图像的灰度差别也比较大，甚至有些品种的狗本身就存在多种肤色的情况。[结果<code>A/B</code>分别表示对应的正样本测试和开集测试下的准确率，下同]</p>

<p><img src="http://hujiaweibujidao.github.io/images/ml/pca_k.png" alt="image" /></p>

<p>下图是对于灰度像素特征得到的性能图，左边是正样本测试的结果，右边是开集测试的结果。从图中可以看出，判断错误的情况还是比较多的，尤其是比较多的错判为2和5两个品种的狗，这两个品种的狗都是褐色的，在狗的颜色当中比较具有代表性。</p>

<p><img src="http://hujiaweibujidao.github.io/images/ml/gray_cv.png" alt="image" /></p>

<p>下图是对于LBP特征得到的性能图，左边是正样本测试的结果，右边是开集测试的结果。从图中可以看出，很多狗都被错误地判断为1、5和10三个品种的狗，观察发现这三种狗的脸部形状、眼睛和鼻子的分布在狗当中比较具有代表性。</p>

<p><img src="http://hujiaweibujidao.github.io/images/ml/lbp_cv.png" alt="image" /></p>

<p>下图是对于HOG特征得到的性能图，左边是正样本测试的结果，右边是开集测试的结果。从图中可以看出，后面4个品种的狗的脸部相似性比较高，观察发现这四种狗的毛发比较多，因为导致它们的HOG特征相似性比其他品种的狗要高一些。</p>

<p><img src="http://hujiaweibujidao.github.io/images/ml/hog_cv.png" alt="image" /></p>

<p>下图是HOG特征在k=1的情况得到的各个品种的狗的识别准确率 [准确率比较容易得到，下面就不显示该类结果了]</p>

<p><img src="http://hujiaweibujidao.github.io/images/ml/precision.png" alt="image" /></p>

<h5 id="fisher-1">2.6 Fisher狗脸识别</h5>

<p>如果使用LDA以及K近邻算法进行狗脸识别，采用10折交叉验证方法对测试算法性能，对于不同的图像特征和K的取值得到下面的结果。HOG特征只有81个，数目小于N-C=((720-80)-10)=630，所以不能使用。从结果中可以看出，使用Fisher识别算法采用LBP特征比灰度像素特征更好些，在运行速度方面，两者的的运行速度差不多，但都比较慢。此外，对于不同的k近邻，灰度像素特征此时受影响程度不大，LBP特征受影响程度也不大。</p>

<p><img src="http://hujiaweibujidao.github.io/images/ml/lda_k.png" alt="image" /></p>

<p>下图是对于灰度像素特征得到的性能图，左边是正样本测试的结果，右边是开集测试的结果。从图中可以看出，判断错误的情况基本上都是错判为品种5的狗，原因可能是品种5的狗在狗中是最为常见最为标准的样子。</p>

<p><img src="http://hujiaweibujidao.github.io/images/ml/gray_lda_cv.png" alt="image" /></p>

<p>下图是对于LBP特征得到的性能图，左边是正样本测试的结果，右边是开集测试的结果。从图中可以看出，LBP特征在Fisher识别中的效果比PCA识别中的效果好很多，而且，通过右图可知拒识率相当高，也就是说虽然使用Fisher识别比PCA识别准确率高了不少，但是虚警率同样高了很多。</p>

<p><img src="http://hujiaweibujidao.github.io/images/ml/lbp_lda_cv.png" alt="image" /></p>

<!--
下图是对于HOG特征得到的性能图，左边是正样本测试的结果，右边是开集测试的结果。从图中可以看出，后面4个品种的狗的脸部相似性比较高，观察发现这四种狗的毛发比较多，因为导致它们的HOG特征相似性比其他品种的狗要高一些。

![image](/images/ml/hog_lda_cv.png)
-->

<p>下图是灰度像素特征下得到的Fisher脸，下图的结果不容易看出的结果，部分图像隐约可见某个品种的狗脸轮廓，其中包括了狗的眼睛和鼻子。</p>

<p><img src="http://hujiaweibujidao.github.io/images/ml/fisher_faces.png" alt="image" /></p>

<p><strong>与PCA狗脸识别对比</strong>：PCA识别的优点是速度快，Fisher略微慢些；在PCA中LBP特征准确率非常差，但是在Fisher中LBP特征的结果相当不错，超过了灰度像素特征；对于灰度像素特征，Fisher识别的准确率要比PCA识别的准确率要高，但两者将狗识别为非狗的情况都特别多；运行时间方面，两者的运行时间差不多。</p>

<h5 id="svm">2.7 SVM算法狗脸识别</h5>

<p>实验的过程中我分别测试了线性(linear)、多项式(polynomial)和径向基(RBF)三种不同核函数的SVM算法，经过测试之后我将参数C统一设置为20，以下是不同特征和核函数得到的结果。此外，因为SVM算法的训练需要比较长的时间，所以这里就不采用交叉验证的方式，而是采用第一种性能测试方式(一半训练另一半测试)。很明显，不同情况下的结果差别很大，例如，对于HOG特征，在线性SVM中得到的结果最好，接近90%，但是对于多项式和径向基核函数只能得到10%的准确率，这也说明了线性SVM虽然是最简单的SVM，但是在特定情况下没准是性能最好的SVM。 [尚不清楚三种特征在多项式核函数和径向基核函数的情况下都是10%的原因，不排除是不合适的参数造成]</p>

<p><img src="http://hujiaweibujidao.github.io/images/ml/svm.png" alt="image" /></p>

<h5 id="hosvd">2.8 HOSVD算法狗脸识别</h5>

<p>为了做进一步扩展，我选择了HOSVD算法，即高维奇异值分解算法来和其他算法的性能进行对比。HOSVD算法是SVD算法在高维空间的扩展，在人脸识别领域使用的也比较多，相关知识参考书籍《Matrix Methods in Data Mining and Pattern Recognition》。</p>

<p>PCA算法虽然实现上比较简单,但是在不同的环境(例如光照条件)和不同的人物表情下识别率比较低，所以后来就演变出了“张量脸”算法，即HOSVD算法，它基于下图所示的张量的Tuker分解。简言之，就是将狗脸图像的某种特征视为一个列向量，将同一个品种的狗的不同图像(视为狗的不同的表情)对应的列向量组合成一个矩阵，然后将不同品种的狗对应的矩阵组合成如下图所示的张量x。HOSVD算法就是对张量x进行分解，得到一个核心张量和几个其他正交阵，更加详细的讲解参考上面书籍。</p>

<p><img src="http://hujiaweibujidao.github.io/images/ml/tensor_turker.png" alt="image" /></p>

<p>与PCA类似，它也需要给定一个主成分的参数，如果张量的维数太大的话计算机训练一个HOSVD的模型需要比较长的时间，所以，为了保证HOSVD算法能够在一定的时间内给出结果，它的输入图像不是原始的大小，而是缩小为72x72，在这样的情况下完成灰度像素特征下的HOSVD分解大概需要8分钟。考虑到运行时间过长，所以此时也改用第一种性能测试方式(一半训练另一半测试)。下面是不同的特征和k值得到的HOSVD算法的结果 [画线处表示结果未计算，可以看出其结果并不是最优的]</p>

<p><img src="http://hujiaweibujidao.github.io/images/ml/hosvd.png" alt="image" /></p>

<h4 id="section-8">3 实验总结</h4>

<p>本实验从特征的选择和提取开始，一步步经过特征值的分析以及对于性能评估方法和开集测试的阈值的选择，然后依次使用PCA识别、Fisher识别、SVM算法和HOSVD算法进行识别，分析算法的结果及其性能。通过对比各种算法的平均情况下的最好的结果，得到如下结果。从对比中可以看出，平均情况下表现最好的是SVM算法，而且是在HOG特征以及线性核函数的情况下表现最优；对于PCA识别，采用HOG特征最佳；对于Fisher识别，采用LBP特征最佳；而HOSVD算法需要的时间比SVM算法还多，但是性能并没有进一步提升，所以并不是该类问题的很好解决方案。</p>

<p><img src="http://hujiaweibujidao.github.io/images/ml/all.png" alt="image" /></p>

<p><strong>实验评价</strong>：</p>

<p>(1)本实验的最大亮点在于很好地对多个特征在多个不同算法上的结果进行分析和比较，而且大胆尝试了SVM算法和HOSVD算法，但是由于对这两个略微复杂的算法的理解能力不足，没能更好地解释得到的实验结果(例如多项式和径向基核函数会得到很低的准确率的原因)，也没能进一步通过调整参数使得这两个算法的性能进一步提升；</p>

<p>(2)实验过程中有效地结合使用两种性能测试方式缩短了实验时间(SVM和HOSVD算法使用一半训练另一半测试的方式)，但是在对算法的性能进行比较的时候没能详细地比较具体的运行时间；</p>

<p>(3)实验过程中的分析还算是比较清晰，按照一定的逻辑不断调整策略，但是在一些阈值的选择(例如开集测试的距离阈值)、参数的选择(SVM算法的核函数的参数)方面感觉没有方向性，不能按照一定的思路朝着更好的结果进行。另外，由于缺乏数字图像处理的能力，没能对图像进行一些预处理操作，例如截取狗脸的核心区域不但可以减少特征数目，而且肯定能够提高算法的准确率。</p>

<h4 id="section-9">参考资料：</h4>

<p>1.Pattern Recognition. Sergios Theodoridis</p>

<p>2.Introduction to Pattern Recognition: A Matlab Approach. Sergios Theodoridis</p>

<p>3.Matrix Methods in Data Mining and Pattern Recognition. Lars Eldén</p>

<p>4.Blog of Bytefish: <a href="http://bytefish.de/blog">http://bytefish.de/blog</a></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/06/09/Dog-Face-Recognition/">http://hujiaweibujidao.github.io/blog/2014/06/09/Dog-Face-Recognition/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSU beautiful scenery]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/20/csu-beautiful-scenery/"/>
    <updated>2014-05-20T09:11:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/20/csu-beautiful-scenery</id>
    <content type="html"><![CDATA[<p>在CSU经历了四年的青春，感谢母校的培养，感谢曾经一起欢笑的小伙伴们，想你们！</p>

<p><img src="http://hujiaweibujidao.github.io/images/pics/csupictures-004.jpg" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/pics/csupictures-005.jpg" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/pics/csupictures-006.jpg" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/pics/csupictures-007.jpg" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/pics/csupictures-008.jpg" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/pics/csupictures-010.jpg" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/pics/csupictures-011.jpg" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/pics/csupictures-012.jpg" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/pics/csupictures-013.jpg" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/pics/csupictures-018.jpg" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/pics/csupictures-029.jpg" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/pics/csupictures-017.jpg" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/pics/csupictures-022.jpg" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/pics/csupictures-023.jpg" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/pics/csupictures-025.jpg" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/pics/csupictures-026.jpg" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/pics/csupictures-032.jpg" alt="image" /></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/20/csu-beautiful-scenery/">http://hujiaweibujidao.github.io/blog/2014/05/20/csu-beautiful-scenery/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SS 4-Hypothesis Testing]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-4/"/>
    <updated>2014-05-19T23:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-4</id>
    <content type="html"><![CDATA[<p><strong><center>统计学那些事 Things of Statistics</center></strong>
<strong><center>逸夫图书馆, 2014/5/19</center></strong></p>

<hr />

<h4 id="center-center"><center>第四部分 假设检验</center></h4>

<p>1.假设：一般假设就是一个“猜想”，它表述问题的一般陈述。假设检验是用于样本，然后才将结论一般化推广到总体中。</p>

<p>2.零假设(null hypothesis=$H_{0}$，或叫原假设)：它一般表示“正在研究的两个变量无关或者没有差异”这样的命题。例如，三年级学生的记忆力考试成绩与四年级学生记忆力考试成绩之间没有差异。</p>

<p><strong>(1)零假设是研究的起点，因为在没有信息的情况下，零假设就被看作是可以接受的真实状态。在这种假设下，我们认为观测到的效应是由偶然因素造成的。</strong></p>

<p><strong>(2)零假设也是研究的基准，也就是说在零假设成立的情况下，计算统计量，然后进行假设检验。这就类似反证法的思想。</strong></p>

<p>3.研究假设(research hypothesis=alternate hypothesis，或叫备择假设)：与零假设相对立的，认为变量之间有关系的假设。</p>

<p>研究假设分为有方向和无方向两种研究假设。无方向研究假设命题例子：三年级学生的记忆力考试成绩与四年级学生记忆力考试成绩之间有差异。有方向研究假设命题例子：三年级学生的记忆力考试成绩低于四年级学生记忆力考试成绩。</p>

<p>讨论有无方向的另一种形式是讨论单尾检验(one-tailed test)和双尾检验(two-tailed test)。</p>

<p><strong>零假设与研究假设的区别：</strong></p>

<p><strong>(1)零假设表示两个变量没有差异或者没有关系，研究假设表示它们有关系或者有差异；</strong></p>

<p><strong>(2)零假设对应的是总体，而研究假设对应的是样本。我们是从总体中取出一部分样本进行检验，将得到的结论推广到总体中。</strong></p>

<p><strong>(3)因为总体不能直接检验(不现实，不经济或者不可能)，所以零假设只能间接检验，研究假设则可以直接检验。</strong></p>

<p>[To be Continued…]</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-4/">http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-4/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SS 3-Multiple Random Variables and its Distribution]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-2-2/"/>
    <updated>2014-05-19T20:40:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-2-2</id>
    <content type="html"><![CDATA[<p><strong><center>统计学那些事 Things of Statistics</center></strong>
<strong><center>逸夫图书馆, 2014/5/19</center></strong></p>

<hr />

<h4 id="center-center"><center>第三部分 分布之多维随机变量及其分布</center></h4>

<p>很多情况下我们遇到的都是多维的随机变量，比如，对一个地区的儿童进行抽样统计，观察他们的身高H和体重W，样本空间S就是该地区的儿童，身高H和体重W都是定义在S上的随机变量，这里向量(H,W)就构成了二维随机向量(或者二维随机变量)，前面两节讨论的分布都是一维随机变量的分布。二维随机变量(X,Y)的性质不仅和X及Y的性质有关，还和它们的相关性有关，也就是前面提到的相关系数！</p>

<p>1.二维随机变量(X,Y)的分布函数(或者叫联合分布函数)</p>

<script type="math/tex; mode=display">F(x,y)=P(X \le x \cap Y \le y)=P(X \le x, Y \le y)</script>

<p>如果将二维随机变量看作是平面上随机点的坐标的话，那么分布函数F(x,y)在点(x,y)处的函数值就是以点(x,y)为顶点而位于该点左下方的无穷矩形域内的概率。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/mul_1.png" alt="image" /></p>

<p>分布函数的性质：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/mul_2.png" alt="image" /></p>

<p>如果(X,Y)只有有限对可取的值那么就是二维离散型随机变量(X,Y)，它的分布律(或者随机变量X和Y的联合分布律)：</p>

<script type="math/tex; mode=display">P(X=x_{i},Y=y_{j})=p_{ij},i,j=1,2,..., \quad (\Sigma_{i=0}^{\infty}\Sigma_{j=0}^{\infty}p_{ij}=1)</script>

<p>则有：<script type="math/tex">F(x,y)=P(X \le x, Y \le y)=\Sigma_{x \le x_{i}}\Sigma_{y \le y_{j}}p_{ij}</script></p>

<p>如果(X,Y)的值是由非负函数f(x,y)确定的，那么就是二维连续型随机变量(X,Y)，它的概率密度函数(或者随机变量X和Y的联合概率密度函数)：</p>

<script type="math/tex; mode=display">F(x,y)=\int_{-\infty}^{x_{i}}\int_{-\infty}^{y_{j}}f(u,v)dudv</script>

<p>二维连续性随机变量的性质：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/mul_3.png" alt="image" /></p>

<p>2.边缘分布</p>

<p>边缘分布函数，边缘分布律，边缘概率密度</p>

<p><strong>边缘分布其实就是指，对于一个多维随机变量来说，它具有一个联合分布律(或者联合概率密度)，但是如果我们只考虑它其中的某一个随机变量的话，那么这个随机变量的分布律(或者概率密度)就是边缘分布律(或者边缘概率密度)了。</strong></p>

<p>二维连续型随机变量(X,Y)对X的边缘概率密度实际上就是对y进行积分<script type="math/tex">f_{X}(x)=\int_{-\infty}^{\infty}f(x,y)dy</script>，同理，对Y的边缘概率密度实际上就是对x进行积分<script type="math/tex">f_{Y}(y)=\int_{-\infty}^{\infty}f(x,y)dx</script>。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/cond_1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/cond_2.png" alt="image" /></p>

<p>为什么叫边缘分布呢? 其实是因为一般边缘分布的数值写在联合分布律的表格边缘而已。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/cond_3.png" alt="image" /></p>

<p>下面我们看下二维正态分布，这是一个很重要的多维随机变量分布，我们从中可以得到一些重要的结论。</p>

<p><strong>二维正态分布的两个边缘分布都是一维正态分布，给以这两个一维正态分布不同的参数会得到不同的二维正态分布，所以，已知关于X和Y的边缘分布，并不能确定X和Y的联合分布。</strong></p>

<p><img src="http://hujiaweibujidao.github.io/images/math/cond_4.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/cond_5.png" alt="image" /></p>

<p>上面的参数$\rho$是随机变量X和Y的相关系数，后面还会详细介绍。</p>

<p>3.条件分布</p>

<p><strong>因为是多维随机变量，那么自然可以假定其中某一个随机变量为某个固定的值，在这种情况下我们再去看其他随机变量的分布那就是条件分布了。</strong></p>

<p>二维离散型随机变量的条件分布律</p>

<script type="math/tex; mode=display"> P(X=x_{i} \| Y=y_{j}) = \frac{P(X=x_{i},Y=y_{j})}{P(Y=y_{j})} </script>

<p><img src="http://hujiaweibujidao.github.io/images/math/cond_6.png" alt="image" /></p>

<p>二维连续型随机变量的条件概率密度</p>

<script type="math/tex; mode=display"> P(X=x_{i} \| Y=y_{j}) = \int_{-\infty}^{x}\frac{f(x,y)}{f_{Y}(y))}dx </script>

<p><img src="http://hujiaweibujidao.github.io/images/math/cond_8.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/cond_9.png" alt="image" /></p>

<p>举例说明连续型条件概率密度的计算</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/cond_10.png" alt="image" /></p>

<p>4.相互独立的随机变量</p>

<p>前面我们提到随机变量之间可能存在相关性，那自然也有不存在相关性的随机变量，即相互独立的随机变量。很显然，如果随机变量(X,Y)的联合分布等于边缘分布的乘积那么就说明随机变量X和Y是相互独立的。</p>

<p>对于连续型随机变量(X,Y)来说，X和Y是相互独立的的条件是<script type="math/tex">f(x,y)=f_{X}(x)f_{Y}(y)</script>。</p>

<p>对于离散型随机变量(X,Y)来说，X和Y是相互独立的的条件是对于所有可能的<script type="math/tex">(x_{i},y_{j})</script>对，都有<script type="math/tex">P(X=x_{i},Y=y_{j})=P(X=x_{i})P(Y=y_{j})</script>。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/ind_2.png" alt="image" /></p>

<p>如果从期望和方差的角度来看独立性的话，那么就有<script type="math/tex">E(XY)=E(X)E(Y), D(X+Y)=D(X)+D(Y)</script>，也就是随机变量XY的期望是X和Y的期望的乘积，随机变量(X+Y)的方差是X和Y的方差之和。如果X和Y是相互独立的，那么它们的协方差Cov(X,Y)=0。</p>

<script type="math/tex; mode=display">E(XY)=\int_{-\infty}^{\infty}xyf(x)f(y)dxdy=\int_{-\infty}^{\infty}xyf_{X}(x)f_{Y}(y)dxdy=\int_{-\infty}^{\infty}xf_{X}(x)dx\int_{-\infty}^{\infty}yf_{Y}(y)dy=E(X)E(Y)</script>

<p>一般情况下，$D(X+Y)=D(X)+D(Y)+2Cov(X,Y)$，如果X和Y相互独立的话，Cov(X,Y)=0，则有$D(X+Y)=D(X)+D(Y)$。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/ind_4.png" alt="image" /></p>

<p>对于前面的二维正态随机变量，随机变量X和Y是相互独立的前提条件是它们的相关系数$\rho=0$(前面还证明过这个相关系数和X与Y的协方差相同，这就说明对于二维正态随机变量来说，它们的相关性和独立性是等价的，推广到n维正态随机变量也是如此)</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/ind_3.png" alt="image" /></p>

<p>二维随机变量中的独立性可以很容易地推广到n维随机变量上。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/ind_1.png" alt="image" /></p>

<p>5.随机变量函数的分布</p>

<p>有些时候我们需要处理的随机变量是几个随机变量形成的函数，这个时候它的分布是怎样的呢？
这类函数比较多，比如求和，乘积，商，最大值或者最小值，这里只说明其中最重要的一个和函数的分布。</p>

<p>从中我们得到一个结论：有限个相互独立的正态随机变量的线性组合仍然是服从正态分布。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/fun_1.png" alt="image" /></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-2-2/">http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-2-2/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SS 3-Continuous Distribution]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-2-1/"/>
    <updated>2014-05-19T20:30:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-2-1</id>
    <content type="html"><![CDATA[<p><strong><center>统计学那些事 Things of Statistics</center></strong>
<strong><center>逸夫图书馆, 2014/5/19</center></strong></p>

<hr />

<h4 id="center-center"><center>第三部分 分布之连续型随机变量分布</center></h4>

<p>连续型随机变量，概率密度及它的性质</p>

<p>函数f(x)是概率密度函数，函数F(x)是分布函数，两者都是连续函数。</p>

<script type="math/tex; mode=display">F(x)=\int_{-\infty}^{x}f(t)dt</script>

<p><a href="http://hujiaweibujidao.github.io/images/math/cont0.png">查看定义1</a>
<a href="http://hujiaweibujidao.github.io/images/math/cont1.png">查看定义2</a></p>

<p>关于连续型随机变量X对于任意一个指定实数值k的概率都是0，即$p(X=k)=0$的解释</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/cont2.png" alt="image" /></p>

<p>(1)均匀分布(uniform distribution)</p>

<p>连续型随机变量X在区间(a,b)均匀分布，它的期望是$E=\frac{a+b}{2}$，也就是期望就是区间(a,b)的中点，它的方差是$D=\frac{(b-a)^{2}}{12}$，用$D=E(X^{2})-E^{2}$去证明方便些。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/cont_uniform.png" alt="image" /></p>

<p>(2)指数分布(exponential distribution)</p>

<p>指数分布有一个参数$\theta$，它的期望就是$\theta$，方差是$\theta^{2}$，而且它具有<strong>无记忆性</strong>。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/cont_exp1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/cont_exp2.png" alt="image" /></p>

<p>证明它的期望是$\theta$，方差是$\theta^{2}$:</p>

<script type="math/tex; mode=display">E(X)=\int_{-\infty}^{\infty}xf(x)dx = \int_{0}^{\infty}x \frac{1}{\theta} e^{- \frac{x}{\theta}}dx = \int_{0}^{\infty}xd(-e^{- \frac{x}{\theta}}) = [-x e^{- \frac{x}{\theta}}]_{0}^{\infty} +  \int_{0}^{\infty} e^{- \frac{x}{\theta}}dx = \theta</script>

<script type="math/tex; mode=display">E(X^{2})=\int_{-\infty}^{\infty}x^{2}f(x)dx = \int_{0}^{\infty}x^{2} \frac{1}{\theta} e^{- \frac{x}{\theta}}dx = \int_{0}^{\infty}x^{2}d(-e^{- \frac{x}{\theta}}) = [-x^{2} e^{- \frac{x}{\theta}}]_{0}^{\infty} +  \int_{0}^{\infty} 2x e^{- \frac{x}{\theta}}dx = 2\theta^{2}</script>

<script type="math/tex; mode=display">D(X)=E(X^{2})-[E(X)]^{2}=\theta^{2}</script>

<p>《统计思维》对指数分布的解释：举例来说，<strong>观察一系列事件之间的间隔时间，若事件在每个时间点发生的概率相同，那么间隔时间的分布就近似指数分布</strong>(也就是前面的无记忆性)。</p>

<p>指数分布的CDF如下，此时$\lambda=\frac{1}{\theta}$</p>

<script type="math/tex; mode=display">
CDF(x)=1-e^{-\lambda x}
</script>

<p>参数$\lambda$决定了指数分布的形状，通常，指数分布的均值是$\frac{1}{\lambda}$，中位数是$\frac{log(2)}{\lambda}$。下图为$\lambda=2$的指数分布图：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/edcdf.png" alt="image" /></p>

<p>如何判断一个分布是否是指数分布呢？一种办法是画出取对数之后的互补累积分布函数(CCDF=Complementary CDF=1-CDF(x))，CCDF是一条斜率为$-\lambda$的直线，原因如下：</p>

<script type="math/tex; mode=display">
y=CCDF(x)=1-CDF(x)=e^{-\lambda x} \quad => \quad log(y)=-\lambda x
</script>

<p>(3)正态分布(normal distribution)</p>

<p>正态分布，又叫高斯分布，是最常用的分布。其中$x=\mu$是函数f(x)的驻点，$x=\mu+\sigma,  x=\mu-\sigma$是函数f(x)的拐点，这个可能不太好计算，可用下面的Matlab代码进行验证。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="matlab"><span class="line"><span class="n">clear</span><span class="p">,</span><span class="n">clc</span><span class="p">;</span>
</span><span class="line"><span class="n">syms</span> <span class="n">x</span><span class="p">;</span>
</span><span class="line"><span class="n">syms</span> <span class="n">u</span><span class="p">;</span>
</span><span class="line"><span class="n">syms</span> <span class="n">r</span><span class="p">;</span>
</span><span class="line"><span class="n">syms</span> <span class="n">p</span><span class="p">;</span>
</span><span class="line"><span class="n">f</span><span class="p">=</span>1 <span class="o">/</span> <span class="p">(</span><span class="nb">sqrt</span><span class="p">(</span>2<span class="o">*</span><span class="n">p</span><span class="p">)</span><span class="o">*</span><span class="n">r</span><span class="p">)</span> <span class="o">*</span> <span class="nb">exp</span><span class="p">(</span><span class="o">-</span>1 <span class="o">*</span> <span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="n">u</span><span class="p">)</span>^2 <span class="o">/</span> <span class="p">(</span>2<span class="o">*</span><span class="n">r</span>^2<span class="p">)</span> <span class="p">);</span>
</span><span class="line"><span class="n">pretty</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line"><span class="n">f1</span><span class="p">=</span><span class="n">diff</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> 1<span class="p">)</span> <span class="c">%一阶导数</span>
</span><span class="line"><span class="n">pretty</span><span class="p">(</span><span class="n">f1</span><span class="p">)</span>
</span><span class="line"><span class="n">f2</span><span class="p">=</span><span class="n">diff</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> 2<span class="p">)</span> <span class="c">%二阶导数</span>
</span><span class="line"><span class="n">pretty</span><span class="p">(</span><span class="n">f2</span><span class="p">)</span>
</span><span class="line"><span class="n">solve</span><span class="p">(</span><span class="n">f1</span><span class="p">)</span> <span class="c">%u</span>
</span><span class="line"><span class="n">solve</span><span class="p">(</span><span class="n">f2</span><span class="p">)</span> <span class="c">%u+r u-r</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://hujiaweibujidao.github.io/images/math/cont_normal1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/cont_normal2.png" alt="image" /></p>

<p>关于标准正态分布，即参数为$\mu=0, \sigma=1$的正态分布，它的分布函数值已经制作成表格，可以方便进行查看，其他非标准正态分布可以通过一个线性变换转换成标准正态分布。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/cont_normal4.png" alt="image" /></p>

<p>在证明其概率密度总和为1时利用了一个重要的积分$\int_{-\infty}^{\infty} e^{\frac{t^{2}}{2}} dt = \sqrt{2 \pi}$，它的证明可以转换成二重积分然后通过极坐标计算出来。完整详细的证明可以参考下面：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/inte1.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/inte2.png" alt="image" /></p>

<p>《统计思维》对正态分布的解释：对于正态分布的CDF还没有一种准确的表达，最常用的一种形式是以误差函数(error function)来表示，它是一个特殊的函数，表示为erf(x)，在Matlab中内置了函数<code>erf</code>，对它的说明为erf函数是对参数为$\mu=0, \sigma=\frac{1}{2}$的正态分布的二重积分，有兴趣可以去计算一下，得到的结果如下：</p>

<script type="math/tex; mode=display">
CDF(x)=\frac{1}{2}[1+erf(\frac{x-\mu}{\sigma \sqrt{2}})] \quad erf(x)=\frac{2}{\sqrt{\pi}}\int_{0}^{x}e^{-t^{2}}dt
</script>

<p>其中，参数$\mu$和$\sigma$分别决定了正态分布的均值和标准差。下图为$\mu=2.0$和$\sigma=0.5$的正态分布的CDF图：[呈现明显的S型]</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/ndcdf.png" alt="image" /></p>

<p>根据大数定理，当我们处理大样本数据集(超过30个数据)，并且重复地从总体中抽取样本时，得到的数值分布就接近正态分布曲线。正态分布以均值为中心完全对称。</p>

<p>关于正态分布有一个重要的结论，对任何数值分布来说(不论它的均值和标准差)，只要数值是正态分布，那么几乎100%的数值都分布在均值的-3到3个标准差之间。下面是正态曲线下数值的分布情况：</p>

<!--
![image](http://hujiaweibujidao.github.io/images/math/nd.png)
-->

<p><img src="http://hujiaweibujidao.github.io/images/math/cont_normal3.png" alt="image" /></p>

<p>从中可以看出，<strong>在距离均值1个标准差之间大概有34%的数值分布，在1个标准差和2个标准差之间大概有13%的数值分布，在2个标准差和3个标准差之间大概有2.1%的数值分布。</strong></p>

<p>通过这个图我么可以得到一个经典的<strong>3$\sigma$法则</strong>，又叫<strong>68-95-99法则</strong></p>

<p><strong>在$(\mu - \sigma, \mu + \sigma)$之间大概有68.26%的数据分布，在$(\mu - 2\sigma, \mu + 2\sigma)$之间大概有95.44%的数据分布，在$(\mu - 3\sigma, \mu + 3\sigma)$之间大概有99.74%的数据分布。</strong></p>

<p>$\alpha$分位点的概念：对于标准正态分布X~N(0,1)，满足<script type="math/tex">P(X>Z_{\alpha})=\alpha</script>的<script type="math/tex">Z_{\alpha}</script>称为$\alpha$分位点，且有<script type="math/tex">Z_{-1\alpha}=Z_{\alpha}</script>。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/cont_normal5.png" alt="image" /></p>

<p><a href="http://wikipedia.org/wiki/Log-normal_distribution">对数正态分布 on wiki</a>：如果一组数据取对数之后服从正态分布，那么我们就称其服从对数正态分布。对数正态分布的 CDF 跟正态分布一样, 只是用 logx 代替原来的 x:</p>

<script type="math/tex; mode=display">
CDF_{lognormal}(x) = CDF_{normal}(log x)
</script>

<p>对数正态分布的均值与标准差不再是是$\mu$和$\sigma$了。可以证明，成人体重的分布是近似对数正态的。</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-2-1/">http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-2-1/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SS 3-Discrete Distribution]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-2/"/>
    <updated>2014-05-19T20:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-2</id>
    <content type="html"><![CDATA[<p><strong><center>统计学那些事 Things of Statistics</center></strong>
<strong><center>逸夫图书馆, 2014/5/19</center></strong></p>

<hr />

<h4 id="center-center"><center>第三部分 分布之离散型随机变量分布</center></h4>

<p>1.概率质量函数PMF(Probability Mass Function)</p>

<p>数据集的数据值到它的概率的映射函数。直方图是各个值出现的频数，如果将频数除以样本总数，得到概率，归一化之后的直方图就是PMF。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/pmf.png" alt="image" /></p>

<p>2.累积分布函数CDF(Cumulative Distribution Function)</p>

<p>数据集的数据值到它在分布中概率的累积值的映射函数。PMF和CDF在国内的教材中并没有这样提过，但是在国外的很多统计书中都有，所以还是比较重要的，拿出来介绍下。</p>

<p>例如，CDF(0) = 0; CDF(1) = 0.2; CDF(2) = 0.6; CDF(3) = 0.8; CDF(4) = 0.8; CDF(5) = 1，它的CDF图为一个阶跃函数：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/cdf.png" alt="image" /></p>

<p>3.离散型随机变量及其分布律</p>

<p>分布律：离散型随机变量以概率1和一定的规律分布在一些离散值上</p>

<p><a href="http://hujiaweibujidao.github.io/images/math/disc0.png">查看定义</a></p>

<p>(1)0-1分布</p>

<p>随机变量X只有两个取值0和1(样本空间只有两个取值也行)，所以叫做0-1分布，它的分布律为
$P(X=0)=p, P(X=1)=q, (q=1-p)$，它的期望是$p$，方差是$p(1-p)$。</p>

<p><a href="http://hujiaweibujidao.github.io/images/math/disc_01.png">查看定义</a></p>

<p>(2)二项分布</p>

<p>二项分布的分布律为 $P(X=k)= {n \choose k} p^{k}q^{1-k}$，因为 $P(X=k)$ 刚好是 $(p+q)^{n}$ 的二项式系数，所以这个分布就叫二项分布。二项分布是从n重伯努利试验中得到的分布，所谓的伯努利试验就是指相互独立的试验，每次试验的结果要么成功要么失败(或者说某个事件要么发生要么不发生)。</p>

<p><a href="http://hujiaweibujidao.github.io/images/math/disc_binomial.png">查看定义1</a>
<a href="http://hujiaweibujidao.github.io/images/math/disc_binomial2.png">查看定义2</a></p>

<p>(3)泊松分布</p>

<p>泊松分布是一类很常用的分布，它的分布律是$P(X=k)=\frac{\lambda^{k} e^{-\lambda}}{k!},(k=0,1,2,…)$，其中有一个参数$\lambda$，参数$\lambda$的含义既是泊松分布的期望，又是它的方差，所以，只要参数$\lambda$或者期望或者方差确定了，泊松分布就确定了。泊松分布中经常需要用到的式子[$e^{\lambda}=\Sigma_{k=0}^{\infty}\frac{x^{k}}{k!}$]</p>

<p><a href="http://hujiaweibujidao.github.io/images/math/disc_pos.png">查看定义</a></p>

<p>证明它的期望是$\lambda$: </p>

<script type="math/tex; mode=display">E=\Sigma_{k=0}^{\infty}k \frac{\lambda^{k} e^{-\lambda}}{k!}=\lambda e^{-\lambda} \Sigma_{k=1}^{\infty} \frac{\lambda^{k-1}}{(k-1)!}=\lambda e^{-\lambda} e^{\lambda}=\lambda</script>

<p>证明它的方差是$\lambda$:</p>

<script type="math/tex; mode=display">D=E(X^{2})-E^{2}=E(X(X-1)-X)-E^{2}=\Sigma_{k=0}^{\infty}k(k-1) \frac{\lambda^{k} e^{-\lambda}}{k!}+\lambda-\lambda^{2}=\lambda e^{-\lambda} \Sigma_{k=1}^{\infty} \frac{\lambda^{k-1}}{(k-1)!}=\lambda^{2} e^{-\lambda} e^{\lambda}+\lambda-\lambda^{2}=\lambda</script>

<p><strong>泊松定理说明当n很大，p很小的时候，以n，p为参数的二项分布可以用参数$\lambda = np $的泊松分布进行近似！</strong>记住这个定理其实也可以方便我们记住泊松分布的分布律。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/disc_pos2.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/disc_pos3.png" alt="image" /></p>

<p>应用举例，记住后面的结论：</p>

<p><strong>当$n \ge 20,p \le 0.05$时用泊松分布近似二项分布的概率值近似效果颇佳。</strong></p>

<p><img src="http://hujiaweibujidao.github.io/images/math/disc_pos4.png" alt="image" /></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-2/">http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-2/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SS 2-Covariance and Correlation coefficient]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-3/"/>
    <updated>2014-05-19T19:30:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-3</id>
    <content type="html"><![CDATA[<p><strong><center>统计学那些事 Things of Statistics</center></strong>
<strong><center>逸夫图书馆, 2014/5/19</center></strong></p>

<hr />

<h4 id="center-center"><center>第二部分 协方差和相关关系</center></h4>

<p>1.协方差</p>

<p>随机变量X和Y的协方差Cov(X,Y)=E[X-E(X)]E[Y-E(Y)]=E(XY)-E(X)E(Y)。</p>

<p>为什么D(X+Y)=E(XY)-E(X)E(Y)?</p>

<script type="math/tex; mode=display">
D(X+Y)=E[(X+Y)^{2}]-[E(X+Y)]^{2}=E[X^{2}+Y^{2}-2XY]-[E(X)+E(Y)]^{2} \\ =E[X^{2}]-[E(X)]^{2}+E[Y^{2}]-[E(Y)]^{2}+2E(XY)-2E(X)E(Y) \\ =D(X)+D(Y)+2E(XY)-2E(X)E(Y)
</script>

<p>因为 <strong>(X+Y)=D(X)+D(Y)+2Cov(X,Y)</strong>
所以 <strong>D(X+Y)=E(XY)-E(X)E(Y)</strong></p>

<p>协方差的性质：(基本上根据上式都可以简单证明得到)</p>

<p>Cov(X,Y)=Cov(Y,X)， Cov(X,X)=D(X)，Cov(aX,bY)=abCov(X,Y)，<script type="math/tex">Cov(X_{1}+X_{2},Y)=Cov(X_{1},Y)+Cov(X_{2},Y)</script></p>

<p>如果X和Y是相互独立的，那么Cov(X,Y)=0。</p>

<p>2.相关系数(correlation coefficient)是两个变量之间<strong>线性关系</strong>的数值型指标，取值范围是[-1,1]，大于0表示正相关，小于0表示负相关，可以用散点图来直接查看相关性。<strong>根据某些不成文的规则，一般高于0.6表示强相关，低于0.4表示弱相关，中间部分表示中度相关。</strong></p>

<p>[<strong>一般说的相关系数是Pearson相关系数，它考察的变量的属性是连续的，例如年龄，体重等，如果是离散型变量那么应该使用点二列相关系数</strong>]</p>

<p>相关系数的计算，我们经常可以看到下面两种表示方式：</p>

<p>一种表示方式是：[这是从协方差和方差的角度来看的]</p>

<script type="math/tex; mode=display">
\rho_{XY}=\frac{Cov(X,Y)}{\sqrt{D(X)}\sqrt{D(Y)}}
</script>

<p>还有一种常见的表示方式是：[这是从数据本身来看的]</p>

<script type="math/tex; mode=display">
r_{XY}=\frac{n\Sigma{XY}-\Sigma{X}\Sigma{Y}}{\sqrt{[n\Sigma{X^2}-(\Sigma{X})^2][n\Sigma{Y^2}-(\Sigma{Y})^2]}}
</script>

<p>其实，很容易看出两者是等价的，因为$E(X)=\frac{\Sigma X}{n}, D(X)=\frac{\Sigma X^{2}}{n} - \frac{\Sigma X}{n^{2}}$，然后将第二个等式右边上下除以$n^{2}$即可得到第一个等式的右边。</p>

<p>举个计算的例子：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/cor_1.png" alt="image" /></p>

<p>得到的结果为0.692，算是一个强相关</p>

<script type="math/tex; mode=display">
r_{XY}=\frac{10 \times 247-54 \times 43}{\sqrt{[10 \times 320-(54)^2][10 \times 201-(43)^2]}} = 0.692
</script>

<p>为什么说相关系数反映的只是随机变量之间的线性关系呢？</p>

<p>我们总是用关于X的线性函数a+bX去近似Y，也就是用直线a+bX去拟合Y，如何判断拟合的好坏呢？一般都是用均方误差，也就是误差值的平方的均值，然后用均方误差对a和b分别求导即可得到使得均方误差达到最小的拟合参数a和b。很有意思的一个结论就是，<strong>均值点(E(X),E(Y))一定在拟合直线a+bX上</strong>。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/cor_2.png" alt="image" /></p>

<p>最后得到的结果是:<script type="math/tex">min E[(Y-(a+bX))^{2}]=(1-\rho_{XY}^{2})D(Y)</script>，从中可以得到很多性质：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/cor_3.png" alt="image" /></p>

<table>
  <tbody>
    <tr>
      <td>均方误差e和相关系数$\rho$之间的关系，e是$$</td>
      <td>\rho_{XY}</td>
      <td>$$的严格单调递减函数。</td>
    </tr>
  </tbody>
</table>

<p><img src="http://hujiaweibujidao.github.io/images/math/cor_4.png" alt="image" /></p>

<p>注意两点：</p>

<p>(1)<strong>相关系数反映的是只是线性关系！如果两个变量的相关系数为0，只能说明它们没有线性关系存在，但是可能存在其他的非线性关系！不相关和相互独立是不一样的，不相关只是就线性关系来说，相互独立是就一般关系而言。</strong></p>

<p><img src="http://hujiaweibujidao.github.io/images/math/cor_5.png" alt="image" /></p>

<p>但是，有时候相关性和独立性是等价的，比如下面的二维正态分布，这是很重要的多维随机变量分布，随机变量X和Y相互独立的条件是$\rho=0$(不明白可以看下节对多维随机变量分布的介绍)，而$\rho$正好等于<script type="math/tex">\rho_{XY}</script>，且随机变量X和Y不相关的条件就是<script type="math/tex">\rho_{XY}=0</script>，所以此时相关性和独立性是等价的。[之后我会写一篇文章并通过作图的方式介绍相关系数到底是如何影响二维正态分布的数据的分布的]</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/cor_6.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/cor_7.png" alt="image" /></p>

<p>(2)<strong>相关性和因果关系无关！</strong>例如，冰淇淋的消费量和犯罪率是正相关的(可以参考《爱上统计学》)，但是两者不存在任何因果关系！</p>

<p>决定系数：相关系数的平方，它表述一个变量的方差可以被另一个变量的方差来解释的百分比。(参考《爱上统计学》)</p>

<p>3.协方差矩阵</p>

<p>协方差矩阵是非常重要的内容，经典算法PCA的基础就是协方差矩阵。引入它之前，先要看下原点矩和中心距的概念</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/corm_1.png" alt="image" /></p>

<p>协方差矩阵其实就是由n维随机变量之间两两的二阶混合中心距组成的矩阵</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/corm_2.png" alt="image" /></p>

<p>还是回到我们最重要的那个二维正态随机变量，看下如何将它的概率密度转换成协方差矩阵的表示形式，继而将其推广至n维正态随机变量。</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/corm_5.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/math/corm_4.png" alt="image" /></p>

<p>上面最后得到的n维正态随机变量的概率密度公式是在模式识别里面非常重要的，n维正态随机变量的性质如下：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/corm_3.png" alt="image" /></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-3/">http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-3/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SS 1-Probability and Descriptive Statistics]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-1/"/>
    <updated>2014-05-19T19:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-1</id>
    <content type="html"><![CDATA[<p><strong><center>统计学那些事 Things of Statistics</center></strong>
<strong><center>逸夫图书馆, 2014/5/19</center></strong></p>

<hr />

<h4 id="center-center"><center>第一部分 概率和统计量</center></h4>
<p>1.事件：对立事件(complementary event)，互斥事件(exclusive event)，相交事件(intersecting event)，相关事件(dependent event)，独立事件(independent event)，可以使用韦恩图(Venn Diagram)方便分析事件之间的关系。</p>

<p>如果事件A和B会相互影响，那么它们是相关事件，否则是独立事件。
事件A和B独立：$P(A|B)=P(A) \quad P(A \cap B)=P(A)P(B)$</p>

<p>2.概率：条件概率(Conditional Probability)，全概率(Total Probability)，贝叶斯定理(Bayes’ Theorem)</p>

<p>条件概率：$ P(A | B) = \frac{P(A \cap B)}{P(B)} $</p>

<p>全概率：$ P(B) = P(B | A) P(A)+P(B | A’) P(A’) $</p>

<p>贝叶斯定理(将条件概率和全概率整合到一起)：
$P(A|B)=\frac{P(A \cap B)}{P(B|A)P(A)+P(B|A’)P(A’)}$</p>

<p>3.描述数据的集中趋势：均值(mean)，中位数(median)，众数(mode)，加权平均数</p>

<p>百分位点(percentile points)：中位数(Q2)就是50百分位点，Q1为25百分位点(lower quartile)，Q3为75百分位点(upper quartile)，<strong>经常使用Q3-Q1=IQR(interquartile range，四分差或四分位数)来检查分布是否对称。</strong></p>

<!--
[如果要计算一组数中的某个百分位数，一般比较好的排序方法是选择排序；当然，如果是计算该组数的特殊的百分位数，例如中位数，有其他更好地方法能够在线性时间内得到，之后我对做一些相关问题的研究，暂且说明一下]
-->

<p>4.描述数据的变异性：极差(range)，标准差(standard deviation,简称s或者SD)，方差(deviation)</p>

<p>标准差的计算公式：
$$
s=\sqrt{\frac{\Sigma(X-\bar{X})^2}{n-1}}
$$</p>

<p><strong>s是总体标准差的无偏估计，如果根号内部分母改成了n则是有偏估计，详细证明参见：<a href="http://en.wikipedia.org/wiki/Bias_of_an_estimator">Bias_of_an_estimator</a>，《爱上统计学》作者对此的解释是统计学家们通常比较保守，保守的含义是，如果我们不得不出错，我们出错也是因为过高地估计了标准差(因为除以n-1使得标准差大于实际值)。</strong></p>

<p>如果想了解更加细致的内容可以看下这篇文章<a href="http://www.visiondummy.com/2014/03/divide-variance-n-1/">Why divide the sample variance by N-1?</a></p>

<p>标准差和方差的异同：<strong>它们都是用来反映数据集的数据的变异性或者离散度的度量，但是标准差以原有的计算单位存在，然而方差以平方单位存在，前者在实际中更加具有意义</strong>。例如，某高校的男生的平均身高是170cm，标准差是5cm，那么说明该校男生的身高与平均身高的差异大概就是上下5cm，换成方差来解释的话就不好陈述了。</p>

<p>使用有偏估计其实也可以，但是最好使用无偏估计，我记得Coursera上Machine Learning课中Andrew Ng曾经提到过，实际编码中其实还是使用有偏估计，因为它们在样本数据很大的时候其实结果没多大影响。</p>

<p>5.数据集的图形化显示：直方图，饼图，线图，柱形图，条形图，茎叶图等</p>

<p>数据分布的差异性描述：平均值，变异性，峰度(kurtosis)，偏度(skewness)</p>

<p>峰值可能有多个，比如双峰或者多峰等。偏度有一个计算公式，由Pearson发明的，他同时也是相关系数的发明者，偏度虽有正负之分，但是绝对值越大说明图形越偏。</p>

<script type="math/tex; mode=display">
SK=\frac{3(\bar{X}-M)}{s},\quad M=Median,\bar{X}=Mean,s=SD
</script>

<p>峰度图：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/kurtosis.png" alt="image" /></p>

<p>偏度图：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/skewness.png" alt="image" /></p>

<p>6.两个最重要的统计量：期望(Expectation)与方差(Variance)</p>

<p>$E(x)=\Sigma xP(X=x)=\mu \quad Var(x)=E(x-\mu)^{2}=\Sigma (x-\mu)^2P(X=x)=E(x^{2})-(E(x))^{2}$</p>

<p>[注：上面的期望的等式是对于离散型随机变量x，如果是连续型随机变量x，那么$E=\int<em>{-\infty}^{\infty} xf(x)dx$，同理，方差就是$D=\int</em>{-\infty}^{\infty} (x-E)^{2}f(x)dx$，期望描述的是数据的集中趋势，方差描述的数据的偏移程度]</p>

<p>线性变换之后的期望与方差：</p>

<p>$E(ax+b)=aE(x)+b \quad Var(ax+b)=a^{2}Var(x)$
$E(ax+by)=aE(x)+bE(y) \quad Var(ax+by)=a^{2}Var(x)+b^{2}Var(y)$</p>

<p><strong>思考：为什么加上b，方差并没有发生变化呢？</strong></p>

<p><strong>因为在变量中增加常数b只是将概率分布移动了一下，分布的形状并没有发生改变，所以b并没有在方差中起到作用。</strong></p>

<p>相互独立事件X和Y(或者说是随机变量X和Y)：</p>

<p>$E(X+Y)=E(X)+E(Y) \quad Var(X+Y)=Var(X)+Var(Y)$
$E(X-Y)=E(X)-E(Y) \quad Var(X-Y)=Var(X)+Var(Y)$</p>

<p><strong>思考：为什么$Var(X-Y)=Var(X)+Var(Y)$？</strong></p>

<script type="math/tex; mode=display">Var(X-Y)=E[(X-Y)^{2}]-[E(X-Y)]^{2}=E(X^{2})+E(Y^{2})-2E(X)E(Y)+[E(X)-E(Y)]^{2}\\
=E(X^{2})-[E(X)]^{2}+E(Y^{2})-[E(Y)]^{2}-2E(X)E(Y)+2E(X)E(Y)=Var(X)+Var(Y)</script>

<p><strong>记住，一个随机变量减去另一个随机变量得到的概率分布的方差是两个随机变量的方差之和，方差只会增加！</strong></p>

<p>下面两个图示演示了其结果</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/varxplusy.png" alt="image" /></p>

<p><img src="http://hujiaweibujidao.github.io/images/math/varxminusy.png" alt="image" /></p>

<p>相互独立的随机变量与独立观测值之间的区别：</p>

<p><img src="http://hujiaweibujidao.github.io/images/math/independentobservation.png" alt="image" /></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-1/">http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-1/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Statistics Summary]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary/"/>
    <updated>2014-05-19T18:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary</id>
    <content type="html"><![CDATA[<p><strong><center>统计学那些事 Things of Statistics</center></strong>
<strong><center>逸夫图书馆, 2014/5/19</center></strong></p>

<hr />

<h4 id="center-center"><center>第零部分 碎碎念</center></h4>
<p>本系列是对概率和数理统计中的重要内容的一个总结，不会侧重很多众所周知的细节，所以有啥疑问还是需要Google或者Wikipedia。关于本系列中出现的术语参照参考书籍中的定义，部分可能与大学教材中不同，请自行对应起来理解。小弟才疏学浅，若有错误请留言，欢迎批评指正。</p>

<p>参考书籍：</p>

<p>1.<a href="http://book.douban.com/subject/2985995/">《爱上统计学》</a></p>

<p>2.<a href="http://book.douban.com/subject/7056708/">《深入浅出统计学》</a></p>

<p>3.<a href="http://book.douban.com/subject/24381562/">《统计思维：程序员数学之概率统计》</a></p>

<p>4.<a href="http://book.douban.com/subject/3165271/">《概率论与数理统计》</a></p>

<p>全部内容：</p>

<p>1.<a href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-1/">概率和统计量</a></p>

<p>2.<a href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-3/">协方差和相关关系</a></p>

<p>3.随机变量的分布</p>

<p>(1)<a href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-2/">分布之离散型随机变量分布</a></p>

<p>(2)<a href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-2-1/">分布之连续型随机变量分布</a></p>

<p>(3)<a href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-2-2/">分布之多维随机变量及其分布</a></p>

<p>4.<a href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary-4/">假设检验</a></p>

<p>To do list: 显著性检验，ANOVA……</p>

<p>[To be Continued…]</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary/">http://hujiaweibujidao.github.io/blog/2014/05/19/statistics-summary/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Algorithms: Longest Common Subsequence]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/19/longest-common-subsequence/"/>
    <updated>2014-05-19T16:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/19/longest-common-subsequence</id>
    <content type="html"><![CDATA[<h4 id="centeralgorithms-longest-common-subsequencecenter"><center>Algorithms: Longest Common Subsequence</center></h4>

<p>最长公共子序列是典型的动态规划问题，如果不理解动态规划请移步先看<a href="http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-dynamic-programming/">这篇动态规划的总结</a>，否则本篇文章中的代码实现会不理解的哟！</p>

<p>参考内容：</p>

<p>1.<a href="http://en.wikipedia.org/wiki/Introduction_to_Algorithms">算法导论</a></p>

<p>2.<a href="http://book.douban.com/subject/4875278/">算法设计、分析与实现从入门到精通</a></p>

<hr />

<p>1.问题描述</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/lcs1.png" alt="image" /></p>

<p>2.最优子结构和子问题重叠</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/lcs2.png" alt="image" /></p>

<p>3.5种实现方式</p>

<p>根据LCS的递推公式</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

c[i][j]=  \left\{ 
  \begin{array}{l l}
    0 & \quad \text{i=0 或者 j=0}\\
    c[i-1][j-1]+1 & \quad \text{i,j>0,且$x_{i}=y_{j}$}\\
    max({c[i][j-1],c[i-1][j]}) & \quad \text{i,j>0,且$x_{i} \ne y_{j}$}
  \end{array} \right.
 %]]&gt;</script>

<p>(1)从中可以看出计算c[i][j]时只需要2行即可，前一行(i-1)和当前行(i)，每行的长度是min{m,n}，首先初始化前一行都为0，然后计算当前行的值，当要计算下一行之前将当前行的值复制到前一行中即可。</p>

<p>(2)从递推公式中还可以看出计算当前行i的话，其实只需要一行再加上O(1)的额外空间就行了。因为计算c[i][j]只需要前一行中c[i-1]<a href="k&gt;=j-1">k</a>的数据，对于k&lt;j-1的数据都是没有用的，而当前行c[i]<a href="l&lt;=j-1">l</a>的数据都是有用的，要用来计算下一行的值，所以，可以在计算当前行的时候，将当前行的前面计算好的部分复制到前一行中对应位置上，但是c[i][j-1]除外，因为c[i-1][j-1]也是需要的，所以需要额外的O(1)的空间保存c[i][j-1]。</p>

<p>LCS的五种实现：分别为0：直接递归；1：带备忘录的递归；2：使用二维数组保存结果的迭代；3：使用2个一维数组保存结果的迭代；4：使用1个一维数组和额外的O(1)空间保存结果的迭代。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">lcs0</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">):</span>
</span><span class="line">    <span class="c">#string starts at index 0, not 1</span>
</span><span class="line">    <span class="k">if</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">0</span> <span class="ow">or</span> <span class="n">j</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="mi">0</span> <span class="c">#attention to this!!!</span>
</span><span class="line">    <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">y</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>  <span class="k">return</span> <span class="n">lcs0</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">    <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">lcs0</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="p">),</span><span class="n">lcs0</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="s">&#39;abcde&#39;</span><span class="p">,</span><span class="s">&#39;oaob&#39;</span>
</span><span class="line"><span class="n">lenx</span><span class="p">,</span><span class="n">leny</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">lcs0</span><span class="p">(</span><span class="n">lenx</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">leny</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="c">#2</span>
</span><span class="line">
</span><span class="line"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">memo</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="n">cache</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line">    <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">wrap</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">args</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">cache</span><span class="p">:</span>
</span><span class="line">            <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span><span class="o">=</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">wrap</span>
</span><span class="line">
</span><span class="line"><span class="nd">@memo</span>
</span><span class="line"><span class="k">def</span> <span class="nf">lcs1</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">):</span>
</span><span class="line">    <span class="c">#string starts at index 0, not 1</span>
</span><span class="line">    <span class="k">if</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">0</span> <span class="ow">or</span> <span class="n">j</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="mi">0</span> <span class="c">#attention to this!!!</span>
</span><span class="line">    <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">y</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>  <span class="k">return</span> <span class="n">lcs1</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">    <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">lcs1</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="p">),</span><span class="n">lcs1</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="s">&#39;abcde&#39;</span><span class="p">,</span><span class="s">&#39;oaob&#39;</span>
</span><span class="line"><span class="n">lenx</span><span class="p">,</span><span class="n">leny</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">lcs1</span><span class="p">(</span><span class="n">lenx</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">leny</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="c">#2</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">lcs2</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">):</span>
</span><span class="line">    <span class="n">lenx</span><span class="p">,</span><span class="n">leny</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class="line">    <span class="n">minlen</span><span class="p">,</span><span class="n">maxlen</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span>
</span><span class="line">    <span class="k">if</span> <span class="n">lenx</span><span class="o">&lt;</span><span class="n">leny</span><span class="p">:</span> <span class="n">minlen</span><span class="p">,</span><span class="n">maxlen</span><span class="o">=</span><span class="n">lenx</span><span class="p">,</span><span class="n">leny</span><span class="p">;</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="n">y</span><span class="p">,</span><span class="n">x</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span> <span class="n">minlen</span><span class="p">,</span><span class="n">maxlen</span><span class="o">=</span><span class="n">leny</span><span class="p">,</span><span class="n">lenx</span><span class="p">;</span>
</span><span class="line">    <span class="c">#s is maxlen * minlen</span>
</span><span class="line">    <span class="n">s</span><span class="o">=</span><span class="p">[[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">minlen</span><span class="p">)]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">maxlen</span><span class="p">)]</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">maxlen</span><span class="p">):</span> <span class="c">#so, let x be the longer string!!!</span>
</span><span class="line">        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">minlen</span><span class="p">):</span>
</span><span class="line">            <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">y</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="nb">max</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">],</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class="line">    <span class="k">return</span> <span class="n">s</span>
</span><span class="line">
</span><span class="line"><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="s">&#39;abcde&#39;</span><span class="p">,</span><span class="s">&#39;oaob&#39;</span>
</span><span class="line"><span class="n">s</span><span class="o">=</span><span class="n">lcs2</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="c">#[[0, 1, 1, 1], [0, 1, 1, 2], [0, 1, 1, 2], [0, 1, 1, 2], [0, 1, 1, 2]]</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">lcs3</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">):</span>
</span><span class="line">    <span class="n">lenx</span><span class="p">,</span><span class="n">leny</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class="line">    <span class="n">minlen</span><span class="p">,</span><span class="n">maxlen</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span>
</span><span class="line">    <span class="k">if</span> <span class="n">lenx</span><span class="o">&lt;</span><span class="n">leny</span><span class="p">:</span> <span class="n">minlen</span><span class="p">,</span><span class="n">maxlen</span><span class="o">=</span><span class="n">lenx</span><span class="p">,</span><span class="n">leny</span><span class="p">;</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="n">y</span><span class="p">,</span><span class="n">x</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span> <span class="n">minlen</span><span class="p">,</span><span class="n">maxlen</span><span class="o">=</span><span class="n">leny</span><span class="p">,</span><span class="n">lenx</span><span class="p">;</span>
</span><span class="line">    <span class="c">#s is maxlen * minlen</span>
</span><span class="line">    <span class="n">pre</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">minlen</span><span class="p">)]</span>
</span><span class="line">    <span class="n">cur</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">minlen</span><span class="p">)]</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">maxlen</span><span class="p">):</span> <span class="c">#so, let x be the longer string!!!</span>
</span><span class="line">        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">minlen</span><span class="p">):</span>
</span><span class="line">            <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">y</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span> <span class="n">cur</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">pre</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span> <span class="n">cur</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="nb">max</span><span class="p">(</span><span class="n">pre</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">cur</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class="line">        <span class="n">pre</span><span class="p">[:]</span><span class="o">=</span><span class="n">cur</span><span class="p">[:]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">cur</span>
</span><span class="line">
</span><span class="line"><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="s">&#39;abcde&#39;</span><span class="p">,</span><span class="s">&#39;oaob&#39;</span>
</span><span class="line"><span class="n">s</span><span class="o">=</span><span class="n">lcs3</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="c">#[2, 2, 2, 2]</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">lcs4</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">):</span>
</span><span class="line">    <span class="n">lenx</span><span class="p">,</span><span class="n">leny</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class="line">    <span class="n">minlen</span><span class="p">,</span><span class="n">maxlen</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span>
</span><span class="line">    <span class="k">if</span> <span class="n">lenx</span><span class="o">&lt;</span><span class="n">leny</span><span class="p">:</span> <span class="n">minlen</span><span class="p">,</span><span class="n">maxlen</span><span class="o">=</span><span class="n">lenx</span><span class="p">,</span><span class="n">leny</span><span class="p">;</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="n">y</span><span class="p">,</span><span class="n">x</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span> <span class="n">minlen</span><span class="p">,</span><span class="n">maxlen</span><span class="o">=</span><span class="n">leny</span><span class="p">,</span><span class="n">lenx</span><span class="p">;</span>
</span><span class="line">    <span class="c">#s is maxlen * minlen</span>
</span><span class="line">    <span class="n">s</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">minlen</span><span class="p">)]</span>
</span><span class="line">    <span class="n">t</span><span class="o">=</span><span class="mi">0</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">maxlen</span><span class="p">):</span> <span class="c">#so, let x be the longer string!!!</span>
</span><span class="line">        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">minlen</span><span class="p">):</span>
</span><span class="line">            <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">y</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span> <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">t</span><span class="o">+</span><span class="mi">1</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span> <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="nb">max</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class="line">            <span class="n">t</span><span class="o">=</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">s</span>
</span><span class="line">
</span><span class="line"><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="s">&#39;abcde&#39;</span><span class="p">,</span><span class="s">&#39;oaobce&#39;</span>
</span><span class="line"><span class="n">s</span><span class="o">=</span><span class="n">lcs4</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="c">#[3, 3, 3, 3, 4]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/19/longest-common-subsequence/">http://hujiaweibujidao.github.io/blog/2014/05/19/longest-common-subsequence/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Algorithms: Matrix Chain]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/18/matrix-chain/"/>
    <updated>2014-05-18T16:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/18/matrix-chain</id>
    <content type="html"><![CDATA[<h4 id="centeralgorithms-matrix-chaincenter"><center>Algorithms: Matrix Chain</center></h4>

<p>矩阵链乘问题是最典型的动态规划问题，要理解下面的内容请先阅读<a href="http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-dynamic-programming/">这篇动态规划的总结</a>，嘿嘿</p>

<hr />

<p>矩阵链乘问题的描述如下，就是说要确定一个完全加括号的形式使得需要进行的标量计算数目最少，矩阵<script type="math/tex">A_{i}</script>的维数为<script type="math/tex">p_{i-1} \times p_{i}</script>，如果穷举所有可能形式的话，时间复杂度是指数级的！因为该问题满足最优子结构，并且子问题存在重叠，所以我们要借助动态规划来求解。</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/matrix.png" alt="image" /></p>

<p>我们需要确定一个递归式来将我们要求解的问题表示出来，下面摘自算法导论，介绍地非常详细
<img src="http://hujiaweibujidao.github.io/images/algos/matrix2.png" alt="image" /></p>

<p>最后给出的递归式如下，就是说我们要如何确定从第i个矩阵到第j个矩阵组成的矩阵链的最优解。如果i和j相等，那么就是一个矩阵，不需要运算；如果i小于j，那么肯定要从它们中间的某个位置分开来，那从哪里分开来呢? 这个我们可以尝试下所有可能的选择，也就是尝试不同的位置k，k满足条件(i &lt;= k &lt; j)，在位置k将矩阵链进行分开，看看它需要的计算次数，然后我们从这些可能的k中选择使得计算次数最小的那个k进行分开，分开了之后我们的问题就变成了2个小问题，确定矩阵链从i到k
和另一个矩阵链从k+1到j的最优解。如果我们一开始设置i=1(第一个矩阵)，j=n(最后一个矩阵)，那么，经过上面的递归即可得到我们需要的解。这就是递归的思想！</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

m[i][j]= \left\{ 
  \begin{array}{l l}
    0 & \quad \text{if i=j }\\
    min_{i \le k < j}{m[i][k]+m[k+1][j]+p_{i-1}p_{k}p_{j}} & \quad \text{if i<j}
  \end{array} \right.
 %]]&gt;</script>

<p>根据上面的思想我们很快就可以写出一个递归版本的矩阵链承法的实现代码，输出的结果也没有错，给出的加括号的方式是<code>( ( A1 ( A2 A3 ) ) ( ( A4 A5 ) A6 ) )</code>。[问题的数据是算法导论中的问题的数据，值是<code>30,35,15,5,10,20,25</code>]。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">matrixchain_rec</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">i</span><span class="o">==</span><span class="n">j</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">):</span>
</span><span class="line">        <span class="n">q</span><span class="o">=</span><span class="n">matrixchain_rec</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">k</span><span class="p">)</span><span class="o">+</span><span class="n">matrixchain_rec</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="p">)</span><span class="o">+</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="n">p</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">*</span><span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">        <span class="k">if</span> <span class="n">q</span><span class="o">&lt;</span><span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]:</span>
</span><span class="line">            <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">q</span>
</span><span class="line">            <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">k</span>
</span><span class="line">    <span class="k">return</span> <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">showmatrixchain</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">i</span><span class="o">==</span><span class="n">j</span><span class="p">:</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;A</span><span class="si">%d</span><span class="s">&#39;</span><span class="o">%</span><span class="p">(</span><span class="n">i</span><span class="p">),</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;(&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="n">showmatrixchain</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span>
</span><span class="line">        <span class="n">showmatrixchain</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="p">)</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;)&#39;</span><span class="p">,</span>
</span><span class="line">
</span><span class="line"><span class="n">n</span><span class="o">=</span><span class="mi">6</span>
</span><span class="line"><span class="n">p</span><span class="o">=</span><span class="p">[</span><span class="mi">30</span><span class="p">,</span><span class="mi">35</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">25</span><span class="p">]</span>
</span><span class="line"><span class="n">m</span><span class="o">=</span><span class="p">[[</span><span class="n">sys</span><span class="o">.</span><span class="n">maxint</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
</span><span class="line"><span class="n">s</span><span class="o">=</span><span class="p">[[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
</span><span class="line"><span class="c"># pprint.pprint(m)</span>
</span><span class="line"><span class="n">result</span><span class="o">=</span><span class="n">matrixchain_rec</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="c">#15125</span>
</span><span class="line"><span class="n">showmatrixchain</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span> <span class="c">#( ( A1 ( A2 A3 ) ) ( ( A4 A5 ) A6 ) )</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的代码运行没有问题，但是，它不够完美！为什么呢? 很明显，矩阵链乘问题子问题存在重叠，下面这张图很形象地显示了哪些子问题被重复计算了，所以我们需要改进，改进的方法就是使用带备忘录的递归形式！</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/matrix3.png" alt="image" /></p>

<p>要改成带备忘录的很简单，我们实现过几次了，但是，这次我们不能直接使用原来的装饰器，因为Python中的dict不能对list对象进行hash，所以我们要简单地修改下我们key值的构建，也很简单，看下代码就明白了：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">memo</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="n">cache</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line">    <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">wrap</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class="line">        <span class="c">#build new key!!!</span>
</span><span class="line">        <span class="n">key</span><span class="o">=</span><span class="nb">str</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
</span><span class="line">        <span class="k">if</span> <span class="n">key</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">cache</span><span class="p">:</span>
</span><span class="line">            <span class="n">cache</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="o">=</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">cache</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">wrap</span>
</span><span class="line">
</span><span class="line"><span class="nd">@memo</span>
</span><span class="line"><span class="k">def</span> <span class="nf">matrixchain_rec</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">i</span><span class="o">==</span><span class="n">j</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">):</span>
</span><span class="line">        <span class="n">q</span><span class="o">=</span><span class="n">matrixchain_rec</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">k</span><span class="p">)</span><span class="o">+</span><span class="n">matrixchain_rec</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="p">)</span><span class="o">+</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="n">p</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">*</span><span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">        <span class="k">if</span> <span class="n">q</span><span class="o">&lt;</span><span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]:</span>
</span><span class="line">            <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">q</span>
</span><span class="line">            <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">k</span>
</span><span class="line">    <span class="k">return</span> <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">showmatrixchain</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">i</span><span class="o">==</span><span class="n">j</span><span class="p">:</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;A</span><span class="si">%d</span><span class="s">&#39;</span><span class="o">%</span><span class="p">(</span><span class="n">i</span><span class="p">),</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;(&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="n">showmatrixchain</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span>
</span><span class="line">        <span class="n">showmatrixchain</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="p">)</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;)&#39;</span><span class="p">,</span>
</span><span class="line">
</span><span class="line"><span class="n">n</span><span class="o">=</span><span class="mi">6</span>
</span><span class="line"><span class="n">p</span><span class="o">=</span><span class="p">[</span><span class="mi">30</span><span class="p">,</span><span class="mi">35</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">25</span><span class="p">]</span>
</span><span class="line"><span class="n">m</span><span class="o">=</span><span class="p">[[</span><span class="n">sys</span><span class="o">.</span><span class="n">maxint</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
</span><span class="line"><span class="n">s</span><span class="o">=</span><span class="p">[[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
</span><span class="line"><span class="c"># pprint.pprint(m)</span>
</span><span class="line"><span class="n">result</span><span class="o">=</span><span class="n">matrixchain_rec</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="c">#15125</span>
</span><span class="line"><span class="n">showmatrixchain</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span> <span class="c">#( ( A1 ( A2 A3 ) ) ( ( A4 A5 ) A6 ) )</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>接下来的一个问题是，我们怎么实现迭代版本呢? 迭代版本关键在于顺序！我们怎么保证我们在计算$A<em>{i…j}$的最优解时，所有可能的k的选择需要求解的子问题$A</em>{i…k}$以及$A_{(k+1)…j}$是已经求解出来了的呢? 一个简单但是有效的想法就是看矩阵链的长度，我们先计算矩阵链短的最优解，然后再计算矩阵链长的最优解，后者计算时所需要求解的子问题肯定已经求解完了，对不对? 于是就有了迭代版本的实现，需要注意的就是其中的i,j,k的取值范围。</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line"><span class="k">def</span> <span class="nf">matrixchain_iter</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
</span><span class="line">    <span class="n">n</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span> <span class="c">#total n matrices 6</span>
</span><span class="line">    <span class="c">#to solve the problem below, so initialize to n+1!!!</span>
</span><span class="line">    <span class="n">m</span><span class="o">=</span><span class="p">[[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
</span><span class="line">    <span class="n">s</span><span class="o">=</span><span class="p">[[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
</span><span class="line">    <span class="c"># for i in range(n): #for matrix with len=1</span>
</span><span class="line">        <span class="c"># m[i][i]=0</span>
</span><span class="line">    <span class="c"># pprint.pprint(m)</span>
</span><span class="line">    <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span> <span class="c">#iterate the length, max is n</span>
</span><span class="line">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="o">-</span><span class="n">l</span><span class="o">+</span><span class="mi">2</span><span class="p">):</span> <span class="c">#i max is n-l+1</span>
</span><span class="line">            <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="n">l</span><span class="o">-</span><span class="mi">1</span> <span class="c">#j is always l away from i</span>
</span><span class="line">            <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">maxint</span> <span class="c">#initial to infinity</span>
</span><span class="line">            <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">):</span>
</span><span class="line">                <span class="c">#attention to python array when index &lt; 0!!!</span>
</span><span class="line">                <span class="c">#solution is using more space with useless values</span>
</span><span class="line">                <span class="n">q</span><span class="o">=</span><span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">k</span><span class="p">]</span><span class="o">+</span><span class="n">m</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">+</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="n">p</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">*</span><span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">                <span class="k">if</span> <span class="n">q</span><span class="o">&lt;</span><span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]:</span>
</span><span class="line">                    <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">q</span>
</span><span class="line">                    <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">k</span>
</span><span class="line">        <span class="c"># print(&#39;when len is %d &#39; % (l))</span>
</span><span class="line">        <span class="c"># pprint.pprint(m)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">m</span><span class="p">,</span><span class="n">s</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">m</span><span class="p">,</span><span class="n">s</span><span class="o">=</span><span class="n">matrixchain_iter</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">6</span><span class="p">])</span> <span class="c">#15125</span>
</span><span class="line"><span class="n">showmatrixchain</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span> <span class="c">#( ( A1 ( A2 A3 ) ) ( ( A4 A5 ) A6 ) )</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>实现的时候需要注意一点，在Python中取list中的值时，如果索引是负值的话会从后面往前数返回对应的元素，而以前我们用其他语言的时候肯定是提示越界了，所以代码中用来存储结果的数数组是(n+1)x(n+1)，而不是nxn的，这样的话就能够保证返回的是0，而不是从后往前数得到的结果。</p>

<p>得到的数组<code>m</code>如下，<code>m[1,6]</code>就是我们需要的解。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="p">[[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
</span><span class="line"> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">15750</span><span class="p">,</span> <span class="mi">7875</span><span class="p">,</span> <span class="mi">9375</span><span class="p">,</span> <span class="mi">11875</span><span class="p">,</span> <span class="mi">15125</span><span class="p">],</span>
</span><span class="line"> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2625</span><span class="p">,</span> <span class="mi">4375</span><span class="p">,</span> <span class="mi">7125</span><span class="p">,</span> <span class="mi">10500</span><span class="p">],</span>
</span><span class="line"> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">750</span><span class="p">,</span> <span class="mi">2500</span><span class="p">,</span> <span class="mi">5375</span><span class="p">],</span>
</span><span class="line"> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="mi">3500</span><span class="p">],</span>
</span><span class="line"> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">5000</span><span class="p">],</span>
</span><span class="line"> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>数组<code>s</code>如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="p">[[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
</span><span class="line"> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
</span><span class="line"> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
</span><span class="line"> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
</span><span class="line"> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>
</span><span class="line"> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>
</span><span class="line"> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>将这个两个数组旋转下，并且只看上三角部分的数字，就可以得到算法导论中给出的那张三角图形了，非常类似杨辉三角</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/matrixmulti.png" alt="image" /></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/18/matrix-chain/">http://hujiaweibujidao.github.io/blog/2014/05/18/matrix-chain/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Love you]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/18/love-you/"/>
    <updated>2014-05-18T00:07:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/18/love-you</id>
    <content type="html"><![CDATA[<p>G.E.M 邓紫棋 翻唱的《喜欢你》，真的太好听了！</p>

<audio width="300" height="32" style="margin: auto; top: 0; right: 0; bottom: 0; left: 0;" controls="controls" autoplay="autoplay" name="media" src="http://hujiaweibujidao.github.io/music/love-you.mp3">
</audio>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/18/love-you/">http://hujiaweibujidao.github.io/blog/2014/05/18/love-you/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Advances]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/16/python-tips2/"/>
    <updated>2014-05-16T10:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/16/python-tips2</id>
    <content type="html"><![CDATA[<p>关于Python的好文章集锦：</p>

<p>1.<a href="http://www.toptal.com/python/top-10-mistakes-that-python-programmers-make">Top 10 Mistakes that Python Programmers Make</a></p>

<p>2.<a href="http://pypix.com/python/advanced-data-structures-python/">Advanced Data Structures in Python</a></p>

<p><a href="http://blog.jobbole.com/65218/">中文翻译版本:Python高级数据结构</a></p>

<p>3.<a href="http://akaptur.github.io/blog/2013/11/15/introduction-to-the-python-interpreter/">Introduction to the Python Interpreter</a></p>

<p><a href="http://blog.jobbole.com/55327/">中文翻译版本:Python解释器简介</a></p>

<p>4.<a href="http://sahandsaba.com/python-iterators-generators.html">A Study of Python’s More Advanced Features</a></p>

<p><a href="http://blog.jobbole.com/66097/">中文翻译版本：Python高级特性</a></p>

<p>5.<a href="http://pypix.com/tools-and-tips/design-patterns-beginners/">Design Patterns for Beginners in Python</a></p>

<p><a href="http://blog.jobbole.com/62023/">中文翻译版本：Python设计模式入门</a></p>

<p>6.<a href="http://sahandsaba.com/thirty-python-language-features-and-tricks-you-may-not-know.html">30 Python Language Features and Tricks You May Not Know About</a></p>

<p><a href="http://blog.jobbole.com/63320/">中文翻译版本：30个Python编程技巧</a></p>

<p>7.描述器，元类，上下文管理库的介绍参见<a href="http://blog.jobbole.com/61171/">伯乐在线-python高级编程技巧</a></p>

<p>TO BE CONTINUED…</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/16/python-tips2/">http://hujiaweibujidao.github.io/blog/2014/05/16/python-tips2/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hadoop Installation - Single Node Setup]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/12/hadoop-installation/"/>
    <updated>2014-05-12T20:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/12/hadoop-installation</id>
    <content type="html"><![CDATA[<p>上学期在Mac上搭建好了Hadoop，因为这学期开学重装了系统就没了，以为不会再折腾，结果大数据作业又要整hadoop，于是乎，爱折腾的程序猿又来折腾咯，有过上一次安装的经历，这次简单多了，下面简单的列举主要步骤。</p>

<p>感谢下面两份教程：</p>

<p>1.[en]<a href="http://www.michael-noll.com/tutorials/writing-an-hadoop-mapreduce-program-in-python/">Running Hadoop on Ubuntu Linux (Single-Node Cluster)</a></p>

<p>2.[cn]<a href="http://www.tianjun.ml/essays/16">田俊童鞋的Hadoop的安装部署与配置</a></p>

<hr />

<p>1.下载部分</p>

<p>(0)你肯定不是安装到本地的啦，先安装VMware吧，我会告诉你这货需要序列号吗?</p>

<p>(1)Ubuntu：<a href="http://www.ubuntu.com/">http://www.ubuntu.com/</a></p>

<p>随便这个Desktop版本下载，我的是12.04 LTS</p>

<p>(2)JDK：<a href="http://hadoop.apache.org/">http://hadoop.apache.org/</a></p>

<p>个人喜欢从Oracle上下载JDK来安装，不喜欢<code>apt-get</code>模式，我使用的是<code>JDK1.7</code></p>

<p>(3)Hadoop：<a href="http://hadoop.apache.org/">http://hadoop.apache.org/</a></p>

<p>我使用的是上学期用的1.2.1版本，名称<code>hadoop-1.2.1-bin.tar.gz</code></p>

<p>2.配置Java环境 [该部分直接摘自我之前<a href="http://hujiaweibujidao.github.io/blog/2014/02/21/android-ndk-and-opencv-development-4/">Android和OpenCV开发中的配置</a>]</p>

<p>①下载<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Oracle JDK</a>，下载的版本是JDK1.7.0_40</p>

<p>②下载之后解压即可，解压路径为<code>/home/xface/android/jdk1.7.0</code></p>

<p>③打开终端，输入<code>sudo gedit /etc/profile</code>，在文件末尾添加下面内容</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">JAVA_HOME</span><span class="o">=/</span><span class="n">home</span><span class="o">/</span><span class="n">xface</span><span class="o">/</span><span class="n">android</span><span class="o">/</span><span class="n">jdk1</span><span class="o">.</span><span class="mf">7.0</span>
</span><span class="line"><span class="n">export</span> <span class="n">PATH</span><span class="o">=</span><span class="err">$</span><span class="n">JAVA_HOME</span><span class="o">/</span><span class="nb">bin</span><span class="p">:</span><span class="err">$</span><span class="n">PATH</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如下图所示，后面环境配置中添加内容也是如此</p>

<p><img src="http://hujiaweibujidao.github.io/images/201402/etcprofile.png" alt="image" /></p>

<p>④打开终端输入<code>java -version</code>进行测试</p>

<p><img src="http://hujiaweibujidao.github.io/images/201402/javaversion.png" alt="image" /></p>

<p>3.配置Hadoop环境</p>

<p>(1)添加账户和组</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">sudo</span> <span class="n">addgroup</span> <span class="n">hadoop</span>
</span><span class="line"><span class="n">sudo</span> <span class="n">adduser</span> <span class="o">--</span><span class="n">ingroup</span> <span class="n">hadoop</span> <span class="n">hduser</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(2)安装openssh-server，并配置公钥</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">update</span>
</span><span class="line"><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">openssh</span><span class="o">-</span><span class="n">server</span>
</span><span class="line"><span class="n">su</span> <span class="o">-</span> <span class="n">hduser</span>
</span><span class="line"><span class="n">ssh</span><span class="o">-</span><span class="n">keygen</span> <span class="o">-</span><span class="n">t</span> <span class="n">rsa</span> <span class="o">-</span><span class="n">P</span> <span class="s">&quot;&quot;</span>
</span><span class="line"><span class="n">cat</span> <span class="err">$</span><span class="n">HOME</span><span class="o">/.</span><span class="n">ssh</span><span class="o">/</span><span class="n">id_rsa</span><span class="o">.</span><span class="n">pub</span> <span class="o">&gt;&gt;</span> <span class="err">$</span><span class="n">HOME</span><span class="o">/.</span><span class="n">ssh</span><span class="o">/</span><span class="n">authorized_keys</span>
</span><span class="line"><span class="n">ssh</span> <span class="n">localhost</span> <span class="c">#测试</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(3)Disabling IPv6? </p>

<p>这步我没有操作，如果需要请参考上面的教程<a href="http://www.michael-noll.com/tutorials/writing-an-hadoop-mapreduce-program-in-python/">Running Hadoop on Ubuntu Linux (Single-Node Cluster)</a></p>

<p>(4)解压<code>hadoop-1.2.1-bin.tar.gz</code>，然后重命名为<code>hadoop</code>，接着修改文件夹所有者</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">mv</span> <span class="n">hadoop</span><span class="o">-</span><span class="mf">1.2</span><span class="o">.</span><span class="mi">1</span> <span class="n">hadoop</span>
</span><span class="line"><span class="n">chown</span> <span class="o">-</span><span class="n">R</span> <span class="n">hduser</span><span class="p">:</span><span class="n">hadoop</span> <span class="n">hadoop</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(5)修改文件<code>/etc/profile</code>中系统环境变量的配置</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#set hadoop environment</span>
</span><span class="line">
</span><span class="line"><span class="n">HADOOP_HOME</span><span class="o">=/</span><span class="n">home</span><span class="o">/</span><span class="n">xface</span><span class="o">/</span><span class="n">hadoop</span><span class="o">/</span><span class="n">hadoop</span>
</span><span class="line"><span class="n">export</span> <span class="n">PATH</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">PATH</span><span class="p">}:</span><span class="err">$</span><span class="p">{</span><span class="n">HADOOP_HOME</span><span class="p">}</span><span class="o">/</span><span class="nb">bin</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(6)在hadoop安装目录下新建临时文件目录<code>tmp</code>和日志文件目录<code>logs</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">sudo</span> <span class="n">mkdir</span> <span class="o">-</span><span class="n">p</span> <span class="n">tmp</span>
</span><span class="line"><span class="n">sudo</span> <span class="n">chown</span> <span class="n">hduser</span><span class="p">:</span><span class="n">hadoop</span> <span class="n">tmp</span>
</span><span class="line"><span class="c"># ...and if you want to tighten up security, chmod from 755 to 750...</span>
</span><span class="line"><span class="n">sudo</span> <span class="n">chmod</span> <span class="mi">750</span> <span class="n">tmp</span> <span class="c">#我习惯用777</span>
</span><span class="line"><span class="c">#logs的配置和tmp一样</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(7)配置hadoop的<code>conf</code>文件夹下的文件</p>

<p>①<code>hadoop-env.sh</code> 修改Java配置</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">export</span> <span class="n">JAVA_HOME</span><span class="o">=/</span><span class="n">home</span><span class="o">/</span><span class="n">xface</span><span class="o">/</span><span class="n">android</span><span class="o">/</span><span class="n">jdk1</span><span class="o">.</span><span class="mf">7.0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>②<code>core-site.xml</code> 添加下面的配置</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="o">&lt;</span><span class="nb">property</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span><span class="n">hadoop</span><span class="o">.</span><span class="n">tmp</span><span class="o">.</span><span class="n">dir</span><span class="o">&lt;/</span><span class="n">name</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">value</span><span class="o">&gt;/</span><span class="n">home</span><span class="o">/</span><span class="n">xface</span><span class="o">/</span><span class="n">hadoop</span><span class="o">/</span><span class="n">tmp</span><span class="o">&lt;/</span><span class="n">value</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">description</span><span class="o">&gt;</span><span class="n">A</span> <span class="n">base</span> <span class="k">for</span> <span class="n">other</span> <span class="n">temporary</span> <span class="n">directories</span><span class="o">.&lt;/</span><span class="n">description</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;/</span><span class="nb">property</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="o">&lt;</span><span class="nb">property</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span><span class="n">fs</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">name</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">value</span><span class="o">&gt;</span><span class="n">hdfs</span><span class="p">:</span><span class="o">//</span><span class="n">localhost</span><span class="p">:</span><span class="mi">9000</span><span class="o">&lt;/</span><span class="n">value</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">description</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">name</span> <span class="n">of</span> <span class="n">the</span> <span class="n">default</span> <span class="nb">file</span> <span class="n">system</span><span class="o">.</span>  <span class="n">A</span> <span class="n">URI</span> <span class="n">whose</span>
</span><span class="line">  <span class="n">scheme</span> <span class="ow">and</span> <span class="n">authority</span> <span class="n">determine</span> <span class="n">the</span> <span class="n">FileSystem</span> <span class="n">implementation</span><span class="o">.</span>  <span class="n">The</span>
</span><span class="line">  <span class="n">uri</span><span class="s">&#39;s scheme determines the config property (fs.SCHEME.impl) naming</span>
</span><span class="line">  <span class="n">the</span> <span class="n">FileSystem</span> <span class="n">implementation</span> <span class="n">class</span><span class="o">.</span>  <span class="n">The</span> <span class="n">uri</span><span class="s">&#39;s authority is used to</span>
</span><span class="line">  <span class="n">determine</span> <span class="n">the</span> <span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">etc</span><span class="o">.</span> <span class="k">for</span> <span class="n">a</span> <span class="n">filesystem</span><span class="o">.&lt;/</span><span class="n">description</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;/</span><span class="nb">property</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>③<code>mapred-site.xml</code> 添加下面的配置</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="o">&lt;</span><span class="nb">property</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span><span class="n">mapred</span><span class="o">.</span><span class="n">job</span><span class="o">.</span><span class="n">tracker</span><span class="o">&lt;/</span><span class="n">name</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">value</span><span class="o">&gt;</span><span class="n">localhost</span><span class="p">:</span><span class="mi">9001</span><span class="o">&lt;/</span><span class="n">value</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">description</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">host</span> <span class="ow">and</span> <span class="n">port</span> <span class="n">that</span> <span class="n">the</span> <span class="n">MapReduce</span> <span class="n">job</span> <span class="n">tracker</span> <span class="n">runs</span>
</span><span class="line">  <span class="n">at</span><span class="o">.</span>  <span class="n">If</span> <span class="s">&quot;local&quot;</span><span class="p">,</span> <span class="n">then</span> <span class="n">jobs</span> <span class="n">are</span> <span class="n">run</span> <span class="ow">in</span><span class="o">-</span><span class="n">process</span> <span class="k">as</span> <span class="n">a</span> <span class="n">single</span> <span class="nb">map</span>
</span><span class="line">  <span class="ow">and</span> <span class="nb">reduce</span> <span class="n">task</span><span class="o">.</span>
</span><span class="line">  <span class="o">&lt;/</span><span class="n">description</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;/</span><span class="nb">property</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>④<code>hdfs-site.xml</code> 添加下面的配置 [还可以配置namenode和datanode数据的保存位置，可以参见教程<a href="http://www.tianjun.ml/essays/16">田俊童鞋的Hadoop的安装部署与配置</a>]</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="o">&lt;</span><span class="nb">property</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span><span class="n">dfs</span><span class="o">.</span><span class="n">replication</span><span class="o">&lt;/</span><span class="n">name</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">value</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">&lt;/</span><span class="n">value</span><span class="o">&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="n">description</span><span class="o">&gt;</span><span class="n">Default</span> <span class="n">block</span> <span class="n">replication</span><span class="o">.</span>
</span><span class="line">  <span class="n">The</span> <span class="n">actual</span> <span class="n">number</span> <span class="n">of</span> <span class="n">replications</span> <span class="n">can</span> <span class="n">be</span> <span class="n">specified</span> <span class="n">when</span> <span class="n">the</span> <span class="nb">file</span> <span class="ow">is</span> <span class="n">created</span><span class="o">.</span>
</span><span class="line">  <span class="n">The</span> <span class="n">default</span> <span class="ow">is</span> <span class="n">used</span> <span class="k">if</span> <span class="n">replication</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">specified</span> <span class="ow">in</span> <span class="n">create</span> <span class="n">time</span><span class="o">.</span>
</span><span class="line">  <span class="o">&lt;/</span><span class="n">description</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;/</span><span class="nb">property</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(8)格式化namenode</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">hduser</span><span class="nd">@ubuntu</span><span class="p">:</span><span class="o">~</span><span class="err">$</span> <span class="n">hadoop</span> <span class="n">namenode</span> <span class="o">-</span><span class="n">format</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(9)执行<code>start-all.sh</code>启动测试</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">hduser</span><span class="nd">@ubuntu</span><span class="p">:</span><span class="o">~</span><span class="err">$</span> <span class="n">start</span><span class="o">-</span><span class="nb">all</span><span class="o">.</span><span class="n">sh</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(10)执行<code>jps</code>查看进程</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">hduser</span><span class="nd">@ubuntu</span><span class="p">:</span><span class="o">~</span><span class="err">$</span> <span class="n">jps</span>
</span><span class="line"><span class="mi">5620</span> <span class="n">JobTracker</span>
</span><span class="line"><span class="mi">5313</span> <span class="n">DataNode</span>
</span><span class="line"><span class="mi">5541</span> <span class="n">SecondaryNameNode</span>
</span><span class="line"><span class="mi">5897</span> <span class="n">Jps</span>
</span><span class="line"><span class="mi">5851</span> <span class="n">TaskTracker</span>
</span><span class="line"><span class="mi">5041</span> <span class="n">NameNode</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>OK！恭喜你！至此安装过程就大功告成了！如果比较心急，可以按照<a href="http://www.michael-noll.com/tutorials/running-hadoop-on-ubuntu-linux-single-node-cluster/#running-a-mapreduce-job">推荐的教程</a>运行个MapReduce任务试试看啦，哈哈哈</p>

<p>如果你需要配置成集群模式的话还是可以参考好友<a href="http://www.tianjun.ml/essays/16">田俊童鞋的Hadoop的安装部署与配置</a>，如果喜欢的话不防看下好友的这篇<a href="http://www.tianjun.ml/essays/19">【翻译】Writing an Hadoop MapReduce Program in Python</a>，不能推荐的更多，哈哈哈</p>

<p>安装过程中所有执行的命令及其输出见<a href="https://gist.github.com/hujiaweibujidao/a83fca7b7f40d0029c60">这个Gist</a></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/12/hadoop-installation/">http://hujiaweibujidao.github.io/blog/2014/05/12/hadoop-installation/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PageRank]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/12/algorithms-pagerank/"/>
    <updated>2014-05-12T18:12:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/12/algorithms-pagerank</id>
    <content type="html"><![CDATA[<p><strong><center>ML/DM/PR算法系列</center></strong>
<strong><center>逸夫图书馆, 2014/5/17</center></strong></p>

<h3 id="centerpagerankcenter"><center>PageRank算法</center></h3>

<p>PageRank算法是谷歌曾经独步天下的“倚天剑”，该算法由Larry Page和Sergey Brin在斯坦福大学读研时发明的，<a href="http://ilpubs.stanford.edu:8090/422/1/1999-66.pdf">论文点击下载: The PageRank Citation Ranking: Bringing Order to the Web</a>。</p>

<p>本文首先通过一些参考文献引出问题，然后给出了PageRank的几种实现算法，最后将其推广至在MapReduce框架下如何实现PageRank算法。</p>

<p>PageRank的核心思想有2点：</p>

<p>1.如果一个网页被很多其他网页链接到的话说明这个网页比较重要，也就是pagerank值会相对较高；</p>

<p>2.如果一个pagerank值很高的网页链接到一个其他的网页，那么被链接到的网页的pagerank值会相应地因此而提高。</p>

<p>下面是一张来自<a href="http://en.wikipedia.org/wiki/PageRank">WikiPedia</a>的图，每个球代表一个网页，球的大小反应了网页的pagerank值的大小。指向网页B和网页E的链接很多，所以B和E的pagerank值较高，另外，虽然很少有网页指向C，但是最重要的网页B指向了C，所以C的pagerank值比E还要大。</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/pagerank-fig.png" alt="image" /></p>

<p>参考内容：</p>

<p>1.<a href="http://en.wikipedia.org/wiki/PageRank">Wiki about PageRank</a></p>

<p>2.<a href="http://www.itlearner.com/good/pagerank_cn.htm">Google 的秘密- PageRank 彻底解说 中文版</a></p>

<p>3.<a href="http://book.douban.com/subject/7161824/">数值分析与算法</a> Page 161 应用实例：Google的PageRank算法</p>

<p>4.<a href="http://www.mathworks.cn/moler/chapters.html">Numeric Methods with Matlab</a> 或者<a href="http://book.douban.com/subject/1836464/">中文翻译版本Matlab数值计算</a></p>

<p>5.<a href="http://www.chenjunlu.com/2012/10/pagerank-on-mapreduce/">使用 MapReduce 思想计算 PageRank</a> Page 62 PageRank和马尔可夫链</p>

<h3 id="section">1.问题背景</h3>

<p>来自参考内容3</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/pk-1.png" alt="image" /></p>

<h3 id="section-1">2.数学建模</h3>

<p>来自参考内容3，理解网页连接矩阵$G$，马尔科夫过程(“网上冲浪”)，转移矩阵$A$，概率$p$为用户点击当前网页中的某个链接地址的概率(一般都为0.85)。</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/pk-2.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/algos/pk-3.png" alt="image" /></p>

<p>最后得到一个等式$Ax=x$，这实际上就是求矩阵$A$的特征值为1的特征向量！</p>

<p>下面的内容使用圆盘定理解释了1是矩阵$A$的主特征值，所以我们可以使用幂法来求解。</p>

<p>关于幂法的详细介绍参考另一篇文章<a href="http://hujiaweibujidao.github.io/blog/2014/04/23/numerical-methods-using-matlab/">Numerical Methods Using Matlab: 第三章 矩阵特征值和奇异值求解</a></p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/pk-4.png" alt="image" />
<img src="http://hujiaweibujidao.github.io/images/algos/pk-5.png" alt="image" /></p>

<!--
![image](http://hujiaweibujidao.github.io/images/algos/pk-6.png)
-->

<h3 id="pagerank">3.求解PageRank</h3>

<p>假设有如上图右侧所示的网页链接模型。</p>

<p>(1) 幂法</p>

<p>wiki上有一个PageRank的简便算法，它不考虑转移概率，而是采用的是迭代的方式，每次都更新所有网页的pagerank值，更新的方式就是将每个网页的pagerank值平摊分给它指向的所有网页，每个网页累计所有指向它的网页平摊给它的值作为它该回合的pagerank值，直到全部网页的pagerank值收敛了或者满足一定的阈值条件就停止。</p>

<p>后面的MapReduce框架下PageRank算法的实现就采用了这个思想。考虑转移概率的情况和这个算法类似，乘上一个转移概率再加上一个随机跳转的概率。</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/pagerank-Simplified-algorithm.png" alt="image" /></p>

<p>根据上面的思想，下面Matlab代码实现可以得到各个网页的PageRank值。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="matlab"><span class="line"><span class="n">n</span><span class="p">=</span>6<span class="p">;</span>
</span><span class="line"><span class="nb">i</span><span class="p">=[</span>2 3 4 4 5 6 1 6 1<span class="p">];</span>
</span><span class="line"><span class="nb">j</span><span class="p">=[</span>1 2 2 3 3 3 4 5 6<span class="p">];</span>
</span><span class="line"><span class="n">G</span><span class="p">=</span><span class="n">sparse</span><span class="p">(</span><span class="nb">i</span><span class="p">,</span><span class="nb">j</span><span class="p">,</span>1<span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c">% Power method</span>
</span><span class="line"><span class="k">for</span> <span class="nb">j</span> <span class="p">=</span> 1<span class="p">:</span><span class="n">n</span>
</span><span class="line">   <span class="n">L</span><span class="p">{</span><span class="nb">j</span><span class="p">}</span> <span class="p">=</span> <span class="nb">find</span><span class="p">(</span><span class="n">G</span><span class="p">(:,</span><span class="nb">j</span><span class="p">));</span>
</span><span class="line">   <span class="n">c</span><span class="p">(</span><span class="nb">j</span><span class="p">)</span> <span class="p">=</span> <span class="nb">length</span><span class="p">(</span><span class="n">L</span><span class="p">{</span><span class="nb">j</span><span class="p">});</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">p</span> <span class="p">=</span> <span class="p">.</span>85<span class="p">;</span>
</span><span class="line"><span class="n">delta</span> <span class="p">=</span> <span class="p">(</span>1<span class="o">-</span><span class="n">p</span><span class="p">)</span><span class="o">/</span><span class="n">n</span><span class="p">;</span>
</span><span class="line"><span class="n">x</span> <span class="p">=</span> <span class="nb">ones</span><span class="p">(</span><span class="n">n</span><span class="p">,</span>1<span class="p">)</span><span class="o">/</span><span class="n">n</span><span class="p">;</span>
</span><span class="line"><span class="n">z</span> <span class="p">=</span> <span class="nb">zeros</span><span class="p">(</span><span class="n">n</span><span class="p">,</span>1<span class="p">);</span>
</span><span class="line"><span class="n">cnt</span> <span class="p">=</span> 0<span class="p">;</span>
</span><span class="line"><span class="k">while</span> <span class="n">max</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="n">z</span><span class="p">))</span> <span class="o">&gt;</span> <span class="p">.</span>0001
</span><span class="line">   <span class="n">z</span> <span class="p">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class="line">   <span class="n">x</span> <span class="p">=</span> <span class="nb">zeros</span><span class="p">(</span><span class="n">n</span><span class="p">,</span>1<span class="p">);</span>
</span><span class="line">   <span class="k">for</span> <span class="nb">j</span> <span class="p">=</span> 1<span class="p">:</span><span class="n">n</span>
</span><span class="line">      <span class="k">if</span> <span class="n">c</span><span class="p">(</span><span class="nb">j</span><span class="p">)</span> <span class="o">==</span> 0
</span><span class="line">         <span class="n">x</span> <span class="p">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">z</span><span class="p">(</span><span class="nb">j</span><span class="p">)</span><span class="o">/</span><span class="n">n</span><span class="p">;</span><span class="c">%转移到任意一个网页</span>
</span><span class="line">      <span class="k">else</span>
</span><span class="line">         <span class="n">x</span><span class="p">(</span><span class="n">L</span><span class="p">{</span><span class="nb">j</span><span class="p">})</span> <span class="p">=</span> <span class="n">x</span><span class="p">(</span><span class="n">L</span><span class="p">{</span><span class="nb">j</span><span class="p">})</span> <span class="o">+</span> <span class="n">z</span><span class="p">(</span><span class="nb">j</span><span class="p">)</span><span class="o">/</span><span class="n">c</span><span class="p">(</span><span class="nb">j</span><span class="p">);</span><span class="c">%将上次的pagerank值平摊给所有指向的网页</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">   <span class="k">end</span>
</span><span class="line">   <span class="n">x</span> <span class="p">=</span> <span class="n">p</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">delta</span><span class="p">;</span>
</span><span class="line">   <span class="n">cnt</span> <span class="p">=</span> <span class="n">cnt</span><span class="o">+</span>1<span class="p">;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>得到的向量$x$保存了各个网页的pagerank值，虽然链接数目一样，但是网页①比网页④和网页⑤都高，而网页②的pagerank值第二高，因为网页①链接到了它上面，相当于沾了网页①的光。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="matlab"><span class="line"><span class="n">x</span> <span class="p">=</span>
</span><span class="line">    0<span class="p">.</span>2675
</span><span class="line">    0<span class="p">.</span>2524
</span><span class="line">    0<span class="p">.</span>1323
</span><span class="line">    0<span class="p">.</span>1698
</span><span class="line">    0<span class="p">.</span>0625
</span><span class="line">    0<span class="p">.</span>1156
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="http://www.chenjunlu.com/2012/09/pagerank-algorithm-implemented-in-python/">这篇文章给出该算法的一个Python版本实现</a>，该博主使用第三方模块<a href="https://code.google.com/p/python-graph/">python-graph</a>，python-graph模块实现了很多图算法，<a href="https://code.google.com/p/python-graph/wiki/Example">该模块的使用示例</a>，使用前需要先安装，代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">easy_install</span> <span class="n">python</span><span class="o">-</span><span class="n">graph</span><span class="o">-</span><span class="n">core</span>
</span><span class="line"><span class="n">easy_install</span> <span class="n">python</span><span class="o">-</span><span class="n">graph</span><span class="o">-</span><span class="n">dot</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Python版本的算法实现：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># coding=utf-8</span>
</span><span class="line">
</span><span class="line"><span class="c"># python-graph https://code.google.com/p/python-graph/</span>
</span><span class="line">
</span><span class="line"><span class="c"># Import graphviz</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">graphviz</span> <span class="kn">as</span> <span class="nn">gv</span>
</span><span class="line">
</span><span class="line"><span class="c"># Import pygraph</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">pygraph.classes.digraph</span> <span class="kn">import</span> <span class="n">digraph</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">pygraph.readwrite.dot</span> <span class="kn">import</span> <span class="n">write</span>
</span><span class="line">
</span><span class="line"><span class="c"># Define pagerank function</span>
</span><span class="line"><span class="k">def</span> <span class="nf">pagerank</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">damping_factor</span><span class="o">=</span><span class="mf">0.85</span><span class="p">,</span> <span class="n">max_iterations</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> \
</span><span class="line">             <span class="n">min_delta</span><span class="o">=</span><span class="mf">0.00001</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    Compute and return the PageRank in an directed graph.</span>
</span><span class="line">
</span><span class="line"><span class="sd">    @type  graph: digraph</span>
</span><span class="line"><span class="sd">    @param graph: Digraph.</span>
</span><span class="line">
</span><span class="line"><span class="sd">    @type  damping_factor: number</span>
</span><span class="line"><span class="sd">    @param damping_factor: PageRank dumping factor.</span>
</span><span class="line">
</span><span class="line"><span class="sd">    @type  max_iterations: number</span>
</span><span class="line"><span class="sd">    @param max_iterations: Maximum number of iterations.</span>
</span><span class="line">
</span><span class="line"><span class="sd">    @type  min_delta: number</span>
</span><span class="line"><span class="sd">    @param min_delta: Smallest variation required for a new iteration.</span>
</span><span class="line">
</span><span class="line"><span class="sd">    @rtype:  Dict</span>
</span><span class="line"><span class="sd">    @return: Dict containing all the nodes PageRank.</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="n">nodes</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="n">nodes</span><span class="p">()</span>
</span><span class="line">    <span class="n">graph_size</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">nodes</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">graph_size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="p">{}</span>
</span><span class="line">    <span class="c"># value for nodes without inbound links</span>
</span><span class="line">    <span class="n">min_value</span> <span class="o">=</span> <span class="p">(</span><span class="mf">1.0</span><span class="o">-</span><span class="n">damping_factor</span><span class="p">)</span><span class="o">/</span><span class="n">graph_size</span>
</span><span class="line">
</span><span class="line">    <span class="c"># itialize the page rank dict with 1/N for all nodes</span>
</span><span class="line">    <span class="c">#pagerank = dict.fromkeys(nodes, 1.0/graph_size)</span>
</span><span class="line">    <span class="n">pagerank</span> <span class="o">=</span> <span class="nb">dict</span><span class="o">.</span><span class="n">fromkeys</span><span class="p">(</span><span class="n">nodes</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_iterations</span><span class="p">):</span>
</span><span class="line">        <span class="n">diff</span> <span class="o">=</span> <span class="mi">0</span> <span class="c">#total difference compared to last iteraction</span>
</span><span class="line">        <span class="c"># computes each node PageRank based on inbound links</span>
</span><span class="line">        <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">nodes</span><span class="p">:</span>
</span><span class="line">            <span class="n">rank</span> <span class="o">=</span> <span class="n">min_value</span>
</span><span class="line">            <span class="k">for</span> <span class="n">referring_page</span> <span class="ow">in</span> <span class="n">graph</span><span class="o">.</span><span class="n">incidents</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
</span><span class="line">                <span class="n">rank</span> <span class="o">+=</span> <span class="n">damping_factor</span> <span class="o">*</span> <span class="n">pagerank</span><span class="p">[</span><span class="n">referring_page</span><span class="p">]</span> <span class="o">/</span> \
</span><span class="line">                        <span class="nb">len</span><span class="p">(</span><span class="n">graph</span><span class="o">.</span><span class="n">neighbors</span><span class="p">(</span><span class="n">referring_page</span><span class="p">))</span>
</span><span class="line">
</span><span class="line">            <span class="n">diff</span> <span class="o">+=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">pagerank</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="o">-</span> <span class="n">rank</span><span class="p">)</span>
</span><span class="line">            <span class="n">pagerank</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="o">=</span> <span class="n">rank</span>
</span><span class="line">
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;This is NO.</span><span class="si">%s</span><span class="s"> iteration&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">        <span class="k">print</span> <span class="n">pagerank</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;&#39;</span>
</span><span class="line">
</span><span class="line">        <span class="c">#stop if PageRank has converged</span>
</span><span class="line">        <span class="k">if</span> <span class="n">diff</span> <span class="o">&lt;</span> <span class="n">min_delta</span><span class="p">:</span>
</span><span class="line">            <span class="k">break</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">pagerank</span>
</span><span class="line">
</span><span class="line"><span class="c"># Graph creation</span>
</span><span class="line"><span class="n">gr</span> <span class="o">=</span> <span class="n">digraph</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c"># Add nodes and edges</span>
</span><span class="line"><span class="n">gr</span><span class="o">.</span><span class="n">add_nodes</span><span class="p">([</span><span class="s">&quot;1&quot;</span><span class="p">,</span><span class="s">&quot;2&quot;</span><span class="p">,</span><span class="s">&quot;3&quot;</span><span class="p">,</span><span class="s">&quot;4&quot;</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="n">gr</span><span class="o">.</span><span class="n">add_edge</span><span class="p">((</span><span class="s">&quot;1&quot;</span><span class="p">,</span><span class="s">&quot;2&quot;</span><span class="p">))</span>
</span><span class="line"><span class="n">gr</span><span class="o">.</span><span class="n">add_edge</span><span class="p">((</span><span class="s">&quot;1&quot;</span><span class="p">,</span><span class="s">&quot;3&quot;</span><span class="p">))</span>
</span><span class="line"><span class="n">gr</span><span class="o">.</span><span class="n">add_edge</span><span class="p">((</span><span class="s">&quot;1&quot;</span><span class="p">,</span><span class="s">&quot;4&quot;</span><span class="p">))</span>
</span><span class="line"><span class="n">gr</span><span class="o">.</span><span class="n">add_edge</span><span class="p">((</span><span class="s">&quot;2&quot;</span><span class="p">,</span><span class="s">&quot;3&quot;</span><span class="p">))</span>
</span><span class="line"><span class="n">gr</span><span class="o">.</span><span class="n">add_edge</span><span class="p">((</span><span class="s">&quot;2&quot;</span><span class="p">,</span><span class="s">&quot;4&quot;</span><span class="p">))</span>
</span><span class="line"><span class="n">gr</span><span class="o">.</span><span class="n">add_edge</span><span class="p">((</span><span class="s">&quot;3&quot;</span><span class="p">,</span><span class="s">&quot;4&quot;</span><span class="p">))</span>
</span><span class="line"><span class="n">gr</span><span class="o">.</span><span class="n">add_edge</span><span class="p">((</span><span class="s">&quot;4&quot;</span><span class="p">,</span><span class="s">&quot;2&quot;</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="c"># Draw as PNG</span>
</span><span class="line"><span class="c"># dot = write(gr)</span>
</span><span class="line"><span class="c"># gvv = gv.readstring(dot)</span>
</span><span class="line"><span class="c"># gv.layout(gvv,&#39;dot&#39;)</span>
</span><span class="line"><span class="c"># gv.render(gvv,&#39;png&#39;,&#39;Model.png&#39;)</span>
</span><span class="line">
</span><span class="line"><span class="n">pagerank</span><span class="p">(</span><span class="n">gr</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>经过32次迭代之后得到的结果如下，和前面的结果一致：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">This</span> <span class="ow">is</span> <span class="n">NO</span><span class="o">.</span><span class="mi">32</span> <span class="n">iteration</span>
</span><span class="line"><span class="p">{</span><span class="s">&#39;1&#39;</span><span class="p">:</span> <span class="mf">0.2675338708706491</span><span class="p">,</span> <span class="s">&#39;3&#39;</span><span class="p">:</span> <span class="mf">0.13227261904986046</span><span class="p">,</span> <span class="s">&#39;2&#39;</span><span class="p">:</span> <span class="mf">0.2524037902400518</span><span class="p">,</span> <span class="s">&#39;5&#39;</span><span class="p">:</span> <span class="mf">0.062477242064127136</span><span class="p">,</span> <span class="s">&#39;4&#39;</span><span class="p">:</span> <span class="mf">0.1697488529161491</span><span class="p">,</span> <span class="s">&#39;6&#39;</span><span class="p">:</span> <span class="mf">0.1155828978186352</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(2) 利用马尔可夫矩阵的特殊结构</p>

<p>来自参考内容4，其中$\delta=\frac{1-p}{n}$</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/pk-8.png" alt="image" /></p>

<p>也就是将矩阵$A$进行分解，并不需要显示求出矩阵$A$，然后便是求解一个线性方程组即可。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="matlab"><span class="line"><span class="k">function</span><span class="w"> </span>x <span class="p">=</span><span class="w"> </span><span class="nf">pagerank1</span><span class="p">(</span>G<span class="p">)</span><span class="w"></span>
</span><span class="line"><span class="c">% PAGERANK1  Google&#39;s PageRank modified version 1 - hujiawei</span>
</span><span class="line">
</span><span class="line"><span class="c">%if nargin &lt; 3, p = .85; end</span>
</span><span class="line"><span class="n">p</span><span class="p">=</span>0<span class="p">.</span>85<span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c">% Eliminate any self-referential links</span>
</span><span class="line">
</span><span class="line"><span class="n">G</span> <span class="p">=</span> <span class="n">G</span> <span class="o">-</span> <span class="nb">diag</span><span class="p">(</span><span class="nb">diag</span><span class="p">(</span><span class="n">G</span><span class="p">));</span>
</span><span class="line">
</span><span class="line"><span class="c">% c = out-degree, r = in-degree</span>
</span><span class="line">
</span><span class="line"><span class="p">[</span><span class="n">n</span><span class="p">,</span><span class="n">n</span><span class="p">]</span> <span class="p">=</span> <span class="nb">size</span><span class="p">(</span><span class="n">G</span><span class="p">);</span>
</span><span class="line"><span class="n">c</span> <span class="p">=</span> <span class="n">sum</span><span class="p">(</span><span class="n">G</span><span class="p">,</span>1<span class="p">);</span><span class="c">%each row&#39;s sum</span>
</span><span class="line"><span class="n">r</span> <span class="p">=</span> <span class="n">sum</span><span class="p">(</span><span class="n">G</span><span class="p">,</span>2<span class="p">);</span><span class="c">%each col&#39;s sum</span>
</span><span class="line">
</span><span class="line"><span class="c">% Scale column sums to be 1 (or 0 where there are no out links).</span>
</span><span class="line">
</span><span class="line"><span class="n">k</span> <span class="p">=</span> <span class="nb">find</span><span class="p">(</span><span class="n">c</span><span class="o">~=</span>0<span class="p">);</span>
</span><span class="line"><span class="n">D</span> <span class="p">=</span> <span class="n">sparse</span><span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">k</span><span class="p">,</span>1<span class="o">./</span><span class="n">c</span><span class="p">(</span><span class="n">k</span><span class="p">),</span><span class="n">n</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c">% Solve (I - p*G*D)*x = e</span>
</span><span class="line">
</span><span class="line"><span class="n">e</span> <span class="p">=</span> <span class="nb">ones</span><span class="p">(</span><span class="n">n</span><span class="p">,</span>1<span class="p">);</span>
</span><span class="line"><span class="n">I</span> <span class="p">=</span> <span class="n">speye</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>
</span><span class="line"><span class="n">x</span> <span class="p">=</span> <span class="p">(</span><span class="n">I</span> <span class="o">-</span> <span class="n">p</span><span class="o">*</span><span class="n">G</span><span class="o">*</span><span class="n">D</span><span class="p">)</span><span class="o">\</span><span class="n">e</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c">% Normalize so that sum(x) == 1.</span>
</span><span class="line">
</span><span class="line"><span class="n">x</span> <span class="p">=</span> <span class="n">x</span><span class="o">/</span><span class="n">sum</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(3) 巧妙解法：逆迭代算法</p>

<p>巧妙利用Matlab中的精度误差导致原本是一个奇异矩阵的$I-A$变成一个非奇异矩阵，运行时只是会有些警告提示，但是运行结果和其他算法一样。</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/pk-9.png" alt="image" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class="matlab"><span class="line"><span class="k">function</span><span class="w"> </span>x <span class="p">=</span><span class="w"> </span><span class="nf">pagerank2</span><span class="p">(</span>G<span class="p">)</span><span class="w"></span>
</span><span class="line"><span class="c">% PAGERANK1  Google&#39;s PageRank modified version 2 - hujiawei</span>
</span><span class="line"><span class="c">% using inverse iteration method</span>
</span><span class="line">
</span><span class="line"><span class="c">%if nargin &lt; 3, p = .85; end</span>
</span><span class="line"><span class="n">p</span><span class="p">=</span>0<span class="p">.</span>85<span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c">% Eliminate any self-referential links</span>
</span><span class="line">
</span><span class="line"><span class="n">G</span> <span class="p">=</span> <span class="n">G</span> <span class="o">-</span> <span class="nb">diag</span><span class="p">(</span><span class="nb">diag</span><span class="p">(</span><span class="n">G</span><span class="p">));</span>
</span><span class="line">
</span><span class="line"><span class="c">% c = out-degree, r = in-degree</span>
</span><span class="line">
</span><span class="line"><span class="p">[</span><span class="n">n</span><span class="p">,</span><span class="n">n</span><span class="p">]</span> <span class="p">=</span> <span class="nb">size</span><span class="p">(</span><span class="n">G</span><span class="p">);</span>
</span><span class="line"><span class="n">c</span> <span class="p">=</span> <span class="n">sum</span><span class="p">(</span><span class="n">G</span><span class="p">,</span>1<span class="p">);</span><span class="c">%each row&#39;s sum</span>
</span><span class="line"><span class="n">r</span> <span class="p">=</span> <span class="n">sum</span><span class="p">(</span><span class="n">G</span><span class="p">,</span>2<span class="p">);</span><span class="c">%each col&#39;s sum</span>
</span><span class="line">
</span><span class="line"><span class="c">% Scale column sums to be 1 (or 0 where there are no out links).</span>
</span><span class="line">
</span><span class="line"><span class="n">k</span> <span class="p">=</span> <span class="nb">find</span><span class="p">(</span><span class="n">c</span><span class="o">~=</span>0<span class="p">);</span>
</span><span class="line"><span class="n">D</span> <span class="p">=</span> <span class="n">sparse</span><span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">k</span><span class="p">,</span>1<span class="o">./</span><span class="n">c</span><span class="p">(</span><span class="n">k</span><span class="p">),</span><span class="n">n</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c">% Solve (I - p*G*D)*x = e</span>
</span><span class="line">
</span><span class="line"><span class="n">e</span> <span class="p">=</span> <span class="nb">ones</span><span class="p">(</span><span class="n">n</span><span class="p">,</span>1<span class="p">);</span>
</span><span class="line"><span class="n">I</span> <span class="p">=</span> <span class="n">speye</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>
</span><span class="line"><span class="c">% x = (I - p*G*D)\e;</span>
</span><span class="line"><span class="n">delta</span><span class="p">=(</span>1<span class="o">-</span><span class="n">p</span><span class="p">)</span><span class="o">/</span><span class="n">n</span><span class="p">;</span>
</span><span class="line"><span class="n">A</span><span class="p">=</span><span class="n">p</span><span class="o">*</span><span class="n">G</span><span class="o">*</span><span class="n">D</span><span class="o">+</span><span class="n">delta</span><span class="p">;</span>
</span><span class="line"><span class="n">x</span><span class="p">=(</span><span class="n">I</span><span class="o">-</span><span class="n">A</span><span class="p">)</span><span class="o">\</span><span class="n">e</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c">% Normalize so that sum(x) == 1.</span>
</span><span class="line">
</span><span class="line"><span class="n">x</span> <span class="p">=</span> <span class="n">x</span><span class="o">/</span><span class="n">sum</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后，附上参考内容4中给出的一份好代码，用于模拟随机冲浪生成矩阵$G$的代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
</pre></td><td class="code"><pre><code class="matlab"><span class="line"><span class="k">function</span><span class="w"> </span>[U,G] <span class="p">=</span><span class="w"> </span><span class="nf">surfer</span><span class="p">(</span>root,n<span class="p">)</span><span class="w"></span>
</span><span class="line"><span class="c">% SURFER  Create the adjacency graph of a portion of the Web.</span>
</span><span class="line"><span class="c">%    [U,G] = surfer(root,n) starts at the URL root and follows</span>
</span><span class="line"><span class="c">%    Web links until it forms an adjacency graph with n nodes.</span>
</span><span class="line"><span class="c">%    U = a cell array of n strings, the URLs of the nodes.</span>
</span><span class="line"><span class="c">%    G = an n-by-n sparse matrix with G(i,j)=1 if node j is linked to node i.</span>
</span><span class="line"><span class="c">%</span>
</span><span class="line"><span class="c">%    Example:  [U,G] = surfer(&#39;http://www.harvard.edu&#39;,500);</span>
</span><span class="line"><span class="c">%    See also PAGERANK.</span>
</span><span class="line"><span class="c">%</span>
</span><span class="line"><span class="c">%    This function currently has two defects.  (1) The algorithm for</span>
</span><span class="line"><span class="c">%    finding links is naive.  We just look for the string &#39;http:&#39;.</span>
</span><span class="line"><span class="c">%    (2) An attempt to read from a URL that is accessible, but very slow,</span>
</span><span class="line"><span class="c">%    might take an unacceptably long time to complete.  In some cases,</span>
</span><span class="line"><span class="c">%    it may be necessary to have the operating system terminate MATLAB.</span>
</span><span class="line"><span class="c">%    Key words from such URLs can be added to the skip list in surfer.m.</span>
</span><span class="line">
</span><span class="line"><span class="c">% Initialize</span>
</span><span class="line">
</span><span class="line"><span class="n">clf</span>
</span><span class="line"><span class="n">shg</span>
</span><span class="line"><span class="n">set</span><span class="p">(</span><span class="n">gcf</span><span class="p">,</span><span class="s">&#39;doublebuffer&#39;</span><span class="p">,</span><span class="s">&#39;on&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">axis</span><span class="p">([</span>0 <span class="n">n</span> 0 <span class="n">n</span><span class="p">])</span>
</span><span class="line"><span class="n">axis</span> <span class="n">square</span>
</span><span class="line"><span class="n">axis</span> <span class="n">ij</span>
</span><span class="line"><span class="n">box</span> <span class="n">on</span>
</span><span class="line"><span class="n">set</span><span class="p">(</span><span class="n">gca</span><span class="p">,</span><span class="s">&#39;position&#39;</span><span class="p">,[.</span>12 <span class="p">.</span>20 <span class="p">.</span>78 <span class="p">.</span>78<span class="p">])</span>
</span><span class="line"><span class="n">uicontrol</span><span class="p">(</span><span class="s">&#39;style&#39;</span><span class="p">,</span><span class="s">&#39;frame&#39;</span><span class="p">,</span><span class="s">&#39;units&#39;</span><span class="p">,</span><span class="s">&#39;normal&#39;</span><span class="p">,</span><span class="s">&#39;position&#39;</span><span class="p">,[.</span>01 <span class="p">.</span>09 <span class="p">.</span>98 <span class="p">.</span>07<span class="p">]);</span>
</span><span class="line"><span class="n">uicontrol</span><span class="p">(</span><span class="s">&#39;style&#39;</span><span class="p">,</span><span class="s">&#39;frame&#39;</span><span class="p">,</span><span class="s">&#39;units&#39;</span><span class="p">,</span><span class="s">&#39;normal&#39;</span><span class="p">,</span><span class="s">&#39;position&#39;</span><span class="p">,[.</span>01 <span class="p">.</span>01 <span class="p">.</span>98 <span class="p">.</span>07<span class="p">]);</span>
</span><span class="line"><span class="n">t1</span> <span class="p">=</span> <span class="n">uicontrol</span><span class="p">(</span><span class="s">&#39;style&#39;</span><span class="p">,</span><span class="s">&#39;text&#39;</span><span class="p">,</span><span class="s">&#39;units&#39;</span><span class="p">,</span><span class="s">&#39;normal&#39;</span><span class="p">,</span><span class="s">&#39;position&#39;</span><span class="p">,[.</span>02 <span class="p">.</span>10 <span class="p">.</span>94 <span class="p">.</span>04<span class="p">],</span> <span class="c">...</span>
</span><span class="line">   <span class="s">&#39;horiz&#39;</span><span class="p">,</span><span class="s">&#39;left&#39;</span><span class="p">);</span>
</span><span class="line"><span class="n">t2</span> <span class="p">=</span> <span class="n">uicontrol</span><span class="p">(</span><span class="s">&#39;style&#39;</span><span class="p">,</span><span class="s">&#39;text&#39;</span><span class="p">,</span><span class="s">&#39;units&#39;</span><span class="p">,</span><span class="s">&#39;normal&#39;</span><span class="p">,</span><span class="s">&#39;position&#39;</span><span class="p">,[.</span>02 <span class="p">.</span>02 <span class="p">.</span>94 <span class="p">.</span>04<span class="p">],</span> <span class="c">...</span>
</span><span class="line">   <span class="s">&#39;horiz&#39;</span><span class="p">,</span><span class="s">&#39;left&#39;</span><span class="p">);</span>
</span><span class="line"><span class="n">slow</span> <span class="p">=</span> <span class="n">uicontrol</span><span class="p">(</span><span class="s">&#39;style&#39;</span><span class="p">,</span><span class="s">&#39;toggle&#39;</span><span class="p">,</span><span class="s">&#39;units&#39;</span><span class="p">,</span><span class="s">&#39;normal&#39;</span><span class="p">,</span> <span class="c">...</span>
</span><span class="line">   <span class="s">&#39;position&#39;</span><span class="p">,[.</span>01 <span class="p">.</span>24 <span class="p">.</span>07 <span class="p">.</span>05<span class="p">],</span><span class="s">&#39;string&#39;</span><span class="p">,</span><span class="s">&#39;slow&#39;</span><span class="p">,</span><span class="s">&#39;value&#39;</span><span class="p">,</span>0<span class="p">);</span>
</span><span class="line"><span class="n">quit</span> <span class="p">=</span> <span class="n">uicontrol</span><span class="p">(</span><span class="s">&#39;style&#39;</span><span class="p">,</span><span class="s">&#39;toggle&#39;</span><span class="p">,</span><span class="s">&#39;units&#39;</span><span class="p">,</span><span class="s">&#39;normal&#39;</span><span class="p">,</span> <span class="c">...</span>
</span><span class="line">   <span class="s">&#39;position&#39;</span><span class="p">,[.</span>01 <span class="p">.</span>17 <span class="p">.</span>07 <span class="p">.</span>05<span class="p">],</span><span class="s">&#39;string&#39;</span><span class="p">,</span><span class="s">&#39;quit&#39;</span><span class="p">,</span><span class="s">&#39;value&#39;</span><span class="p">,</span>0<span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="n">U</span> <span class="p">=</span> <span class="n">cell</span><span class="p">(</span><span class="n">n</span><span class="p">,</span>1<span class="p">);</span>
</span><span class="line"><span class="n">hash</span> <span class="p">=</span> <span class="nb">zeros</span><span class="p">(</span><span class="n">n</span><span class="p">,</span>1<span class="p">);</span>
</span><span class="line"><span class="n">G</span> <span class="p">=</span> <span class="n">logical</span><span class="p">(</span><span class="n">sparse</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">n</span><span class="p">));</span>
</span><span class="line"><span class="n">m</span> <span class="p">=</span> 1<span class="p">;</span>
</span><span class="line"><span class="n">U</span><span class="p">{</span><span class="n">m</span><span class="p">}</span> <span class="p">=</span> <span class="n">root</span><span class="p">;</span>
</span><span class="line"><span class="n">hash</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="p">=</span> <span class="n">hashfun</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nb">j</span> <span class="p">=</span> 1<span class="p">;</span>
</span><span class="line"><span class="k">while</span> <span class="nb">j</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;</span> <span class="n">get</span><span class="p">(</span><span class="n">quit</span><span class="p">,</span><span class="s">&#39;value&#39;</span><span class="p">)</span> <span class="o">==</span> 0
</span><span class="line">
</span><span class="line">   <span class="c">% Try to open a page.</span>
</span><span class="line">
</span><span class="line">   <span class="k">try</span>
</span><span class="line">      <span class="n">set</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="s">&#39;string&#39;</span><span class="p">,</span><span class="n">sprintf</span><span class="p">(</span><span class="s">&#39;%5d %s&#39;</span><span class="p">,</span><span class="nb">j</span><span class="p">,</span><span class="n">U</span><span class="p">{</span><span class="nb">j</span><span class="p">}))</span>
</span><span class="line">      <span class="n">set</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="s">&#39;string&#39;</span><span class="p">,</span><span class="s">&#39;&#39;</span><span class="p">);</span>
</span><span class="line">      <span class="n">drawnow</span>
</span><span class="line">      <span class="n">page</span> <span class="p">=</span> <span class="n">urlread</span><span class="p">(</span><span class="n">U</span><span class="p">{</span><span class="nb">j</span><span class="p">});</span>
</span><span class="line">   <span class="k">catch</span>
</span><span class="line">      <span class="n">set</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="s">&#39;string&#39;</span><span class="p">,</span><span class="n">sprintf</span><span class="p">(</span><span class="s">&#39;fail: %5d %s&#39;</span><span class="p">,</span><span class="nb">j</span><span class="p">,</span><span class="n">U</span><span class="p">{</span><span class="nb">j</span><span class="p">}))</span>
</span><span class="line">      <span class="n">drawnow</span>
</span><span class="line">      <span class="k">continue</span>
</span><span class="line">   <span class="k">end</span>
</span><span class="line">   <span class="k">if</span> <span class="n">get</span><span class="p">(</span><span class="n">slow</span><span class="p">,</span><span class="s">&#39;value&#39;</span><span class="p">)</span>
</span><span class="line">      <span class="n">pause</span><span class="p">(.</span>25<span class="p">)</span>
</span><span class="line">   <span class="k">end</span>
</span><span class="line">
</span><span class="line">   <span class="c">% Follow the links from the open page.</span>
</span><span class="line">
</span><span class="line">   <span class="k">for</span> <span class="n">f</span> <span class="p">=</span> <span class="n">findstr</span><span class="p">(</span><span class="s">&#39;http:&#39;</span><span class="p">,</span><span class="n">page</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">      <span class="c">% A link starts with &#39;http:&#39; and ends with the next quote.</span>
</span><span class="line">
</span><span class="line">      <span class="n">e</span> <span class="p">=</span> <span class="n">min</span><span class="p">([</span><span class="n">findstr</span><span class="p">(</span><span class="s">&#39;&quot;&#39;</span><span class="p">,</span><span class="n">page</span><span class="p">(</span><span class="n">f</span><span class="p">:</span><span class="k">end</span><span class="p">))</span> <span class="n">findstr</span><span class="p">(</span><span class="s">&#39;&#39;&#39;&#39;</span><span class="p">,</span><span class="n">page</span><span class="p">(</span><span class="n">f</span><span class="p">:</span><span class="k">end</span><span class="p">))]);</span>
</span><span class="line">      <span class="k">if</span> <span class="nb">isempty</span><span class="p">(</span><span class="n">e</span><span class="p">),</span> <span class="k">continue</span><span class="p">,</span> <span class="k">end</span>
</span><span class="line">      <span class="n">url</span> <span class="p">=</span> <span class="n">deblank</span><span class="p">(</span><span class="n">page</span><span class="p">(</span><span class="n">f</span><span class="p">:</span><span class="n">f</span><span class="o">+</span><span class="n">e</span><span class="o">-</span>2<span class="p">));</span>
</span><span class="line">      <span class="n">url</span><span class="p">(</span><span class="n">url</span><span class="o">&lt;</span><span class="s">&#39; &#39;</span><span class="p">)</span> <span class="p">=</span> <span class="s">&#39;!&#39;</span><span class="p">;</span>   <span class="c">% Nonprintable characters</span>
</span><span class="line">      <span class="k">if</span> <span class="n">url</span><span class="p">(</span><span class="k">end</span><span class="p">)</span> <span class="o">==</span> <span class="s">&#39;/&#39;</span><span class="p">,</span> <span class="n">url</span><span class="p">(</span><span class="k">end</span><span class="p">)</span> <span class="p">=</span> <span class="p">[];</span> <span class="k">end</span>
</span><span class="line">
</span><span class="line">      <span class="c">% Look for links that should be skipped.</span>
</span><span class="line">
</span><span class="line">      <span class="n">skips</span> <span class="p">=</span> <span class="p">{</span><span class="s">&#39;.gif&#39;</span><span class="p">,</span><span class="s">&#39;.jpg&#39;</span><span class="p">,</span><span class="s">&#39;.pdf&#39;</span><span class="p">,</span><span class="s">&#39;.css&#39;</span><span class="p">,</span><span class="s">&#39;lmscadsi&#39;</span><span class="p">,</span><span class="s">&#39;cybernet&#39;</span><span class="p">,</span> <span class="c">...</span>
</span><span class="line">               <span class="s">&#39;search.cgi&#39;</span><span class="p">,</span><span class="s">&#39;.ram&#39;</span><span class="p">,</span><span class="s">&#39;www.w3.org&#39;</span><span class="p">,</span> <span class="c">...</span>
</span><span class="line">               <span class="s">&#39;scripts&#39;</span><span class="p">,</span><span class="s">&#39;netscape&#39;</span><span class="p">,</span><span class="s">&#39;shockwave&#39;</span><span class="p">,</span><span class="s">&#39;webex&#39;</span><span class="p">,</span><span class="s">&#39;fansonly&#39;</span><span class="p">};</span>
</span><span class="line">      <span class="n">skip</span> <span class="p">=</span> <span class="n">any</span><span class="p">(</span><span class="n">url</span><span class="o">==</span><span class="s">&#39;!&#39;</span><span class="p">)</span> <span class="o">|</span> <span class="n">any</span><span class="p">(</span><span class="n">url</span><span class="o">==</span><span class="s">&#39;?&#39;</span><span class="p">);</span>
</span><span class="line">      <span class="n">k</span> <span class="p">=</span> 0<span class="p">;</span>
</span><span class="line">      <span class="k">while</span> <span class="o">~</span><span class="n">skip</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">k</span> <span class="o">&lt;</span> <span class="nb">length</span><span class="p">(</span><span class="n">skips</span><span class="p">))</span>
</span><span class="line">         <span class="n">k</span> <span class="p">=</span> <span class="n">k</span><span class="o">+</span>1<span class="p">;</span>
</span><span class="line">         <span class="n">skip</span> <span class="p">=</span> <span class="o">~</span><span class="nb">isempty</span><span class="p">(</span><span class="n">findstr</span><span class="p">(</span><span class="n">url</span><span class="p">,</span><span class="n">skips</span><span class="p">{</span><span class="n">k</span><span class="p">}));</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">      <span class="k">if</span> <span class="n">skip</span>
</span><span class="line">         <span class="k">if</span> <span class="nb">isempty</span><span class="p">(</span><span class="n">findstr</span><span class="p">(</span><span class="n">url</span><span class="p">,</span><span class="s">&#39;.gif&#39;</span><span class="p">))</span> <span class="o">&amp;</span> <span class="nb">isempty</span><span class="p">(</span><span class="n">findstr</span><span class="p">(</span><span class="n">url</span><span class="p">,</span><span class="s">&#39;.jpg&#39;</span><span class="p">))</span>
</span><span class="line">            <span class="n">set</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="s">&#39;string&#39;</span><span class="p">,</span><span class="n">sprintf</span><span class="p">(</span><span class="s">&#39;skip: %s&#39;</span><span class="p">,</span><span class="n">url</span><span class="p">))</span>
</span><span class="line">            <span class="n">drawnow</span>
</span><span class="line">            <span class="k">if</span> <span class="n">get</span><span class="p">(</span><span class="n">slow</span><span class="p">,</span><span class="s">&#39;value&#39;</span><span class="p">)</span>
</span><span class="line">               <span class="n">pause</span><span class="p">(.</span>25<span class="p">)</span>
</span><span class="line">            <span class="k">end</span>
</span><span class="line">         <span class="k">end</span>
</span><span class="line">         <span class="k">continue</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">
</span><span class="line">      <span class="c">% Check if page is already in url list.</span>
</span><span class="line">
</span><span class="line">      <span class="nb">i</span> <span class="p">=</span> 0<span class="p">;</span>
</span><span class="line">      <span class="k">for</span> <span class="n">k</span> <span class="p">=</span> <span class="nb">find</span><span class="p">(</span><span class="n">hash</span><span class="p">(</span>1<span class="p">:</span><span class="n">m</span><span class="p">)</span> <span class="o">==</span> <span class="n">hashfun</span><span class="p">(</span><span class="n">url</span><span class="p">))</span><span class="o">&#39;</span><span class="p">;</span>
</span><span class="line">         <span class="k">if</span> <span class="nb">isequal</span><span class="p">(</span><span class="n">U</span><span class="p">{</span><span class="n">k</span><span class="p">},</span><span class="n">url</span><span class="p">)</span>
</span><span class="line">            <span class="nb">i</span> <span class="p">=</span> <span class="n">k</span><span class="p">;</span>
</span><span class="line">            <span class="k">break</span>
</span><span class="line">         <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">
</span><span class="line">      <span class="c">% Add a new url to the graph there if are fewer than n.</span>
</span><span class="line">
</span><span class="line">      <span class="k">if</span> <span class="p">(</span><span class="nb">i</span> <span class="o">==</span> 0<span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">m</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">)</span>
</span><span class="line">         <span class="n">m</span> <span class="p">=</span> <span class="n">m</span><span class="o">+</span>1<span class="p">;</span>
</span><span class="line">         <span class="n">U</span><span class="p">{</span><span class="n">m</span><span class="p">}</span> <span class="p">=</span> <span class="n">url</span><span class="p">;</span>
</span><span class="line">         <span class="n">hash</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="p">=</span> <span class="n">hashfun</span><span class="p">(</span><span class="n">url</span><span class="p">);</span>
</span><span class="line">         <span class="nb">i</span> <span class="p">=</span> <span class="n">m</span><span class="p">;</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">
</span><span class="line">      <span class="c">% Add a new link.</span>
</span><span class="line">
</span><span class="line">      <span class="k">if</span> <span class="nb">i</span> <span class="o">&gt;</span> 0
</span><span class="line">         <span class="n">G</span><span class="p">(</span><span class="nb">i</span><span class="p">,</span><span class="nb">j</span><span class="p">)</span> <span class="p">=</span> 1<span class="p">;</span>
</span><span class="line">         <span class="n">set</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="s">&#39;string&#39;</span><span class="p">,</span><span class="n">sprintf</span><span class="p">(</span><span class="s">&#39;%5d %s&#39;</span><span class="p">,</span><span class="nb">i</span><span class="p">,</span><span class="n">url</span><span class="p">))</span>
</span><span class="line">         <span class="n">line</span><span class="p">(</span><span class="nb">j</span><span class="p">,</span><span class="nb">i</span><span class="p">,</span><span class="s">&#39;marker&#39;</span><span class="p">,</span><span class="s">&#39;.&#39;</span><span class="p">,</span><span class="s">&#39;markersize&#39;</span><span class="p">,</span>6<span class="p">)</span>
</span><span class="line">         <span class="n">drawnow</span>
</span><span class="line">         <span class="k">if</span> <span class="n">get</span><span class="p">(</span><span class="n">slow</span><span class="p">,</span><span class="s">&#39;value&#39;</span><span class="p">)</span>
</span><span class="line">            <span class="n">pause</span><span class="p">(.</span>25<span class="p">)</span>
</span><span class="line">         <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">   <span class="k">end</span>
</span><span class="line">
</span><span class="line">   <span class="nb">j</span> <span class="p">=</span> <span class="nb">j</span><span class="o">+</span>1<span class="p">;</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line"><span class="n">delete</span><span class="p">(</span><span class="n">t1</span><span class="p">)</span>
</span><span class="line"><span class="n">delete</span><span class="p">(</span><span class="n">t2</span><span class="p">)</span>
</span><span class="line"><span class="n">delete</span><span class="p">(</span><span class="n">slow</span><span class="p">)</span>
</span><span class="line"><span class="n">set</span><span class="p">(</span><span class="n">quit</span><span class="p">,</span><span class="s">&#39;string&#39;</span><span class="p">,</span><span class="s">&#39;close&#39;</span><span class="p">,</span><span class="s">&#39;callback&#39;</span><span class="p">,</span><span class="s">&#39;close(gcf)&#39;</span><span class="p">,</span><span class="s">&#39;value&#39;</span><span class="p">,</span>0<span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">%------------------------</span>
</span><span class="line">
</span><span class="line"><span class="k">function</span><span class="w"> </span>h <span class="p">=</span><span class="w"> </span><span class="nf">hashfun</span><span class="p">(</span>url<span class="p">)</span><span class="w"></span>
</span><span class="line"><span class="c">% Almost unique numeric hash code for pages already visited.</span>
</span><span class="line"><span class="n">h</span> <span class="p">=</span> <span class="nb">length</span><span class="p">(</span><span class="n">url</span><span class="p">)</span> <span class="o">+</span> 1024<span class="o">*</span><span class="n">sum</span><span class="p">(</span><span class="n">url</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="mapreducepagerank">4.MapReduce框架下PageRank算法的实现</h3>

<p>利用前面wiki上的迭代(或者幂法)的思想来实现MapReduce框架下PageRank算法很简单，可以先阅读下参考内容5。</p>

<p>这篇文章<a href="http://michaelnielsen.org/blog/using-mapreduce-to-compute-pagerank/">using-mapreduce-to-compute-pagerank</a>更加详细，可以参考</p>

<p>以下是我的大数据的一次作业，要求是参考wiki上的简便算法，实现MapReduce框架下的PageRank算法。给的数据集是Twitter的用户之间的关系，可以看做是网页之间的关系，但是助教没要求写代码以及运行这个数据集(有1G多)，所以下面只是一个Python版本的理想可行版本，并没有通过实际大数据集的验证，另外，博主暂时还不太会Python的mapreduce框架中的一些函数，所以实现的是一个简明的可以测试的PageRank算法。</p>

<h4 id="section-2">1.输入输出格式</h4>

<p><strong>map函数的输入是&lt;节点，从该节点引出的边列表&gt;，其中节点是一个类，包含了其当前的pagerank值，输出是&lt;节点，反向节点pagerank值/反向节点引出边的总数&gt;；</strong></p>

<p><strong>reduce函数的输入是&lt;节点，反向节点pagerank值/反向节点引出边的总数&gt;，输出是&lt;节点，从该节点引出的边列表&gt;，其中节点包含了其更新后的pagerank值。</strong></p>

<p>伪代码： [一时犯二写了个英文形式的 ]</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="matlab"><span class="line"><span class="n">process</span> <span class="n">the</span> <span class="n">data</span> <span class="n">to</span> <span class="n">the</span> <span class="n">form</span> <span class="n">of</span> <span class="p">{</span><span class="n">node</span> <span class="nb">i</span><span class="p">:[</span><span class="n">its</span> <span class="n">adjacent</span> <span class="n">node</span> <span class="n">list</span><span class="p">],</span><span class="c">...}</span>
</span><span class="line"><span class="k">while</span> <span class="n">the</span> <span class="n">sum</span> <span class="n">of</span> <span class="n">difference</span> <span class="n">between</span> <span class="n">the</span> <span class="n">last</span> <span class="n">two</span> <span class="n">pagerank</span> <span class="n">values</span> <span class="o">&lt;</span> <span class="n">threshold</span>
</span><span class="line">	<span class="n">map</span><span class="p">({</span><span class="n">node</span> <span class="nb">i</span><span class="p">:[</span><span class="n">its</span> <span class="n">adjacent</span> <span class="n">node</span> <span class="n">list</span><span class="p">],</span><span class="c">...}):</span>
</span><span class="line">	    <span class="n">map_output</span><span class="p">={}</span>
</span><span class="line">	    <span class="k">for</span> <span class="n">every</span> <span class="n">node</span> <span class="nb">j</span> <span class="n">in</span> <span class="n">adjacent</span> <span class="n">node</span> <span class="n">list</span><span class="p">:</span>
</span><span class="line">	        <span class="n">put</span> <span class="n">or</span> <span class="n">sum</span> <span class="n">up</span> <span class="p">{</span><span class="nb">j</span><span class="p">:(</span><span class="nb">i</span><span class="p">,</span> <span class="n">PageRank</span><span class="p">(</span><span class="nb">i</span><span class="p">)</span><span class="o">/</span><span class="nb">length</span><span class="p">(</span><span class="n">adjacent</span> <span class="n">node</span> <span class="n">list</span><span class="p">))}</span> <span class="n">into</span> <span class="n">map_output</span>
</span><span class="line">	    <span class="k">return</span> <span class="n">map_output</span>
</span><span class="line">	
</span><span class="line">	<span class="n">reduce</span><span class="p">(</span><span class="n">map_output</span><span class="p">):</span>
</span><span class="line">	    <span class="n">reduce_output</span><span class="p">={}</span>
</span><span class="line">	    <span class="k">for</span> <span class="n">every</span> <span class="n">entry</span> <span class="p">{</span><span class="nb">j</span><span class="p">:(</span><span class="nb">i</span><span class="p">,</span> <span class="n">PageRank</span><span class="p">(</span><span class="nb">i</span><span class="p">)</span><span class="o">/</span><span class="nb">length</span><span class="p">(</span><span class="n">adjacent</span> <span class="n">node</span> <span class="n">list</span><span class="p">))}</span> <span class="n">in</span> <span class="n">map_output</span><span class="p">:</span>
</span><span class="line">	        <span class="n">put</span> <span class="n">or</span> <span class="n">sum</span> <span class="n">up</span> <span class="n">all</span> <span class="n">values</span> <span class="n">pagerank</span> <span class="n">values</span> <span class="k">for</span> <span class="n">node</span> <span class="nb">j</span> <span class="n">with</span> <span class="n">its</span> <span class="n">adjacent</span> <span class="n">node</span> <span class="n">list</span> <span class="n">into</span> <span class="n">reduce_output</span>
</span><span class="line">	    <span class="k">return</span> <span class="n">reduce_output</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-3">2.示例演示</h4>

<p>假设用户1，2，3，4是如下图所示的关系：</p>

<p><img src="http://hujiaweibujidao.github.io/images/others/pagerankdemo.png" alt="image" /></p>

<p>假设有2个mapper(A和B)和1个reducer(C)，初始时4个节点的pagerank值都是0.25</p>

<p>其中，关于用户1和2的数据被mapperA读取并处理，关于用户3和4的数据被mapperB读取并处理 [经验证，即使一个用户的数据是由不同的mapper来读取的，最终收敛到的结果差不多]</p>

<p>map的输入输出结果如下：</p>

<p><img src="http://hujiaweibujidao.github.io/images/others/mapper.png" alt="image" /></p>

<p>reduce的输入输出结果如下，输入是2个mapper的输出，输出的结果中更新了节点的pagerank值</p>

<p><img src="http://hujiaweibujidao.github.io/images/others/reducer.png" alt="image" /></p>

<p>reducer处理完了之后又将它的结果输入给mapper处理，直到迭代的次数超过了设定值或者两次迭代之后得到的所有节点的pagerank值之差的总和(也可以是取二范数)小于设定的阈值。</p>

<h4 id="section-4">3.示例的实验结果</h4>

<p>(1)首先是使用Matlab采用幂法的方式计算出在p=1.0的情况下示例得到的结果 [它的主要作用是验证后面python版本的正确性]</p>

<p>matlab源码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="matlab"><span class="line"><span class="n">n</span><span class="p">=</span>4<span class="p">;</span>
</span><span class="line"><span class="nb">i</span><span class="p">=[</span>2 3 4 3 4 4 1 2<span class="p">];</span>
</span><span class="line"><span class="nb">j</span><span class="p">=[</span>1 1 1 2 2 3 3 4<span class="p">];</span>
</span><span class="line"><span class="n">G</span><span class="p">=</span><span class="n">sparse</span><span class="p">(</span><span class="nb">i</span><span class="p">,</span><span class="nb">j</span><span class="p">,</span>1<span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="p">[</span><span class="n">n</span><span class="p">,</span><span class="n">n</span><span class="p">]</span> <span class="p">=</span> <span class="nb">size</span><span class="p">(</span><span class="n">G</span><span class="p">);</span>
</span><span class="line"><span class="k">for</span> <span class="nb">j</span> <span class="p">=</span> 1<span class="p">:</span><span class="n">n</span>
</span><span class="line">   <span class="n">L</span><span class="p">{</span><span class="nb">j</span><span class="p">}</span> <span class="p">=</span> <span class="nb">find</span><span class="p">(</span><span class="n">G</span><span class="p">(:,</span><span class="nb">j</span><span class="p">));</span>
</span><span class="line">   <span class="n">c</span><span class="p">(</span><span class="nb">j</span><span class="p">)</span> <span class="p">=</span> <span class="nb">length</span><span class="p">(</span><span class="n">L</span><span class="p">{</span><span class="nb">j</span><span class="p">});</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c">% Power method</span>
</span><span class="line"><span class="n">p</span><span class="p">=</span>1<span class="p">.</span>0<span class="p">;</span>
</span><span class="line"><span class="n">delta</span> <span class="p">=</span> <span class="p">(</span>1<span class="o">-</span><span class="n">p</span><span class="p">)</span><span class="o">/</span><span class="n">n</span><span class="p">;</span>
</span><span class="line"><span class="n">x</span> <span class="p">=</span> <span class="nb">ones</span><span class="p">(</span><span class="n">n</span><span class="p">,</span>1<span class="p">)</span><span class="o">/</span><span class="n">n</span><span class="p">;</span>
</span><span class="line"><span class="n">z</span> <span class="p">=</span> <span class="nb">zeros</span><span class="p">(</span><span class="n">n</span><span class="p">,</span>1<span class="p">);</span>
</span><span class="line"><span class="n">cnt</span> <span class="p">=</span> 0<span class="p">;</span>
</span><span class="line"><span class="k">while</span> <span class="n">max</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="n">z</span><span class="p">))</span> <span class="o">&gt;</span> <span class="p">.</span>0001
</span><span class="line">   <span class="n">z</span> <span class="p">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class="line">   <span class="n">x</span> <span class="p">=</span> <span class="nb">zeros</span><span class="p">(</span><span class="n">n</span><span class="p">,</span>1<span class="p">);</span>
</span><span class="line">   <span class="k">for</span> <span class="nb">j</span> <span class="p">=</span> 1<span class="p">:</span><span class="n">n</span>
</span><span class="line">      <span class="k">if</span> <span class="n">c</span><span class="p">(</span><span class="nb">j</span><span class="p">)</span> <span class="o">==</span> 0
</span><span class="line">         <span class="n">x</span> <span class="p">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">z</span><span class="p">(</span><span class="nb">j</span><span class="p">)</span><span class="o">/</span><span class="n">n</span><span class="p">;</span>
</span><span class="line">      <span class="k">else</span>
</span><span class="line">         <span class="n">x</span><span class="p">(</span><span class="n">L</span><span class="p">{</span><span class="nb">j</span><span class="p">})</span> <span class="p">=</span> <span class="n">x</span><span class="p">(</span><span class="n">L</span><span class="p">{</span><span class="nb">j</span><span class="p">})</span> <span class="o">+</span> <span class="n">z</span><span class="p">(</span><span class="nb">j</span><span class="p">)</span><span class="o">/</span><span class="n">c</span><span class="p">(</span><span class="nb">j</span><span class="p">);</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">   <span class="k">end</span>
</span><span class="line">   <span class="n">x</span> <span class="p">=</span> <span class="n">p</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">delta</span><span class="p">;</span>
</span><span class="line">   <span class="n">cnt</span> <span class="p">=</span> <span class="n">cnt</span><span class="o">+</span>1<span class="p">;</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line"><span class="n">sprintf</span><span class="p">(</span><span class="s">&#39;pagerank result:&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">x</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>结果为：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="matlab"><span class="line">0<span class="p">.</span>1072
</span><span class="line">0<span class="p">.</span>3571
</span><span class="line">0<span class="p">.</span>2143
</span><span class="line">0<span class="p">.</span>3214
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(2)matlab版本的page rank没有采用mapreduce的思想进行迭代，所以我另外写了一个python版本的利用mapreduce思想实现的pagerank算法(注：我并没有使用python的map和reduce函数去实现，而是使用更加容易明白的实现)，使用的阈值为0.0001，最多迭代的次数为100次。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
</pre></td><td class="code"><pre><code class="matlab"><span class="line"># <span class="n">coding</span><span class="p">=</span><span class="n">utf</span><span class="o">-</span>8
</span><span class="line">
</span><span class="line"><span class="n">__author__</span> <span class="p">=</span> <span class="s">&#39;hujiawei&#39;</span>
</span><span class="line"><span class="n">__doc__</span> <span class="p">=</span> <span class="s">&#39;pagerank mapreduce&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">class</span> <span class="n">Node</span><span class="p">:</span>
</span><span class="line">    <span class="n">def</span> <span class="n">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span><span class="n">id</span><span class="p">,</span><span class="n">pk</span><span class="p">):</span>
</span><span class="line">        <span class="n">self</span><span class="p">.</span><span class="n">id</span><span class="p">=</span><span class="n">id</span>
</span><span class="line">        <span class="n">self</span><span class="p">.</span><span class="n">pk</span><span class="p">=</span><span class="n">pk</span>
</span><span class="line">
</span><span class="line"><span class="n">def</span> <span class="n">pk_map</span><span class="p">(</span><span class="n">map_input</span><span class="p">):</span>
</span><span class="line">    <span class="n">map_output</span><span class="p">={}</span>
</span><span class="line">    <span class="k">for</span> <span class="n">node</span><span class="p">,</span><span class="n">outlinks</span> <span class="n">in</span> <span class="n">map_input</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
</span><span class="line">        <span class="k">for</span> <span class="n">link</span> <span class="n">in</span> <span class="n">outlinks</span><span class="p">:</span>
</span><span class="line">            <span class="nb">size</span><span class="p">=</span><span class="n">len</span><span class="p">(</span><span class="n">outlinks</span><span class="p">)</span>
</span><span class="line">            <span class="k">if</span> <span class="n">link</span> <span class="n">in</span> <span class="n">map_output</span><span class="p">:</span>
</span><span class="line">                <span class="n">map_output</span><span class="p">[</span><span class="n">link</span><span class="p">]</span><span class="o">+</span><span class="p">=(</span><span class="n">float</span><span class="p">)(</span><span class="n">node</span><span class="p">.</span><span class="n">pk</span><span class="p">)</span><span class="o">/</span><span class="nb">size</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="n">map_output</span><span class="p">[</span><span class="n">link</span><span class="p">]=(</span><span class="n">float</span><span class="p">)(</span><span class="n">node</span><span class="p">.</span><span class="n">pk</span><span class="p">)</span><span class="o">/</span><span class="nb">size</span>
</span><span class="line">    <span class="k">return</span> <span class="n">map_output</span>
</span><span class="line">
</span><span class="line"><span class="n">def</span> <span class="n">pk_reduce</span><span class="p">(</span><span class="n">reduce_input</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">result</span> <span class="n">in</span> <span class="n">reduce_input</span><span class="p">:</span>
</span><span class="line">        <span class="k">for</span> <span class="n">node</span><span class="p">,</span><span class="n">value</span> <span class="n">in</span> <span class="n">result</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
</span><span class="line">            <span class="n">node</span><span class="p">.</span><span class="n">pk</span><span class="o">+</span><span class="p">=</span><span class="n">value</span>
</span><span class="line">
</span><span class="line"><span class="n">def</span> <span class="n">pk_clear</span><span class="p">(</span><span class="n">nodes</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">node</span> <span class="n">in</span> <span class="n">nodes</span><span class="p">:</span>
</span><span class="line">        <span class="n">node</span><span class="p">.</span><span class="n">pk</span><span class="p">=</span>0
</span><span class="line">
</span><span class="line"><span class="n">def</span> <span class="n">pk_last</span><span class="p">(</span><span class="n">nodes</span><span class="p">):</span>
</span><span class="line">    <span class="n">lastnodes</span><span class="p">=[]</span>
</span><span class="line">    <span class="k">for</span> <span class="n">node</span> <span class="n">in</span> <span class="n">nodes</span><span class="p">:</span>
</span><span class="line">        <span class="n">lastnodes</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">Node</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">id</span><span class="p">,</span><span class="n">node</span><span class="p">.</span><span class="n">pk</span><span class="p">))</span>
</span><span class="line">    <span class="k">return</span> <span class="n">lastnodes</span>
</span><span class="line">
</span><span class="line"><span class="n">def</span> <span class="n">pk_diff</span><span class="p">(</span><span class="n">nodes</span><span class="p">,</span><span class="n">lastnodes</span><span class="p">):</span>
</span><span class="line">    <span class="n">diff</span><span class="p">=</span>0
</span><span class="line">    <span class="k">for</span> <span class="nb">i</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="n">len</span><span class="p">(</span><span class="n">nodes</span><span class="p">)):</span>
</span><span class="line">        <span class="n">print</span><span class="p">(</span><span class="s">&#39;node pk %f, last node pk %f &#39;</span> <span class="c">% (nodes[i].pk, lastnodes[i].pk))</span>
</span><span class="line">        <span class="n">diff</span><span class="o">+</span><span class="p">=</span><span class="nb">abs</span><span class="p">(</span><span class="n">nodes</span><span class="p">[</span><span class="nb">i</span><span class="p">].</span><span class="n">pk</span><span class="o">-</span><span class="n">lastnodes</span><span class="p">[</span><span class="nb">i</span><span class="p">].</span><span class="n">pk</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">diff</span>
</span><span class="line">
</span><span class="line"><span class="n">def</span> <span class="n">pk_test1</span><span class="p">():</span>
</span><span class="line">    <span class="n">node1</span> <span class="p">=</span> <span class="n">Node</span><span class="p">(</span>1<span class="p">,</span> 0<span class="p">.</span>25<span class="p">)</span>
</span><span class="line">    <span class="n">node2</span> <span class="p">=</span> <span class="n">Node</span><span class="p">(</span>2<span class="p">,</span> 0<span class="p">.</span>25<span class="p">)</span>
</span><span class="line">    <span class="n">node3</span> <span class="p">=</span> <span class="n">Node</span><span class="p">(</span>3<span class="p">,</span> 0<span class="p">.</span>25<span class="p">)</span>
</span><span class="line">    <span class="n">node4</span> <span class="p">=</span> <span class="n">Node</span><span class="p">(</span>4<span class="p">,</span> 0<span class="p">.</span>25<span class="p">)</span>
</span><span class="line">    <span class="n">nodes</span> <span class="p">=</span> <span class="p">[</span><span class="n">node1</span><span class="p">,</span> <span class="n">node2</span><span class="p">,</span> <span class="n">node3</span><span class="p">,</span> <span class="n">node4</span><span class="p">]</span>
</span><span class="line">    <span class="n">threshold</span> <span class="p">=</span> 0<span class="p">.</span>0001
</span><span class="line">    <span class="n">max_iters</span> <span class="p">=</span> 100
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="n">iter_count</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="n">max_iters</span><span class="p">):</span>
</span><span class="line">        <span class="n">iter_count</span> <span class="o">+</span><span class="p">=</span> 1
</span><span class="line">        <span class="n">lastnodes</span><span class="p">=</span><span class="n">pk_last</span><span class="p">(</span><span class="n">nodes</span><span class="p">)</span>
</span><span class="line">        <span class="n">print</span><span class="p">(</span><span class="s">&#39;============ map count %d =================&#39;</span> <span class="c">% (iter_count))</span>
</span><span class="line">        <span class="n">in1</span> <span class="p">=</span> <span class="p">{</span><span class="n">node1</span><span class="p">:</span> <span class="p">[</span><span class="n">node2</span><span class="p">,</span> <span class="n">node3</span><span class="p">,</span> <span class="n">node4</span><span class="p">],</span> <span class="n">node2</span><span class="p">:</span> <span class="p">[</span><span class="n">node3</span><span class="p">,</span> <span class="n">node4</span><span class="p">]}</span>
</span><span class="line">        <span class="n">in2</span> <span class="p">=</span> <span class="p">{</span><span class="n">node3</span><span class="p">:</span> <span class="p">[</span><span class="n">node1</span><span class="p">,</span> <span class="n">node4</span><span class="p">],</span> <span class="n">node4</span><span class="p">:</span> <span class="p">[</span><span class="n">node2</span><span class="p">]}</span>
</span><span class="line">
</span><span class="line">        <span class="n">mapout1</span> <span class="p">=</span> <span class="n">pk_map</span><span class="p">(</span><span class="n">in1</span><span class="p">)</span>
</span><span class="line">        <span class="n">mapout2</span> <span class="p">=</span> <span class="n">pk_map</span><span class="p">(</span><span class="n">in2</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span> <span class="n">node</span><span class="p">,</span> <span class="n">value</span> <span class="n">in</span> <span class="n">mapout1</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
</span><span class="line">            <span class="n">print</span> <span class="n">str</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">id</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39; &#39;</span> <span class="o">+</span> <span class="n">str</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span> <span class="n">node</span><span class="p">,</span> <span class="n">value</span> <span class="n">in</span> <span class="n">mapout2</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
</span><span class="line">            <span class="n">print</span> <span class="n">str</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">id</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39; &#39;</span> <span class="o">+</span> <span class="n">str</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="n">print</span><span class="p">(</span><span class="s">&#39;============ reduce count %d =================&#39;</span> <span class="c">% (iter_count))</span>
</span><span class="line">
</span><span class="line">        <span class="n">reducein</span> <span class="p">=</span> <span class="p">[</span><span class="n">mapout1</span><span class="p">,</span> <span class="n">mapout2</span><span class="p">]</span>
</span><span class="line">        <span class="n">pk_clear</span><span class="p">(</span><span class="n">nodes</span><span class="p">)</span>
</span><span class="line">        <span class="n">pk_reduce</span><span class="p">(</span><span class="n">reducein</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span> <span class="n">node</span> <span class="n">in</span> <span class="n">nodes</span><span class="p">:</span>
</span><span class="line">            <span class="n">print</span> <span class="n">str</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">id</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39; &#39;</span> <span class="o">+</span> <span class="n">str</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">pk</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="n">diff</span><span class="p">=</span><span class="n">pk_diff</span><span class="p">(</span><span class="n">nodes</span><span class="p">,</span><span class="n">lastnodes</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="n">diff</span> <span class="o">&lt;</span> <span class="n">threshold</span><span class="p">:</span>
</span><span class="line">            <span class="k">break</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="line">    <span class="n">pk_test1</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>得到的结果为如下，总共迭代了15次</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="matlab"><span class="line">1 0<span class="p">.</span>107138774577
</span><span class="line">2 0<span class="p">.</span>35712924859
</span><span class="line">3 0<span class="p">.</span>214296601128
</span><span class="line">4 0<span class="p">.</span>321435375705
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的结果和Matlab用幂法得到的pagerank值差别很小，可以认为是正确的，所以说明了使用这种mapreduce输入输出格式的正确性。</p>

<p>OK，差不多了，希望对需要理解PageRank算法的人有帮助！ :-) </p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/12/algorithms-pagerank/">http://hujiaweibujidao.github.io/blog/2014/05/12/algorithms-pagerank/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Happy Mother's Day]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/10/happy-mothers-day/"/>
    <updated>2014-05-10T20:08:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/10/happy-mothers-day</id>
    <content type="html"><![CDATA[<p>老妈，节日快乐！祝您永远幸福健康！</p>

<p><img src="http://hujiaweibujidao.github.io/images/mothersday.png" alt="image" /></p>

<p>使用的Python代码，<a href="http://pythontip.sinaapp.com/coding/skulpt/">源代码来源不记得了，可以看下这里</a>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">turtle</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">random</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class="line">    <span class="n">tList</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="n">head</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="n">numTurtles</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">numTurtles</span><span class="p">):</span>
</span><span class="line">        <span class="n">nt</span> <span class="o">=</span> <span class="n">turtle</span><span class="o">.</span><span class="n">Turtle</span><span class="p">()</span>   <span class="c"># Make a new turtle, initialize values</span>
</span><span class="line">        <span class="n">nt</span><span class="o">.</span><span class="n">setheading</span><span class="p">(</span><span class="n">head</span><span class="p">)</span>
</span><span class="line">        <span class="n">nt</span><span class="o">.</span><span class="n">pensize</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">        <span class="n">nt</span><span class="o">.</span><span class="n">color</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">randrange</span><span class="p">(</span><span class="mi">256</span><span class="p">),</span><span class="n">random</span><span class="o">.</span><span class="n">randrange</span><span class="p">(</span><span class="mi">256</span><span class="p">),</span><span class="n">random</span><span class="o">.</span><span class="n">randrange</span><span class="p">(</span><span class="mi">256</span><span class="p">))</span>
</span><span class="line">        <span class="n">nt</span><span class="o">.</span><span class="n">speed</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class="line">        <span class="n">nt</span><span class="o">.</span><span class="n">tracer</span><span class="p">(</span><span class="mi">30</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">        <span class="n">tList</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">nt</span><span class="p">)</span>       <span class="c"># Add the new turtle to the list</span>
</span><span class="line">        <span class="n">head</span> <span class="o">=</span> <span class="n">head</span> <span class="o">+</span> <span class="mi">360</span><span class="o">/</span><span class="n">numTurtles</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">):</span>
</span><span class="line">        <span class="n">moveTurtles</span><span class="p">(</span><span class="n">tList</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">w</span> <span class="o">=</span> <span class="n">tList</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">    <span class="n">w</span><span class="o">.</span><span class="n">up</span><span class="p">()</span>
</span><span class="line">    <span class="n">w</span><span class="o">.</span><span class="n">goto</span><span class="p">(</span><span class="o">-</span><span class="mi">130</span><span class="p">,</span><span class="mi">40</span><span class="p">)</span>
</span><span class="line">    <span class="n">w</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;You are my favorite lady!&quot;</span><span class="p">,</span><span class="bp">True</span><span class="p">,</span><span class="s">&quot;center&quot;</span><span class="p">,</span><span class="s">&quot;20px Arial&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">w</span><span class="o">.</span><span class="n">goto</span><span class="p">(</span><span class="o">-</span><span class="mi">130</span><span class="p">,</span><span class="o">-</span><span class="mi">35</span><span class="p">)</span>
</span><span class="line">    <span class="n">w</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;Happy Mother&#39;s Day&quot;</span><span class="p">,</span><span class="bp">True</span><span class="p">,</span><span class="s">&quot;center&quot;</span><span class="p">,</span><span class="s">&quot;24px Arial&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">moveTurtles</span><span class="p">(</span><span class="n">turtleList</span><span class="p">,</span><span class="n">dist</span><span class="p">,</span><span class="n">angle</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">turtle</span> <span class="ow">in</span> <span class="n">turtleList</span><span class="p">:</span>   <span class="c"># Make every turtle on the list do the same actions.</span>
</span><span class="line">        <span class="n">turtle</span><span class="o">.</span><span class="n">forward</span><span class="p">(</span><span class="n">dist</span><span class="p">)</span>
</span><span class="line">        <span class="n">turtle</span><span class="o">.</span><span class="n">right</span><span class="p">(</span><span class="n">angle</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/10/happy-mothers-day/">http://hujiaweibujidao.github.io/blog/2014/05/10/happy-mothers-day/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tsinghua 9ers Pictures]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/10/tsinghua-9ers-pictures/"/>
    <updated>2014-05-10T13:10:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/10/tsinghua-9ers-pictures</id>
    <content type="html"><![CDATA[<p>清华9字班毕业生于海童拍摄制作，视频地址<a href="http://v.youku.com/v_show/id_XNTkwNDYxNjIw/v.swf.html">优酷视频 时光机：清华园的延时摄影</a></p>

<p>虽不是9字班的，但是在园子里生活了一年多了，感觉很亲切，很梦幻，我要继续努力成为一名真正合格的清华人！</p>

<p>我希望在这里度过研究生之后，也能无怨无悔地写下“如果研究生重来，我什么都不想改变”！</p>

<p><img src="http://hujiaweibujidao.github.io/images/pics/dalitang.jpeg" alt="image" /></p>

<p><img src="http://hujiaweibujidao.github.io/images/pics/erxiaomen.jpeg" alt="image" /></p>

<p><img src="http://hujiaweibujidao.github.io/images/pics/hetang.jpeg" alt="image" /></p>

<!--![image](http://hujiaweibujidao.github.io/images/pics/hetangdong.jpeg)-->

<p><img src="http://hujiaweibujidao.github.io/images/pics/litang.jpeg" alt="image" /></p>

<p><img src="http://hujiaweibujidao.github.io/images/pics/qinghuaxuetang.jpeg" alt="image" /></p>

<p><img src="http://hujiaweibujidao.github.io/images/pics/qinghuaxuetangcaihong.jpeg" alt="image" /></p>

<p><img src="http://hujiaweibujidao.github.io/images/pics/quanjing.jpeg" alt="image" /></p>

<p><img src="http://hujiaweibujidao.github.io/images/pics/rigui.jpeg" alt="image" /></p>

<!--![image](http://hujiaweibujidao.github.io/images/pics/shandian.jpeg)-->

<p><img src="http://hujiaweibujidao.github.io/images/pics/xiaoche.jpeg" alt="image" /></p>

<p><img src="http://hujiaweibujidao.github.io/images/pics/xingkong.jpeg" alt="image" /></p>

<p><img src="http://hujiaweibujidao.github.io/images/pics/yekong.jpeg" alt="image" /></p>

<p><img src="http://hujiaweibujidao.github.io/images/pics/yinyueting.jpeg" alt="image" /></p>

<p><img src="http://hujiaweibujidao.github.io/images/pics/zijing.jpeg" alt="image" /></p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/10/tsinghua-9ers-pictures/">http://hujiaweibujidao.github.io/blog/2014/05/10/tsinghua-9ers-pictures/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Basics]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/10/python-tips1/"/>
    <updated>2014-05-10T13:00:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/10/python-tips1</id>
    <content type="html"><![CDATA[<p>1.使用<code>glob</code>模块可以用通配符的方式搜索某个目录下的特定文件，返回结果是一个list</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">glob</span>
</span><span class="line"><span class="n">flist</span><span class="o">=</span><span class="n">glob</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s">&#39;*.jpeg&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>使用<code>os.getcwd()</code>可以得到当前目录，如果想切换到其他目录，可以使用<code>os.chdir('str/to/path')</code>，如果想执行Shell脚本，可以使用<code>os.system('mkdir newfolder')</code>。</p>

<p>对于日常文件和目录的管理, <code>shutil</code>模块提供了更便捷、更高层次的接口</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">shutil</span>
</span><span class="line"><span class="n">shutil</span><span class="o">.</span><span class="n">copyfile</span><span class="p">(</span><span class="s">&#39;data.db&#39;</span><span class="p">,</span> <span class="s">&#39;archive.db&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">shutil</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="s">&#39;/build/executables&#39;</span><span class="p">,</span> <span class="s">&#39;installdir&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>使用PyCharm中，在一个Project中新建一个Directory和新建一个Package之后，IDE都会创建对应的目录，并添加默认的<code>__init__.py</code>文件，但是，两者还是不一样的。
如果在它们的目录下各新建一个python脚本测试输出<code>os.getcwd()</code>，如果是在Directory中得到的是Project的根目录’/Users/hujiawei/PycharmProjects/leetcodeoj’；如果是在Package中得到的是Package的根目录，如’/Users/hujiawei/PycharmProjects/leetcodeoj/pypackage’。</p>

<p>2.如果要在代码中添加中文注释的话，最好在文档开头加上下面的编码声明语句。关于Python中的字符串编码可见<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386819196283586a37629844456ca7e5a7faa9b94ee8000">廖雪峰的python教程</a>。若代码打算用在国际化的环境中, 那么不要使用奇特的编码。Python 默认的 UTF-8, 或者甚至是简单的 ASCII 在任何情况下工作得最好。同样地，如果代码的读者或维护者只有很小的概率使用不同的语言，那么不要在标识符里使用非 ASCII 字符。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># coding=utf-8 </span>
</span><span class="line"><span class="err">或者</span>
</span><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.关于Python中的变量，摘自<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386820042500060e2921830a4adf94fb31bcea8d6f5c000">廖雪峰的python教程</a></p>

<p>在Python中，变量名类似<code>__xxx__</code>的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量，所以，不能用<code>__name__</code>、<code>__score__</code>这样的变量名。</p>

<p>有些时候，你会看到以一个下划线开头的实例变量名(<strong>两个下划线开头的也一样算，其实任何以下划线开头的都算</strong>)，比如<code>_name</code>，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，<strong>“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”</strong>。</p>

<p>双下划线开头的实例变量是不是一定不能从外部访问呢？其实也不是。不能直接访问<code>__name</code>是因为Python解释器对外把<code>__name</code>变量改成了<code>_Student__name</code>，所以，仍然可以通过<code>_Student__name</code>来访问<code>__name</code>变量。但是强烈建议你不要这么干，因为不同版本的Python解释器可能会把<code>__name</code>改成不同的变量名。</p>

<p>总的来说就是，Python本身没有任何机制阻止你干坏事，一切全靠自觉。</p>

<p>上面说的有点绕，下面我写了两个python脚本，大家可以对照看下哪些能够访问，哪些不能，不能的情况下如何操作变得可以访问(注释后面的<code>yes</code>和<code>no</code>表示能不能被访问)。</p>

<p>也就是说，<strong>默认呢，以一个下划线开始(不论结尾有没有下划线)的变量在外部都是可以直接访问的，但是不推荐这么做；以两个下划线开始和两个下划线结束的变量属于特殊变量，可以直接访问；而以两个下划线开始且结尾不是两个下划线(可以没有也可以有一个下划线)的变量属于私有变量，不能直接访问，虽然可以通过其他方式访问，但最好不要在外部访问。</strong></p>

<p>文件<code>APythonTestA.py</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># coding=utf-8</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">ListNode</span><span class="p">:</span>
</span><span class="line">
</span><span class="line">    <span class="n">_class_field10</span> <span class="o">=</span> <span class="s">&#39;node class field 1-0&#39;</span>
</span><span class="line">    <span class="n">_class_field11_</span> <span class="o">=</span> <span class="s">&#39;node class field 1-1&#39;</span>
</span><span class="line">    <span class="n">_class_field12__</span> <span class="o">=</span> <span class="s">&#39;node class field 1-2&#39;</span>
</span><span class="line">
</span><span class="line">    <span class="n">__class_field20</span> <span class="o">=</span> <span class="s">&#39;node class field 2-0&#39;</span>
</span><span class="line">    <span class="n">__class_field21_</span> <span class="o">=</span> <span class="s">&#39;node class field 2-1&#39;</span>
</span><span class="line">    <span class="n">__class_field22__</span> <span class="o">=</span> <span class="s">&#39;node class field 2-2&#39;</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">x</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class="line">
</span><span class="line"><span class="n">_class_field10</span> <span class="o">=</span> <span class="s">&#39;node class field 1-0&#39;</span>
</span><span class="line"><span class="n">_class_field11_</span> <span class="o">=</span> <span class="s">&#39;node class field 1-1&#39;</span>
</span><span class="line"><span class="n">_class_field12__</span> <span class="o">=</span> <span class="s">&#39;node class field 1-2&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">__class_field20</span> <span class="o">=</span> <span class="s">&#39;node class field 2-0&#39;</span>
</span><span class="line"><span class="n">__class_field21_</span> <span class="o">=</span> <span class="s">&#39;node class field 2-1&#39;</span>
</span><span class="line"><span class="n">__class_field22__</span> <span class="o">=</span> <span class="s">&#39;node class field 2-2&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>文件<code>APythonTestB.py</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># coding=utf-8</span>
</span><span class="line"><span class="n">__author__</span> <span class="o">=</span> <span class="s">&#39;hujiawei&#39;</span>
</span><span class="line"><span class="n">__doc__</span> <span class="o">=</span> <span class="s">&#39;for python test 2&#39;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">APythonTestA</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="nb">dir</span><span class="p">(</span><span class="n">APythonTestA</span><span class="o">.</span><span class="n">ListNode</span><span class="p">))</span>
</span><span class="line">    <span class="n">node</span> <span class="o">=</span> <span class="n">APythonTestA</span><span class="o">.</span><span class="n">ListNode</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class="line">    <span class="c"># print(node._ListNode__class_field20) #yes</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">_class_field10</span><span class="p">)</span> <span class="c">#yes</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">_class_field11_</span><span class="p">)</span> <span class="c">#yes</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">_class_field12__</span><span class="p">)</span> <span class="c">#yes</span>
</span><span class="line">    <span class="c"># print(node.__class_field20) #no</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">_ListNode__class_field20</span><span class="p">)</span><span class="c">#yes</span>
</span><span class="line">    <span class="c"># print(node.__class_field21_) #no</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">_ListNode__class_field21_</span><span class="p">)</span><span class="c">#yes</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">__class_field22__</span><span class="p">)</span> <span class="c">#yes</span>
</span><span class="line">
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="nb">dir</span><span class="p">(</span><span class="n">APythonTestA</span><span class="p">))</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">APythonTestA</span><span class="o">.</span><span class="n">_class_field10</span><span class="p">)</span> <span class="c">#yes</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">APythonTestA</span><span class="o">.</span><span class="n">_class_field11_</span><span class="p">)</span> <span class="c">#yes</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">APythonTestA</span><span class="o">.</span><span class="n">_class_field12__</span><span class="p">)</span> <span class="c">#yes</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">APythonTestA</span><span class="o">.</span><span class="n">__class_field20</span><span class="p">)</span> <span class="c">#yes</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">APythonTestA</span><span class="o">.</span><span class="n">__class_field21_</span><span class="p">)</span> <span class="c">#yes</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">APythonTestA</span><span class="o">.</span><span class="n">__class_field22__</span><span class="p">)</span> <span class="c">#yes</span>
</span><span class="line">
</span><span class="line"><span class="c"># [&#39;_ListNode__class_field20&#39;, &#39;_ListNode__class_field21_&#39;, &#39;__class_field22__&#39;, &#39;__doc__&#39;, &#39;__init__&#39;, &#39;__module__&#39;, &#39;_class_field10&#39;, &#39;_class_field11_&#39;, &#39;_class_field12__&#39;]</span>
</span><span class="line"><span class="c"># node class field 1-0</span>
</span><span class="line"><span class="c"># node class field 1-1</span>
</span><span class="line"><span class="c"># node class field 1-2</span>
</span><span class="line"><span class="c"># node class field 2-0</span>
</span><span class="line"><span class="c"># node class field 2-1</span>
</span><span class="line"><span class="c"># node class field 2-2</span>
</span><span class="line"><span class="c"># [&#39;ListNode&#39;, &#39;__builtins__&#39;, &#39;__class_field20&#39;, &#39;__class_field21_&#39;, &#39;__class_field22__&#39;, &#39;__doc__&#39;, &#39;__file__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;_class_field10&#39;, &#39;_class_field11_&#39;, &#39;_class_field12__&#39;]</span>
</span><span class="line"><span class="c"># node class field 1-0</span>
</span><span class="line"><span class="c"># node class field 1-1</span>
</span><span class="line"><span class="c"># node class field 1-2</span>
</span><span class="line"><span class="c"># node class field 2-0</span>
</span><span class="line"><span class="c"># node class field 2-1</span>
</span><span class="line"><span class="c"># node class field 2-2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4.关于Python中函数的参数，摘自<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001374738449338c8a122a7f2e047899fc162f4a7205ea3000">廖雪峰的python教程</a></p>

<p>Python的函数具有非常灵活的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。
默认参数一定要用不可变对象，如果是可变对象，运行会有逻辑错误！</p>

<p>要注意定义可变参数和关键字参数的语法：</p>

<p><code>*args</code>是可变参数，args接收的是一个tuple；</p>

<p><code>**kw</code>是关键字参数，kw接收的是一个dict。</p>

<p>以及调用函数时如何传入可变参数和关键字参数的语法：</p>

<p>可变参数既可以直接传入：<code>func(1, 2, 3)</code>，又可以先组装list或tuple，再通过<code>*args</code>传入：<code>func(*(1, 2, 3))；</code></p>

<p>关键字参数既可以直接传入：<code>func(a=1, b=2)</code>，又可以先组装dict，再通过<code>**kw</code>传入：<code>func(**{'a': 1, 'b': 2})</code>。</p>

<p>使用<code>*args</code>和<code>**kw</code>是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。</p>

<p>5.关于Python的高级特性，参见<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013868196169906eb9ca5864384546bf3405ae6a172b3e000">廖雪峰的python教程</a></p>

<p>切片，迭代，列表生成式，生成器</p>

<p><strong>除非特殊的原因，应该经常在代码中使用生成器表达式。但除非是面对非常大的列表，否则是不会看出明显区别的。</strong></p>

<p>使用生成器得到当前目录及其子目录中的所有文件的代码，下面代码来自<a href="http://blog.jobbole.com/61171/">伯乐在线-python高级编程技巧</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">os</span>
</span><span class="line"><span class="k">def</span> <span class="nf">tree</span><span class="p">(</span><span class="n">top</span><span class="p">):</span>
</span><span class="line">    <span class="c">#path,folder list,file list</span>
</span><span class="line">    <span class="k">for</span> <span class="n">path</span><span class="p">,</span> <span class="n">names</span><span class="p">,</span> <span class="n">fnames</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="n">top</span><span class="p">):</span>
</span><span class="line">        <span class="k">for</span> <span class="n">fname</span> <span class="ow">in</span> <span class="n">fnames</span><span class="p">:</span>
</span><span class="line">            <span class="k">yield</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">fname</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">tree</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">()):</span>
</span><span class="line">    <span class="k">print</span> <span class="n">name</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>另一个使用生成器的代码示例：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">num</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="o">-</span><span class="mi">7</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">square_generator</span><span class="p">(</span><span class="n">optional_parameter</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span><span class="n">x</span> <span class="o">**</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">num</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="n">optional_parameter</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">square_generator</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line"><span class="c"># &lt;generator object &lt;genexpr&gt; at 0x004E6418&gt;</span>
</span><span class="line">
</span><span class="line"><span class="c"># Option I</span>
</span><span class="line"><span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">square_generator</span><span class="p">(</span><span class="mi">0</span><span class="p">):</span>
</span><span class="line">    <span class="k">print</span> <span class="n">k</span>
</span><span class="line"><span class="c"># 1, 16, 100, 4, 9</span>
</span><span class="line">
</span><span class="line"><span class="c"># Option II</span>
</span><span class="line"><span class="n">g</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">square_generator</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span><span class="line"><span class="k">print</span> <span class="n">g</span>
</span><span class="line"><span class="c"># [1, 16, 100, 4, 9]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>6.关于Python的函数式编程，参见<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386819866394c3f9efcd1a454b2a8c57933e976445c0000">廖雪峰的python教程</a>，讲解得很好</p>

<p>高阶函数(使用函数作为参数或者返回一个函数的函数称为<code>高阶函数</code>)，匿名函数(lambda)，装饰器(decorator)和偏函数</p>

<p>用来测试一个函数花费的运行时间的装饰器，当然你也可以使用其他的方式，比如<code>Timer</code>来得到运行时间。下面代码来自<a href="http://blog.jobbole.com/61171/">伯乐在线-python高级编程技巧</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">timethis</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&#39;&#39;&#39;</span>
</span><span class="line"><span class="sd">    Decorator that reports the execution time.</span>
</span><span class="line"><span class="sd">    &#39;&#39;&#39;</span>
</span><span class="line">    <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class="line">        <span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class="line">        <span class="n">result</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class="line">        <span class="n">end</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class="line">        <span class="k">print</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">__name__</span><span class="p">,</span> <span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">result</span>
</span><span class="line">    <span class="k">return</span> <span class="n">wrapper</span>
</span><span class="line">
</span><span class="line"><span class="nd">@timethis</span>
</span><span class="line"><span class="k">def</span> <span class="nf">countdown</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class="line">    <span class="k">while</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">        <span class="n">n</span> <span class="o">-=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>其中代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="nd">@timethis</span>
</span><span class="line"><span class="k">def</span> <span class="nf">countdown</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>就相当于：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">countdown</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class="line"><span class="o">...</span>
</span><span class="line"><span class="n">countdown</span> <span class="o">=</span> <span class="n">timethis</span><span class="p">(</span><span class="n">countdown</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>装饰器除了可以使用函数实现，也可以使用类来实现。</p>

<p><strong>对装饰器的类实现的唯一要求是它必须能如函数一般使用，也就是说它必须是可调用的。所以，如果想这么做这个类必须实现<code>__call__</code>方法。</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">decorator</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">f</span><span class="p">):</span>
</span><span class="line">        <span class="k">print</span><span class="p">(</span><span class="s">&quot;inside decorator.__init__()&quot;</span><span class="p">)</span>
</span><span class="line">        <span class="n">f</span><span class="p">()</span> <span class="c"># Prove that function definition has completed</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">print</span><span class="p">(</span><span class="s">&quot;inside decorator.__call__()&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nd">@decorator</span>
</span><span class="line"><span class="k">def</span> <span class="nf">function</span><span class="p">():</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="s">&quot;inside function()&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&quot;Finished decorating function()&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">function</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c"># inside decorator.__init__()</span>
</span><span class="line"><span class="c"># inside function()</span>
</span><span class="line"><span class="c"># Finished decorating function()</span>
</span><span class="line"><span class="c"># inside decorator.__call__()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>语法糖<code>@decorator</code>相当于<code>function=decorator(function)</code>，在此调用decorator的<code>__init__</code>打印<code>“inside decorator.__init__()”</code></li>
  <li>随后执行f()打印<code>“inside function()”</code></li>
  <li>随后执行<code>“print(“Finished decorating function()”)”</code></li>
  <li>最后再调用function函数时，由于使用装饰器包装，因此执行decorator的<code>__call__</code>打印 <code>“inside decorator.__call__()”</code>。</li>
</ol>

<p>==我的批注：我觉得上面代码不是一般的使用方式，实际装饰器类应该是在<code>__init__</code>方法中设置好自己内部的函数f，然后在方法<code>__call__</code>中调用函数f，并包含一些其他的方法调用，大概如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">decorator</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">f</span><span class="p">):</span>
</span><span class="line">        <span class="k">print</span><span class="p">(</span><span class="s">&quot;inside decorator.__init__()&quot;</span><span class="p">)</span>
</span><span class="line">        <span class="c"># f() # Prove that function definition has completed</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">f</span><span class="o">=</span><span class="n">f</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">print</span><span class="p">(</span><span class="s">&quot;inside decorator.__call__() begin&quot;</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">f</span><span class="p">()</span>
</span><span class="line">        <span class="k">print</span><span class="p">(</span><span class="s">&quot;inside decorator.__call__() end&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nd">@decorator</span>
</span><span class="line"><span class="k">def</span> <span class="nf">function</span><span class="p">():</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="s">&quot;inside function()&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&quot;Finished decorating function()&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">function</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c"># inside decorator.__init__()</span>
</span><span class="line"><span class="c"># Finished decorating function()</span>
</span><span class="line"><span class="c"># inside decorator.__call__() begin</span>
</span><span class="line"><span class="c"># inside function()</span>
</span><span class="line"><span class="c"># inside decorator.__call__() end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在提供一个装饰器的例子，实现自顶向下的带备忘录的DP算法来解决斐波那契数列求值，来源于<a href="http://link.springer.com/book/10.1007%2F978-1-4302-3238-4">Python Algorithms- Mastering Basic Algorithms in the Python Language</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">memo</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="n">cache</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line">    <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">wrap</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">args</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">cache</span><span class="p">:</span>
</span><span class="line">            <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span><span class="o">=</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">wrap</span>
</span><span class="line">
</span><span class="line"><span class="nd">@memo</span>
</span><span class="line"><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">:</span> <span class="k">return</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">return</span> <span class="n">fib</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="n">fib</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">fib</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>7.Python中的值传递和引用传递</p>

<p><a href="http://www.pythoneye.com.cn/article/pythonpeixun45.html">参考阅读资料</a></p>

<p><strong>python函数传递的是对象的引用值，非传值或传引用。但是如果对象是不可变的，感觉和c语言中传值差不多。如果对象是可变的，感觉和c语言中传引用差不多。</strong></p>

<p>运行下面的代码就清楚了</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;传来是对象的引用对象地址为{0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
</span><span class="line">    <span class="n">a</span> <span class="o">=</span> <span class="mi">3</span> <span class="c">#形式参数a是局部变量，a重新绑定到3这个对象。</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;变量a新引用对象地址为{0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
</span><span class="line">    <span class="c"># print a</span>
</span><span class="line">
</span><span class="line"><span class="n">x</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;全局变量x引用的对象地址为{0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</span><span class="line"><span class="n">foo</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;变量x新引用对象地址为{0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</span><span class="line"><span class="k">print</span> <span class="n">x</span>
</span><span class="line"><span class="c">#由于函数内部a绑定到新的对象，也就修改不了全局变量x引用的对象5</span>
</span><span class="line"><span class="c"># 全局变量x引用的对象地址为140462615725816</span>
</span><span class="line"><span class="c"># 传来是对象的引用对象地址为140462615725816</span>
</span><span class="line"><span class="c"># 变量a新引用对象地址为140462615725864</span>
</span><span class="line"><span class="c"># 变量x新引用对象地址为140462615725816</span>
</span><span class="line"><span class="c"># 5</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;在函数内部直接修改了同一个引用指向的对象。</span>
</span><span class="line"><span class="sd">    也就修改了实际参数传来的引用值指向的对象。</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="n">a</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;can change object&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">a</span>
</span><span class="line">
</span><span class="line"><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</span><span class="line"><span class="k">print</span> <span class="n">foo</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="n">lst</span>
</span><span class="line"><span class="c">#[1, 2, 3, &#39;can change object&#39;]</span>
</span><span class="line"><span class="c">#[1, 2, 3, &#39;can change object&#39;]</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;实际参数传来一个对象[1,2,3]的引用，当时形式参数</span>
</span><span class="line"><span class="sd">    （局部变量a重新引用到新的对象，也就是说保存了新的对象）</span>
</span><span class="line"><span class="sd">    当然不能修改原来的对象了。</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;python&quot;</span><span class="p">,</span><span class="s">&quot;java&quot;</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">a</span>
</span><span class="line">
</span><span class="line"><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</span><span class="line"><span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">foo</span><span class="p">(</span><span class="n">lst</span><span class="p">):</span>
</span><span class="line">    <span class="k">print</span> <span class="n">item</span>
</span><span class="line"><span class="k">print</span> <span class="n">lst</span>
</span><span class="line"><span class="c"># python</span>
</span><span class="line"><span class="c"># java</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/10/python-tips1/">http://hujiaweibujidao.github.io/blog/2014/05/10/python-tips1/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Algorithms - Dynamic Programming]]></title>
    <link href="http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-dynamic-programming/"/>
    <updated>2014-05-08T23:30:00+08:00</updated>
    <id>http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-dynamic-programming</id>
    <content type="html"><![CDATA[<p><strong><center>Python Algorithms Python算法系列</center></strong>
<strong><center>逸夫图书馆, 2014/5/18</center></strong></p>

<h3 id="centercenter"><center>动态规划</center></h3>

<p>参考内容：</p>

<p>1.<a href="http://link.springer.com/book/10.1007%2F978-1-4302-3238-4">Python Algorithms: Mastering Basic Algorithms in the Python Language</a></p>

<p>Chapter 8 Tangled Dependencies and Memoization</p>

<p>2.<a href="http://en.wikipedia.org/wiki/Introduction_to_Algorithms">算法导论</a></p>

<p>3.<a href="http://book.douban.com/subject/4875278/">算法设计、分析与实现从入门到精通</a></p>

<p>大家都知道，动态规划算法一般都有两种实现方式：</p>

<p><strong>1.直接自顶向下实现递归式，并将中间结果保存，这叫备忘录法；</strong></p>

<p><strong>2.将递归式翻转，自底向上地迭代，将结果保存在某个数据结构中。</strong></p>

<p>编程有一个原则<code>DRY=Don’t Repeat Yourself</code>，就是说你的代码不要重复来重复去的，这个原则同样可以用于理解动态规划，动态规划除了满足最优子结构，它还存在子问题重叠的性质，我们不能重复地去解决这些子问题，所以我们将子问题的解保存起来，类似缓存机制，之后遇到这个子问题时直接取出子问题的解。</p>

<p>举个简单的例子，斐波那契数列中的元素的计算，很简单，我们写下如下的代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">:</span> <span class="k">return</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">return</span> <span class="n">fib</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="n">fib</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>好，来测试下，运行<code>fib(10)</code>得到结果69，不错，速度也还行，换个大的数字，试试100，这时你会发现，这个程序执行不出结果了，为什么？递归太深了！要计算的子问题太多了！</p>

<p>所以，我们需要改进下，我们保存每次计算出来的子问题的解，用什么保存呢？用Python中的dict！那怎么实现保存子问题的解呢？用Python中的装饰器！</p>

<p>如果不是很了解Python的装饰器，可以快速看下<a href="http://hujiaweibujidao.github.io/blog/2014/05/10/python-tips1/">这篇总结中关于装饰器的解释：Python Basics</a></p>

<p>修改刚才的程序，得到如下代码，定义一个函数<code>memo</code>返回我们需要的装饰器，这里用<code>cache</code>保存子问题的解，key是方法的参数，也就是数字<code>n</code>，值就是<code>fib(n)</code>返回的解。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">memo</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="n">cache</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line">    <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">wrap</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">args</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">cache</span><span class="p">:</span>
</span><span class="line">            <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span><span class="o">=</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">wrap</span>
</span><span class="line">
</span><span class="line"><span class="nd">@memo</span>
</span><span class="line"><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">:</span> <span class="k">return</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">return</span> <span class="n">fib</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="n">fib</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>重新运行下<code>fib(100)</code>，你会发现这次很快就得到了结果<code>573147844013817084101</code>，这就是动态规划的威力，上面使用的是第一种带备忘录的递归实现方式。</p>

<p><strong>带备忘录的递归方式的优点就是易于理解，易于实现，代码简洁干净，运行速度也不错，直接从需要求解的问题出发，而且只计算需要求解的子问题，没有多余的计算。但是，它也有自己的缺点，因为是递归形式，所以有限的栈深度是它的硬伤，有些问题难免会出现栈溢出了。</strong></p>

<p>于是，迭代版本的实现方式就诞生了！</p>

<p><strong>迭代实现方式有2个好处：1.运行速度快，因为没有用栈去实现，也避免了栈溢出的情况；2.迭代实现的话可以不使用dict来进行缓存，而是使用其他的特殊cache结构，例如多维数组等更为高效的数据结构。</strong></p>

<p>那怎么把递归版本转变成迭代版本呢？</p>

<p><strong>这就是递归实现和迭代实现的重要区别：递归实现不需要去考虑计算顺序，只要给出问题，然后自顶向下去解就行；而迭代实现需要考虑计算顺序，并且顺序很重要，算法在运行的过程中要保证当前要计算的问题中的子问题的解已经是求解好了的。</strong></p>

<p>斐波那契数列的迭代版本很简单，就是按顺序来计算就行了，不解释，关键是你可以看到我们就用了3个简单变量就求解出来了，没有使用任何高级的数据结构，节省了大量的空间。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">fib_iter</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">n</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">:</span> <span class="k">return</span> <span class="mi">1</span>
</span><span class="line">    <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span>
</span><span class="line">    <span class="k">while</span> <span class="n">n</span><span class="o">&gt;=</span><span class="mi">2</span><span class="p">:</span>
</span><span class="line">        <span class="n">c</span><span class="o">=</span><span class="n">a</span><span class="o">+</span><span class="n">b</span>
</span><span class="line">        <span class="n">a</span><span class="o">=</span><span class="n">b</span>
</span><span class="line">        <span class="n">b</span><span class="o">=</span><span class="n">c</span>
</span><span class="line">        <span class="n">n</span><span class="o">=</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span>
</span><span class="line">    <span class="k">return</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>斐波那契数列的变种经常出现在上楼梯的走法问题中，每次只能走一个台阶或者两个台阶，广义上思考的话，<strong>动态规划也就是一个连续决策问题，到底当前这一步是选择它(走一步)还是不选择它(走两步)呢?</strong></p>

<p>其他问题也可以很快地变相思考发现它们其实是一样的，例如求二项式系数<code>C(n,k)</code>，杨辉三角(求从源点到目标点有多少种走法)等等问题。</p>

<p>二项式系数<code>C(n,k)</code>表示从n个中选k个，假设我们现在n个中的第1个，考虑是否选择它。如果选择它的话，那么我们还需要从剩下的n-1个中选k-1个，即<code>C(n-1,k-1)</code>；如果不选择它的话，我们需要从剩下的n-1中选k个，即<code>C(n-1,k)</code>。所以，<code>C(n,k)=C(n-1,k-1)+C(n-1,k)</code>。</p>

<p>结合前面的装饰器，我们很快便可以实现求二项式系数的递归实现代码，其中的<code>memo</code>函数完全没变，只是在函数<code>cnk</code>前面添加了<code>@memo</code>而已，就这么简单！</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">memo</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="n">cache</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line">    <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">wrap</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">args</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">cache</span><span class="p">:</span>
</span><span class="line">            <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span><span class="o">=</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">wrap</span>
</span><span class="line">
</span><span class="line"><span class="nd">@memo</span>
</span><span class="line"><span class="k">def</span> <span class="nf">cnk</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">k</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">k</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="mi">1</span> <span class="c">#the order of `if` should not change!!!</span>
</span><span class="line">    <span class="k">if</span> <span class="n">n</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">return</span> <span class="n">cnk</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">k</span><span class="p">)</span><span class="o">+</span><span class="n">cnk</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>它的迭代版本也比较简单，这里使用了<code>defaultdict</code>，略高级的数据结构，和dict不同的是，当查找的key不存在对应的value时，会返回一个默认的值，这个很有用，下面的代码可以看到。</p>

<p>如果不了解<code>defaultdict</code>的话可以看下<a href="http://blog.jobbole.com/65218/">这篇文章：Python中的高级数据结构</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span><span class="line">
</span><span class="line"><span class="n">n</span><span class="p">,</span><span class="n">k</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span><span class="mi">7</span>
</span><span class="line"><span class="n">C</span><span class="o">=</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span><span class="line"><span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class="line">    <span class="n">C</span><span class="p">[</span><span class="n">row</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span>
</span><span class="line">    <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class="line">        <span class="n">C</span><span class="p">[</span><span class="n">row</span><span class="p">,</span><span class="n">col</span><span class="p">]</span><span class="o">=</span><span class="n">C</span><span class="p">[</span><span class="n">row</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">col</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="n">C</span><span class="p">[</span><span class="n">row</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">col</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">C</span><span class="p">[</span><span class="n">n</span><span class="p">,</span><span class="n">k</span><span class="p">])</span> <span class="c">#120</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>杨辉三角大家都熟悉，在国外这个叫<code>Pascal Triangle</code>，它和二项式系数特别相似，看下图，除了两边的数字之外，里面的任何一个数字都是由它上面相邻的两个元素相加得到，想想<code>C(n,k)=C(n-1,k-1)+C(n-1,k)</code>不也就是这儿含义吗?</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/sanjiao.png" alt="image" /></p>

<p>所以说，顺序对于迭代版本的动态规划实现很重要，下面举个实例，用动态规划解决有向无环图的单源最短路径问题。假设有如下图所示的图，当然，我们看到的是这个有向无环图经过了拓扑排序之后的结果，从a到f的最短路径用灰色标明了。</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/dag_sp.png" alt="image" /></p>

<p>好，怎么实现呢? </p>

<p><strong>我们有两种思考方式：</strong></p>

<p><strong>1.”去哪里?”：我们顺向思维，首先假设从a点出发到所有其他点的距离都是无穷大，然后，按照拓扑排序的顺序，从a点出发，接着更新a点能够到达的其他的点的距离，那么就是b点和f点，b点的距离变成2，f点的距离变成9。因为这个有向无环图是经过了拓扑排序的，所以按照拓扑顺序访问一遍所有的点(到了目标点就可以停止了)就能够得到a点到所有已访问到的点的最短距离，也就是说，当到达哪个点的时候，我们就找到了从a点到该点的最短距离，拓扑排序保证了后面的点不会指向前面的点，所以访问到后面的点时不可能再更新它前面的点的最短距离！这种思维方式的代码实现就是迭代版本。</strong></p>

<p>这里涉及到了拓扑排序，我的博客中还没有讲解，所以下面的代码已经将输入的点进行了拓扑排序，待我更新了图算法那篇文章再来更新这里的代码，谅解。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">topsort</span><span class="p">(</span><span class="n">W</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="n">W</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">dag_sp</span><span class="p">(</span><span class="n">W</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">):</span>
</span><span class="line">    <span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="n">u</span><span class="p">:</span><span class="nb">float</span><span class="p">(</span><span class="s">&#39;inf&#39;</span><span class="p">)</span> <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">W</span><span class="p">}</span> <span class="c">#</span>
</span><span class="line">    <span class="n">d</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">topsort</span><span class="p">(</span><span class="n">W</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">u</span> <span class="o">==</span> <span class="n">t</span><span class="p">:</span> <span class="k">break</span>
</span><span class="line">        <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">W</span><span class="p">[</span><span class="n">u</span><span class="p">]:</span>
</span><span class="line">            <span class="n">d</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">v</span><span class="p">],</span> <span class="n">d</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">+</span> <span class="n">W</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">])</span>
</span><span class="line">    <span class="k">return</span> <span class="n">d</span><span class="p">[</span><span class="n">t</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="c">#邻接表</span>
</span><span class="line"><span class="n">W</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">:{</span><span class="mi">1</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">:</span><span class="mi">9</span><span class="p">},</span><span class="mi">1</span><span class="p">:{</span><span class="mi">2</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">:</span><span class="mi">6</span><span class="p">},</span><span class="mi">2</span><span class="p">:{</span><span class="mi">3</span><span class="p">:</span><span class="mi">7</span><span class="p">},</span><span class="mi">3</span><span class="p">:{</span><span class="mi">4</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">:</span><span class="mi">3</span><span class="p">},</span><span class="mi">4</span><span class="p">:{</span><span class="mi">5</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span><span class="mi">5</span><span class="p">:{}}</span>
</span><span class="line"><span class="n">s</span><span class="p">,</span><span class="n">t</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">dag_sp</span><span class="p">(</span><span class="n">W</span><span class="p">,</span><span class="n">s</span><span class="p">,</span><span class="n">t</span><span class="p">))</span> <span class="c">#7</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>用图来表示计算过程就是下面所示：</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/dag_sp_iter.png" alt="image" /></p>

<p><strong>2.”从哪里来?”：我们逆向思维，目标是要到f，那从a点经过哪个点到f点会近些呢?只能是求解从a点出发能够到达的那些点哪个距离f点更近，这里a点能够到达b点和f点，f点到f点距离是0，但是a到f点的距离是9，可能不是最近的路，所以还要看b点到f点有多近，看b点到f点有多近就是求解从b点出发能够到达的那些点哪个距离f点更近，所以又绕回来了，也就是递归下去，直到我们能够回答从a点经过哪个点到f点会更近。这种思维方式的代码实现就是递归版本。</strong></p>

<p>这种情况下，不需要输入是经过了拓扑排序的，所以你可以任意修改输入<code>W</code>中节点的顺序，结果都是一样的，而上面采用迭代实现方式必须要是拓扑排序了的，从中你就可以看出迭代版本和递归版本的区别了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
</span><span class="line"><span class="k">def</span> <span class="nf">memo</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="n">cache</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line">    <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">wrap</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">args</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">cache</span><span class="p">:</span>
</span><span class="line">            <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span><span class="o">=</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">            <span class="c"># print(&#39;cache {0} = {1}&#39;.format(args[0],cache[args]))</span>
</span><span class="line">        <span class="k">return</span> <span class="n">cache</span><span class="p">[</span><span class="n">args</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">wrap</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">rec_dag_sp</span><span class="p">(</span><span class="n">W</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">):</span>
</span><span class="line">    <span class="nd">@memo</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">d</span><span class="p">(</span><span class="n">u</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">u</span> <span class="o">==</span> <span class="n">t</span><span class="p">:</span> <span class="k">return</span> <span class="mi">0</span>
</span><span class="line">        <span class="k">return</span> <span class="nb">min</span><span class="p">(</span><span class="n">W</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">v</span><span class="p">]</span><span class="o">+</span><span class="n">d</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">W</span><span class="p">[</span><span class="n">u</span><span class="p">])</span>
</span><span class="line">    <span class="k">return</span> <span class="n">d</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">#邻接表</span>
</span><span class="line"><span class="n">W</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">:{</span><span class="mi">1</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">:</span><span class="mi">9</span><span class="p">},</span><span class="mi">1</span><span class="p">:{</span><span class="mi">2</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">:</span><span class="mi">6</span><span class="p">},</span><span class="mi">2</span><span class="p">:{</span><span class="mi">3</span><span class="p">:</span><span class="mi">7</span><span class="p">},</span><span class="mi">3</span><span class="p">:{</span><span class="mi">4</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">:</span><span class="mi">3</span><span class="p">},</span><span class="mi">4</span><span class="p">:{</span><span class="mi">5</span><span class="p">:</span><span class="mi">4</span><span class="p">},</span><span class="mi">5</span><span class="p">:{}}</span>
</span><span class="line"><span class="n">s</span><span class="p">,</span><span class="n">t</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">rec_dag_sp</span><span class="p">(</span><span class="n">W</span><span class="p">,</span><span class="n">s</span><span class="p">,</span><span class="n">t</span><span class="p">))</span> <span class="c">#7</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>用图来表示计算过程就是下面所示：</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/dag_sp_rec.png" alt="image" /></p>

<p>下面是参考内容1对DAG求单源最短路径的动态规划问题的总结，比较难理解，不知道我自己理解得对不对，可以忽视注释，:-)</p>

<p><img src="http://hujiaweibujidao.github.io/images/algos/dp_summary.png" alt="image" /></p>

<p>好，我们差不多搞清楚了动态规划的本质以及两种实现方式的优缺点，下面我们来实践下，举最常用的例子：<a href="http://hujiaweibujidao.github.io/blog/2014/05/18/matrix-chain/">矩阵链乘问题内容较多，所以请点击链接过去阅读完了之后回来看总结</a>！</p>

<p>OK，希望我把动态规划将清楚了，总结下：<strong>动态规划其实就是一个连续决策的过程，每次决策我们可能有多种选择(二项式系数和0-1背包问题中我们只有两个选择，DAG图的单源最短路径中我们的选择要看点的出边或者入边，矩阵链乘问题中就是矩阵链可以分开的位置总数…)，我们每次选择最好的那个作为我们的决策。动态规划有2中实现方式，一种是带备忘录的递归形式，这种方式直接从原问题出发，遇到子问题就去求解子问题并存储子问题的解，下次遇到的时候直接取出来，问题求解的过程看起来就像是先自顶向下地展开问题，然后自下而上的进行决策。另一个实现方式是迭代方式，这种方式需要考虑如何给定一个子问题的求解方式，使得后面求解规模较大的问题是需要求解的子问题都已经求解好了，它的缺点就是可能有些子问题不要算但是它还是算了，而递归实现方式只会计算它需要求解的子问题。</strong></p>

<p>如果你感觉你有所顿悟，来试试写写<a href="http://hujiaweibujidao.github.io/blog/2014/05/19/longest-common-subsequence/">最长公共子序列吧，这篇文章中给出了Python版本的5种实现方式</a>哟！</p>

<p class="post-footer">
                        Original link:<a href="http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-dynamic-programming/">http://hujiaweibujidao.github.io/blog/2014/05/08/python-algorithms-dynamic-programming/</a><br />Written by <a href="http://hujiaweibujidao.github.io">hujiawei</a>&nbsp;Posted at <a href="http://hujiaweibujidao.github.io">http://hujiaweibujidao.github.io</a><br />Feel free to read or comment it, and if you want to copy it into your own site, please copy it with its Original Link showed above or you can see the license below for more details.If you have any problem or suggestion, please comment below. :-)<br />Thanks a lot. Hope you enjoy here! :-)</p>
]]></content>
  </entry>
  
</feed>
